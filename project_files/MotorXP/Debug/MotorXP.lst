
MotorXP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a74  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000524  1ffe8800  0c002a74  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000024  1ffe8d24  0c002f98  00010d24  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000c08  00000000  00000000  00010d28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ecf6  00000000  00000000  00011930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001995  00000000  00000000  00020626  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b96  00000000  00000000  00021fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000033e8  00000000  00000000  00025b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000087c4  00000000  00000000  00028f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006d68  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  00038468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000003f6  00000000  00000000  00038f60  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 39 0c 00 08 99 02 00 08 99 02 00 08     ....9...........
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 81 08 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 95 06 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002a74 	.word	0x0c002a74
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000524 	.word	0x00000524
 8000254:	0c002a74 	.word	0x0c002a74
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8d24 	.word	0x1ffe8d24
 8000264:	00000024 	.word	0x00000024
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08000fe5 	.word	0x08000fe5
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	080029cd 	.word	0x080029cd
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080020fd 	.word	0x080020fd

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <Sensor_Init>:
/*********************************************************************************
 * Global function definitions
 *********************************************************************************/

void Sensor_Init()
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	Sensor_Hall_Init();
 80002a0:	f000 fa30 	bl	8000704 <Sensor_Hall_Init>
	//Sensor_QD_Init();
	Sensor_Temperature_Init();
 80002a4:	f000 fcdc 	bl	8000c60 <Sensor_Temperature_Init>
}
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop

080002ac <Sensor_StartAll>:

void Sensor_StartAll()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	Sensor_Hall_Start();
 80002b0:	f000 fab2 	bl	8000818 <Sensor_Hall_Start>
	//Sensor_QD_Start();
}
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop

080002b8 <Sensor_SetDirection>:
{
	Sensor_Hall_Stop();
}

void Sensor_SetDirection(MotorDirection_t direction)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	Sensor_Hall_SetDirection(direction);
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fab5 	bl	8000834 <Sensor_Hall_SetDirection>
}
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <Sensor_RegisterHallCallback>:

Std_ReturnType Sensor_RegisterHallCallback(Sensor_HallCallbackType callback)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	SensorHallCallback = callback;
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <Sensor_RegisterHallCallback+0x1c>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	6013      	str	r3, [r2, #0]
	return E_OK;
 80002de:	2301      	movs	r3, #1
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	1ffe8d3c 	.word	0x1ffe8d3c

080002f0 <Sensor_GetCurrentHallPattern>:

Std_ReturnType Sensor_GetCurrentHallPattern(Sensor_HallPattern_t* pattern)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	*pattern = ActiveHallPattern;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a06      	ldr	r2, [pc, #24]	; (8000314 <Sensor_GetCurrentHallPattern+0x24>)
 80002fc:	8811      	ldrh	r1, [r2, #0]
 80002fe:	7892      	ldrb	r2, [r2, #2]
 8000300:	8019      	strh	r1, [r3, #0]
 8000302:	709a      	strb	r2, [r3, #2]
	return E_OK;
 8000304:	2301      	movs	r3, #1
}
 8000306:	4618      	mov	r0, r3
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	1ffe8d40 	.word	0x1ffe8d40

08000318 <Sensor_GetTemperature>:
{
	return E_OK;
}

Std_ReturnType Sensor_GetTemperature(int* temperature)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	*temperature = Sensor_Temperature_Calculate(TEMPERATURE_SENSOR_A);
 8000320:	2000      	movs	r0, #0
 8000322:	f000 fca5 	bl	8000c70 <Sensor_Temperature_Calculate>
 8000326:	4602      	mov	r2, r0
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
	return E_OK;
 800032c:	2301      	movs	r3, #1
}
 800032e:	4618      	mov	r0, r3
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop

08000338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <NVIC_EnableIRQ+0x2c>)
 8000344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000348:	095b      	lsrs	r3, r3, #5
 800034a:	79fa      	ldrb	r2, [r7, #7]
 800034c:	f002 021f 	and.w	r2, r2, #31
 8000350:	2001      	movs	r0, #1
 8000352:	fa00 f202 	lsl.w	r2, r0, r2
 8000356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	e000e100 	.word	0xe000e100

08000368 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000378:	2b00      	cmp	r3, #0
 800037a:	da0b      	bge.n	8000394 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	490d      	ldr	r1, [pc, #52]	; (80003b4 <NVIC_SetPriority+0x4c>)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	f003 030f 	and.w	r3, r3, #15
 8000384:	3b04      	subs	r3, #4
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	b2d2      	uxtb	r2, r2
 800038a:	0092      	lsls	r2, r2, #2
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	440b      	add	r3, r1
 8000390:	761a      	strb	r2, [r3, #24]
 8000392:	e009      	b.n	80003a8 <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000394:	4908      	ldr	r1, [pc, #32]	; (80003b8 <NVIC_SetPriority+0x50>)
 8000396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	0092      	lsls	r2, r2, #2
 80003a0:	b2d2      	uxtb	r2, r2
 80003a2:	440b      	add	r3, r1
 80003a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00
 80003b8:	e000e100 	.word	0xe000e100

080003bc <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	60da      	str	r2, [r3, #12]
}
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop

080003dc <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
 80003e4:	460b      	mov	r3, r1
 80003e6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	68da      	ldr	r2, [r3, #12]
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	2101      	movs	r1, #1
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	431a      	orrs	r2, r3
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	60da      	str	r2, [r3, #12]
}
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2201      	movs	r2, #1
 8000410:	60da      	str	r2, [r3, #12]
}
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	460b      	mov	r3, r1
 8000426:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000428:	887a      	ldrh	r2, [r7, #2]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	460b      	mov	r3, r1
 8000442:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8000444:	887a      	ldrh	r2, [r7, #2]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	683a      	ldr	r2, [r7, #0]
 8000462:	611a      	str	r2, [r3, #16]
}
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <XMC_POSIF_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Stop(),XMC_POSIF_IsRunning() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_Start(XMC_POSIF_t *const peripheral)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  peripheral->PRUNS = (uint32_t)POSIF_PRUNS_SRB_Msk;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2201      	movs	r2, #1
 800047c:	609a      	str	r2, [r3, #8]
}
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <XMC_POSIF_HSC_GetExpectedPattern>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_HSC_GetLastSampledPattern(),XMC_POSIF_HSC_GetCurrentPattern() \n\n\n
 */
__STATIC_INLINE uint8_t XMC_POSIF_HSC_GetExpectedPattern(XMC_POSIF_t *const peripheral)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  return ((uint8_t)((peripheral->HALP & POSIF_HALP_HEP_Msk) >> POSIF_HALP_HEP_Pos));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000498:	08db      	lsrs	r3, r3, #3
 800049a:	b2db      	uxtb	r3, r3
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <XMC_POSIF_HSC_SetHallPatterns>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_HSC_SetExpectedPattern(),XMC_POSIF_HSC_SetCurrentPattern() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_HSC_SetHallPatterns(XMC_POSIF_t *const peripheral, const uint8_t pattern_mask)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
  peripheral->HALPS = (uint32_t)(pattern_mask & (POSIF_HALPS_HCPS_Msk | POSIF_HALPS_HEPS_Msk));
 80004b4:	78fb      	ldrb	r3, [r7, #3]
 80004b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr

080004c8 <XMC_POSIF_HSC_UpdateHallPattern>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_HSC_SetHallPatterns() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_HSC_UpdateHallPattern(XMC_POSIF_t *const peripheral)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  peripheral->MCMS = (uint32_t)POSIF_MCMS_STHR_Msk;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2202      	movs	r2, #2
 80004d4:	649a      	str	r2, [r3, #72]	; 0x48
}
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <XMC_POSIF_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_DisableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_EnableEvent(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_t event)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
  peripheral->PFLGE |= (uint32_t)1 << (uint8_t)event;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	431a      	orrs	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <XMC_POSIF_ClearEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_SetEvent() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_ClearEvent(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_t event)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
  peripheral->RPFLG = (uint32_t)1 << (uint8_t)event;
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2201      	movs	r2, #1
 8000518:	409a      	lsls	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	460b      	mov	r3, r1
 8000532:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800053a:	409a      	lsls	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
}
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	fa22 f303 	lsr.w	r3, r2, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Sensor_Hall_InitPattern>:
/*********************************************************************************
 * Local function definitions
 *********************************************************************************/

void Sensor_Hall_InitPattern()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	uint8_t hallposition;

	hall[0] = XMC_GPIO_GetInput(HALL_PORT_A);
 800057a:	481c      	ldr	r0, [pc, #112]	; (80005ec <Sensor_Hall_InitPattern+0x78>)
 800057c:	2107      	movs	r1, #7
 800057e:	f7ff ffe5 	bl	800054c <XMC_GPIO_GetInput>
 8000582:	4602      	mov	r2, r0
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <Sensor_Hall_InitPattern+0x7c>)
 8000586:	601a      	str	r2, [r3, #0]
	hall[1] = XMC_GPIO_GetInput(HALL_PORT_B);
 8000588:	4818      	ldr	r0, [pc, #96]	; (80005ec <Sensor_Hall_InitPattern+0x78>)
 800058a:	2106      	movs	r1, #6
 800058c:	f7ff ffde 	bl	800054c <XMC_GPIO_GetInput>
 8000590:	4602      	mov	r2, r0
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <Sensor_Hall_InitPattern+0x7c>)
 8000594:	605a      	str	r2, [r3, #4]
	hall[2] = XMC_GPIO_GetInput(HALL_PORT_C);
 8000596:	4815      	ldr	r0, [pc, #84]	; (80005ec <Sensor_Hall_InitPattern+0x78>)
 8000598:	2105      	movs	r1, #5
 800059a:	f7ff ffd7 	bl	800054c <XMC_GPIO_GetInput>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <Sensor_Hall_InitPattern+0x7c>)
 80005a2:	609a      	str	r2, [r3, #8]

	hallposition = (uint32_t)((hall[0] | (hall[1] << 1) | (hall[2] << 2)));
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <Sensor_Hall_InitPattern+0x7c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <Sensor_Hall_InitPattern+0x7c>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4313      	orrs	r3, r2
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <Sensor_Hall_InitPattern+0x7c>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	4313      	orrs	r3, r2
 80005c4:	71fb      	strb	r3, [r7, #7]

	//Get the current hall pattern and push it to the registers
	XMC_POSIF_HSC_SetHallPatterns(POSIF_PTR, Sensor_Hall_GetPattern(hallposition));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f835 	bl	8000638 <Sensor_Hall_GetPattern>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4808      	ldr	r0, [pc, #32]	; (80005f4 <Sensor_Hall_InitPattern+0x80>)
 80005d2:	4619      	mov	r1, r3
 80005d4:	f7ff ff68 	bl	80004a8 <XMC_POSIF_HSC_SetHallPatterns>
	XMC_POSIF_HSC_UpdateHallPattern(POSIF_PTR);
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <Sensor_Hall_InitPattern+0x80>)
 80005da:	f7ff ff75 	bl	80004c8 <XMC_POSIF_HSC_UpdateHallPattern>

	//Save the active hall position for queries
	Sensor_Hall_SetActivePattern(hallposition);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f809 	bl	80005f8 <Sensor_Hall_SetActivePattern>
}
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	48028e00 	.word	0x48028e00
 80005f0:	1ffe8d24 	.word	0x1ffe8d24
 80005f4:	40028000 	.word	0x40028000

080005f8 <Sensor_Hall_SetActivePattern>:

void Sensor_Hall_SetActivePattern(uint8_t hallposition)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	ActiveHallPattern.h1 = hallposition & 0x1;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <Sensor_Hall_SetActivePattern+0x3c>)
 800060c:	701a      	strb	r2, [r3, #0]
	ActiveHallPattern.h2 = (hallposition & 0x2) >> 1;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 0302 	and.w	r3, r3, #2
 8000614:	105b      	asrs	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <Sensor_Hall_SetActivePattern+0x3c>)
 800061a:	705a      	strb	r2, [r3, #1]
	ActiveHallPattern.h3 = (hallposition & 0x4) >> 2;
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 0304 	and.w	r3, r3, #4
 8000622:	109b      	asrs	r3, r3, #2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <Sensor_Hall_SetActivePattern+0x3c>)
 8000628:	709a      	strb	r2, [r3, #2]
}
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	1ffe8d40 	.word	0x1ffe8d40

08000638 <Sensor_Hall_GetPattern>:

uint8_t Sensor_Hall_GetPattern(uint8_t currentPattern)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
	switch(motorDirection)
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <Sensor_Hall_GetPattern+0x38>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <Sensor_Hall_GetPattern+0x18>
 800064a:	2b01      	cmp	r3, #1
 800064c:	d004      	beq.n	8000658 <Sensor_Hall_GetPattern+0x20>
 800064e:	e007      	b.n	8000660 <Sensor_Hall_GetPattern+0x28>
	{
	case ClockWise:
		return hall_pattern_cw[currentPattern];
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <Sensor_Hall_GetPattern+0x3c>)
 8000654:	5cd3      	ldrb	r3, [r2, r3]
 8000656:	e004      	b.n	8000662 <Sensor_Hall_GetPattern+0x2a>
	case CounterClockWise:
		return hall_pattern_ccw[currentPattern];
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <Sensor_Hall_GetPattern+0x40>)
 800065c:	5cd3      	ldrb	r3, [r2, r3]
 800065e:	e000      	b.n	8000662 <Sensor_Hall_GetPattern+0x2a>
	}

	return 0;
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	1ffe8d30 	.word	0x1ffe8d30
 8000674:	1ffe8808 	.word	0x1ffe8808
 8000678:	1ffe8800 	.word	0x1ffe8800

0800067c <Sensor_GetDirection>:
/*********************************************************************************
 * Global function definitions
 *********************************************************************************/

MotorDirection_t Sensor_GetDirection(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
	return motorDirection;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <Sensor_GetDirection+0x14>)
 8000682:	781b      	ldrb	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	1ffe8d30 	.word	0x1ffe8d30

08000694 <POSIF0_0_IRQHandler>:

void POSIF0_0_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint8_t hallposition;

	/* Set the new Hall pattern */
	hallposition = XMC_POSIF_HSC_GetExpectedPattern(POSIF_PTR);
 800069a:	4816      	ldr	r0, [pc, #88]	; (80006f4 <POSIF0_0_IRQHandler+0x60>)
 800069c:	f7ff fef4 	bl	8000488 <XMC_POSIF_HSC_GetExpectedPattern>
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]
	XMC_POSIF_HSC_SetHallPatterns(POSIF_PTR, Sensor_Hall_GetPattern(hallposition));
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ffc6 	bl	8000638 <Sensor_Hall_GetPattern>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <POSIF0_0_IRQHandler+0x60>)
 80006b0:	4619      	mov	r1, r3
 80006b2:	f7ff fef9 	bl	80004a8 <XMC_POSIF_HSC_SetHallPatterns>
	XMC_POSIF_HSC_UpdateHallPattern(POSIF_PTR);
 80006b6:	480f      	ldr	r0, [pc, #60]	; (80006f4 <POSIF0_0_IRQHandler+0x60>)
 80006b8:	f7ff ff06 	bl	80004c8 <XMC_POSIF_HSC_UpdateHallPattern>

	//Save the active hall position for queries
	Sensor_Hall_SetActivePattern(hallposition);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff9a 	bl	80005f8 <Sensor_Hall_SetActivePattern>
	/* Update motor pattern */
	if (currentPattern != NULL && *currentPattern != -1) {
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <POSIF0_0_IRQHandler+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d004      	beq.n	80006d6 <POSIF0_0_IRQHandler+0x42>
		++currentPattern;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <POSIF0_0_IRQHandler+0x64>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <POSIF0_0_IRQHandler+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]
	else {
		/* Externally driven - nothing to do */
	}
	//XMC_POSIF_MCM_SetMultiChannelPattern(POSIF_PTR, 1 << pattern*currentPattern);

	XMC_POSIF_ClearEvent(POSIF_PTR, XMC_POSIF_IRQ_EVENT_CHE);
 80006d6:	4807      	ldr	r0, [pc, #28]	; (80006f4 <POSIF0_0_IRQHandler+0x60>)
 80006d8:	2100      	movs	r1, #0
 80006da:	f7ff ff15 	bl	8000508 <XMC_POSIF_ClearEvent>
	/* Peak */
	XMC_GPIO_ToggleOutput(HALL_EVENT_IO);
 80006de:	4807      	ldr	r0, [pc, #28]	; (80006fc <POSIF0_0_IRQHandler+0x68>)
 80006e0:	2109      	movs	r1, #9
 80006e2:	f7ff ff21 	bl	8000528 <XMC_GPIO_ToggleOutput>

	SensorHallCallback();
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <POSIF0_0_IRQHandler+0x6c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4798      	blx	r3
}
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40028000 	.word	0x40028000
 80006f8:	1ffe8d38 	.word	0x1ffe8d38
 80006fc:	48028500 	.word	0x48028500
 8000700:	1ffe8d3c 	.word	0x1ffe8d3c

08000704 <Sensor_Hall_Init>:

void Sensor_Hall_Init()
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(HALL_PORT_A, &HALL_POSIF_0_Hall_PadConfig);
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <Sensor_Hall_Init+0xe0>)
 800070a:	2107      	movs	r1, #7
 800070c:	4a36      	ldr	r2, [pc, #216]	; (80007e8 <Sensor_Hall_Init+0xe4>)
 800070e:	f000 fe95 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(HALL_PORT_B, &HALL_POSIF_0_Hall_PadConfig);
 8000712:	4834      	ldr	r0, [pc, #208]	; (80007e4 <Sensor_Hall_Init+0xe0>)
 8000714:	2106      	movs	r1, #6
 8000716:	4a34      	ldr	r2, [pc, #208]	; (80007e8 <Sensor_Hall_Init+0xe4>)
 8000718:	f000 fe90 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(HALL_PORT_C, &HALL_POSIF_0_Hall_PadConfig);
 800071c:	4831      	ldr	r0, [pc, #196]	; (80007e4 <Sensor_Hall_Init+0xe0>)
 800071e:	2105      	movs	r1, #5
 8000720:	4a31      	ldr	r2, [pc, #196]	; (80007e8 <Sensor_Hall_Init+0xe4>)
 8000722:	f000 fe8b 	bl	800143c <XMC_GPIO_Init>

	XMC_GPIO_SetMode(HALL_EVENT_IO, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8000726:	4831      	ldr	r0, [pc, #196]	; (80007ec <Sensor_Hall_Init+0xe8>)
 8000728:	2109      	movs	r1, #9
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	f001 f94e 	bl	80019cc <XMC_GPIO_SetMode>

	/* Enable clock, enable prescaler block and configure global control */
	XMC_CCU4_Init(HALL_CCU, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8000730:	482f      	ldr	r0, [pc, #188]	; (80007f0 <Sensor_Hall_Init+0xec>)
 8000732:	2100      	movs	r1, #0
 8000734:	f000 fff2 	bl	800171c <XMC_CCU4_Init>

	/* Start the prescaler and restore clocks to slices */
	XMC_CCU4_StartPrescaler(HALL_CCU);
 8000738:	482d      	ldr	r0, [pc, #180]	; (80007f0 <Sensor_Hall_Init+0xec>)
 800073a:	f7ff fe3f 	bl	80003bc <XMC_CCU4_StartPrescaler>

	/* Ensure fCCU reaches CCU40, CCU80 */
	XMC_CCU4_SetModuleClock(HALL_CCU, XMC_CCU4_CLOCK_SCU);
 800073e:	482c      	ldr	r0, [pc, #176]	; (80007f0 <Sensor_Hall_Init+0xec>)
 8000740:	2100      	movs	r1, #0
 8000742:	f001 f809 	bl	8001758 <XMC_CCU4_SetModuleClock>

	/* Configure CCU4 slices as monoshot and capture slice */
	XMC_CCU4_SLICE_CompareInit(DELAY_SLICE_PTR, &hall_delay_config);
 8000746:	482b      	ldr	r0, [pc, #172]	; (80007f4 <Sensor_Hall_Init+0xf0>)
 8000748:	492b      	ldr	r1, [pc, #172]	; (80007f8 <Sensor_Hall_Init+0xf4>)
 800074a:	f001 f81f 	bl	800178c <XMC_CCU4_SLICE_CompareInit>
	XMC_CCU4_SLICE_CaptureInit(CAPTURE_SLICE_PTR, &hall_capture_config);
 800074e:	482b      	ldr	r0, [pc, #172]	; (80007fc <Sensor_Hall_Init+0xf8>)
 8000750:	492b      	ldr	r1, [pc, #172]	; (8000800 <Sensor_Hall_Init+0xfc>)
 8000752:	f001 f851 	bl	80017f8 <XMC_CCU4_SLICE_CaptureInit>

	/* Configure CCU4 delay as 1us - CCU40.ST0 is connected to POSIF.HSDA*/
	XMC_CCU4_SLICE_SetTimerPeriodMatch(DELAY_SLICE_PTR, 127U);
 8000756:	4827      	ldr	r0, [pc, #156]	; (80007f4 <Sensor_Hall_Init+0xf0>)
 8000758:	217f      	movs	r1, #127	; 0x7f
 800075a:	f7ff fe5f 	bl	800041c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
	XMC_CCU4_SLICE_SetTimerCompareMatch(DELAY_SLICE_PTR, 64U);
 800075e:	4825      	ldr	r0, [pc, #148]	; (80007f4 <Sensor_Hall_Init+0xf0>)
 8000760:	2140      	movs	r1, #64	; 0x40
 8000762:	f7ff fe69 	bl	8000438 <XMC_CCU4_SLICE_SetTimerCompareMatch>
	XMC_CCU4_SLICE_SetTimerPeriodMatch(CAPTURE_SLICE_PTR, 65535U);
 8000766:	4825      	ldr	r0, [pc, #148]	; (80007fc <Sensor_Hall_Init+0xf8>)
 8000768:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800076c:	f7ff fe56 	bl	800041c <XMC_CCU4_SLICE_SetTimerPeriodMatch>

	/* Transfer value from shadow timer registers to actual timer registers */
	XMC_CCU4_EnableShadowTransfer(HALL_CCU, (uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0 | XMC_CCU4_SHADOW_TRANSFER_SLICE_1));
 8000770:	481f      	ldr	r0, [pc, #124]	; (80007f0 <Sensor_Hall_Init+0xec>)
 8000772:	2111      	movs	r1, #17
 8000774:	f7ff fe6e 	bl	8000454 <XMC_CCU4_EnableShadowTransfer>

	/* Configure and enable events */
	XMC_CCU4_SLICE_StartConfig(DELAY_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR);
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <Sensor_Hall_Init+0xf0>)
 800077a:	2101      	movs	r1, #1
 800077c:	2201      	movs	r2, #1
 800077e:	f001 f861 	bl	8001844 <XMC_CCU4_SLICE_StartConfig>
	XMC_CCU4_SLICE_Capture0Config(CAPTURE_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0);
 8000782:	481e      	ldr	r0, [pc, #120]	; (80007fc <Sensor_Hall_Init+0xf8>)
 8000784:	2101      	movs	r1, #1
 8000786:	f001 f88b 	bl	80018a0 <XMC_CCU4_SLICE_Capture0Config>
	XMC_CCU4_SLICE_ConfigureEvent(CAPTURE_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &hall_capture_event0_config);
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <Sensor_Hall_Init+0xf8>)
 800078c:	2101      	movs	r1, #1
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <Sensor_Hall_Init+0x100>)
 8000790:	f001 f8a0 	bl	80018d4 <XMC_CCU4_SLICE_ConfigureEvent>
	XMC_CCU4_SLICE_ConfigureEvent(DELAY_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &hall_start_event0_config);
 8000794:	4817      	ldr	r0, [pc, #92]	; (80007f4 <Sensor_Hall_Init+0xf0>)
 8000796:	2101      	movs	r1, #1
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <Sensor_Hall_Init+0x104>)
 800079a:	f001 f89b 	bl	80018d4 <XMC_CCU4_SLICE_ConfigureEvent>

	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(HALL_CCU, DELAY_SLICE_NUMBER);
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <Sensor_Hall_Init+0xec>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	f7ff fe1b 	bl	80003dc <XMC_CCU4_EnableClock>
	XMC_CCU4_EnableClock(HALL_CCU, CAPTURE_SLICE_NUMBER);
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <Sensor_Hall_Init+0xec>)
 80007a8:	2101      	movs	r1, #1
 80007aa:	f7ff fe17 	bl	80003dc <XMC_CCU4_EnableClock>

	/* POSIF Configuration */
	XMC_POSIF_Init(POSIF_PTR, &POSIF_HALL_config);
 80007ae:	4817      	ldr	r0, [pc, #92]	; (800080c <Sensor_Hall_Init+0x108>)
 80007b0:	4917      	ldr	r1, [pc, #92]	; (8000810 <Sensor_Hall_Init+0x10c>)
 80007b2:	f001 f97f 	bl	8001ab4 <XMC_POSIF_Init>
	XMC_POSIF_HSC_Init(POSIF_PTR, &POSIF_HSC_config);
 80007b6:	4815      	ldr	r0, [pc, #84]	; (800080c <Sensor_Hall_Init+0x108>)
 80007b8:	4916      	ldr	r1, [pc, #88]	; (8000814 <Sensor_Hall_Init+0x110>)
 80007ba:	f001 f98d 	bl	8001ad8 <XMC_POSIF_HSC_Init>
	XMC_POSIF_EnableEvent(POSIF_PTR, XMC_POSIF_IRQ_EVENT_CHE);
 80007be:	4813      	ldr	r0, [pc, #76]	; (800080c <Sensor_Hall_Init+0x108>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	f7ff fe8d 	bl	80004e0 <XMC_POSIF_EnableEvent>

	/* Connect correct hall event to SR0 */
	XMC_POSIF_SetInterruptNode(POSIF_PTR, XMC_POSIF_IRQ_EVENT_CHE, XMC_POSIF_SR_ID_0);
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <Sensor_Hall_Init+0x108>)
 80007c8:	2100      	movs	r1, #0
 80007ca:	2200      	movs	r2, #0
 80007cc:	f001 f9a4 	bl	8001b18 <XMC_POSIF_SetInterruptNode>

	/* Configure NVIC */
	/* Set priority */
	NVIC_SetPriority(POSIF0_0_IRQn, 0U);
 80007d0:	2044      	movs	r0, #68	; 0x44
 80007d2:	2100      	movs	r1, #0
 80007d4:	f7ff fdc8 	bl	8000368 <NVIC_SetPriority>
	/* Enable IRQ */
	NVIC_EnableIRQ(POSIF0_0_IRQn);
 80007d8:	2044      	movs	r0, #68	; 0x44
 80007da:	f7ff fdad 	bl	8000338 <NVIC_EnableIRQ>

	//Initialize the hall pattern
	Sensor_Hall_InitPattern();
 80007de:	f7ff fec9 	bl	8000574 <Sensor_Hall_InitPattern>
}
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	48028e00 	.word	0x48028e00
 80007e8:	1ffe8830 	.word	0x1ffe8830
 80007ec:	48028500 	.word	0x48028500
 80007f0:	4000c000 	.word	0x4000c000
 80007f4:	4000c100 	.word	0x4000c100
 80007f8:	1ffe8810 	.word	0x1ffe8810
 80007fc:	4000c200 	.word	0x4000c200
 8000800:	1ffe8818 	.word	0x1ffe8818
 8000804:	1ffe8824 	.word	0x1ffe8824
 8000808:	1ffe8820 	.word	0x1ffe8820
 800080c:	40028000 	.word	0x40028000
 8000810:	1ffe8828 	.word	0x1ffe8828
 8000814:	1ffe882c 	.word	0x1ffe882c

08000818 <Sensor_Hall_Start>:

void Sensor_Hall_Start()
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* Start Timer Running */
	XMC_CCU4_SLICE_StartTimer(CAPTURE_SLICE_PTR);
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <Sensor_Hall_Start+0x14>)
 800081e:	f7ff fdf1 	bl	8000404 <XMC_CCU4_SLICE_StartTimer>

	/* Start the POSIF module*/
	XMC_POSIF_Start(POSIF_PTR);
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <Sensor_Hall_Start+0x18>)
 8000824:	f7ff fe24 	bl	8000470 <XMC_POSIF_Start>
}
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	4000c200 	.word	0x4000c200
 8000830:	40028000 	.word	0x40028000

08000834 <Sensor_Hall_SetDirection>:
	/* Start the POSIF module*/
	XMC_POSIF_Stop(POSIF_PTR);
}

void Sensor_Hall_SetDirection(MotorDirection_t direction)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	motorDirection = direction;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <Sensor_Hall_SetDirection+0x1c>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	7013      	strb	r3, [r2, #0]
}
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	1ffe8d30 	.word	0x1ffe8d30

08000854 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	2101      	movs	r1, #1
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <CCU41_0_IRQHandler>:
	XMC_CCU4_EnableClock(CCU_PTR, SLICE2_NUMBER);
	XMC_CCU4_EnableClock(CCU_PTR, SLICE3_NUMBER);
}

void CCU41_0_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	uint16_t capturedvalue0;
	uint16_t capturedvalue1;

	/* Clear pending interrupt */
	XMC_CCU4_SLICE_ClearEvent(SLICE3_PTR, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <CCU41_0_IRQHandler+0x2c>)
 8000888:	210a      	movs	r1, #10
 800088a:	f7ff ffe3 	bl	8000854 <XMC_CCU4_SLICE_ClearEvent>

	capturedvalue0 = XMC_CCU4_SLICE_GetCaptureRegisterValue(SLICE3_PTR,1U);
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <CCU41_0_IRQHandler+0x2c>)
 8000890:	2101      	movs	r1, #1
 8000892:	f001 f889 	bl	80019a8 <XMC_CCU4_SLICE_GetCaptureRegisterValue>
 8000896:	4603      	mov	r3, r0
 8000898:	80fb      	strh	r3, [r7, #6]
	capturedvalue1 = XMC_CCU4_SLICE_GetCaptureRegisterValue(SLICE3_PTR,3U);
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <CCU41_0_IRQHandler+0x2c>)
 800089c:	2103      	movs	r1, #3
 800089e:	f001 f883 	bl	80019a8 <XMC_CCU4_SLICE_GetCaptureRegisterValue>
 80008a2:	4603      	mov	r3, r0
 80008a4:	80bb      	strh	r3, [r7, #4]
}
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40010400 	.word	0x40010400

080008b0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80008bc:	0a1b      	lsrs	r3, r3, #8
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <NVIC_EnableIRQ+0x2c>)
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	095b      	lsrs	r3, r3, #5
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	f002 021f 	and.w	r2, r2, #31
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100

080008fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da0b      	bge.n	8000928 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	490d      	ldr	r1, [pc, #52]	; (8000948 <NVIC_SetPriority+0x4c>)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	3b04      	subs	r3, #4
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	761a      	strb	r2, [r3, #24]
 8000926:	e009      	b.n	800093c <NVIC_SetPriority+0x40>
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	4908      	ldr	r1, [pc, #32]	; (800094c <NVIC_SetPriority+0x50>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	0092      	lsls	r2, r2, #2
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000ed00 	.word	0xe000ed00
 800094c:	e000e100 	.word	0xe000e100

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b06      	cmp	r3, #6
 800096c:	bf28      	it	cs
 800096e:	2306      	movcs	r3, #6
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3306      	adds	r3, #6
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b01      	subs	r3, #1
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2201      	movs	r2, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	401a      	ands	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	1e59      	subs	r1, r3, #1
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80009a4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3724      	adds	r7, #36	; 0x24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3310      	adds	r3, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	2301      	movs	r3, #1
 80009cc:	408b      	lsls	r3, r1
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	3260      	adds	r2, #96	; 0x60
 8000a16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	ea42 0103 	orr.w	r1, r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	68ba      	ldr	r2, [r7, #8]
 8000a2a:	3260      	adds	r2, #96	; 0x60
 8000a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	32a0      	adds	r2, #160	; 0xa0
 8000a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	32c0      	adds	r2, #192	; 0xc0
 8000a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a74:	b29b      	uxth	r3, r3
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <Sensor_Temperature_ADC_InitGlobal>:
/*********************************************************************************
 * Local function definitions
 *********************************************************************************/

void Sensor_Temperature_ADC_InitGlobal(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	/* Initialize an instance of Global hardware */
	XMC_VADC_GLOBAL_Init(ADC_MODULE, &global_config);
 8000a88:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000a8c:	490a      	ldr	r1, [pc, #40]	; (8000ab8 <Sensor_Temperature_ADC_InitGlobal+0x34>)
 8000a8e:	f001 f8d3 	bl	8001c38 <XMC_VADC_GLOBAL_Init>

	/*Initialize Group 0*/
	{
		XMC_VADC_GROUP_Init((XMC_VADC_GROUP_t *)VADC_G0, (XMC_VADC_GROUP_CONFIG_t *)&group_init_handle0);
 8000a92:	480a      	ldr	r0, [pc, #40]	; (8000abc <Sensor_Temperature_ADC_InitGlobal+0x38>)
 8000a94:	490a      	ldr	r1, [pc, #40]	; (8000ac0 <Sensor_Temperature_ADC_InitGlobal+0x3c>)
 8000a96:	f001 f971 	bl	8001d7c <XMC_VADC_GROUP_Init>

		/* Switch on the converter of the Group[group_index]*/
		XMC_VADC_GROUP_SetPowerMode((XMC_VADC_GROUP_t *)VADC_G0, XMC_VADC_GROUP_POWERMODE_NORMAL);
 8000a9a:	4808      	ldr	r0, [pc, #32]	; (8000abc <Sensor_Temperature_ADC_InitGlobal+0x38>)
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	f001 f9fd 	bl	8001e9c <XMC_VADC_GROUP_SetPowerMode>

		/* Disable the post calibration option for the respective group*/
		XMC_VADC_GLOBAL_DisablePostCalibration(ADC_MODULE, 0);
 8000aa2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f7ff ff84 	bl	80009b4 <XMC_VADC_GLOBAL_DisablePostCalibration>
	}

	XMC_VADC_GLOBAL_StartupCalibration(ADC_MODULE);
 8000aac:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000ab0:	f001 f910 	bl	8001cd4 <XMC_VADC_GLOBAL_StartupCalibration>
}
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08002a18 	.word	0x08002a18
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	08002a30 	.word	0x08002a30

08000ac4 <Sensor_Temperature_ADC_InitMeasurements>:

void Sensor_Temperature_ADC_InitMeasurements(void)
{
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
	uint8_t j;
	SensorAnalogPort_t *indexed;

	/*Initialize the Global Conversion class 0*/
	XMC_VADC_GLOBAL_InputClassInit(ADC_MODULE, (XMC_VADC_GLOBAL_CLASS_t)global_iclass_config,
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <Sensor_Temperature_ADC_InitMeasurements+0xec>)
 8000acc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f001 f8d9 	bl	8001c8c <XMC_VADC_GLOBAL_InputClassInit>
									  XMC_VADC_GROUP_CONV_STD, ADC_MEASUREMENT_ICLASS_NUM);

	/* Initialize the Background Scan hardware */
	XMC_VADC_GLOBAL_BackgroundInit(ADC_MODULE, (XMC_VADC_BACKGROUND_CONFIG_t*) &backgnd_config);
 8000ada:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000ade:	4935      	ldr	r1, [pc, #212]	; (8000bb4 <Sensor_Temperature_ADC_InitMeasurements+0xf0>)
 8000ae0:	f001 f9f8 	bl	8001ed4 <XMC_VADC_GLOBAL_BackgroundInit>

	/* Initialize Channels */
	for (j = 0; j < ADC_CHANNEL_COUNT; j++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	e03e      	b.n	8000b68 <Sensor_Temperature_ADC_InitMeasurements+0xa4>
	{
		indexed = &Temperature_Sensors[j];
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4a30      	ldr	r2, [pc, #192]	; (8000bb8 <Sensor_Temperature_ADC_InitMeasurements+0xf4>)
 8000af6:	4413      	add	r3, r2
 8000af8:	603b      	str	r3, [r7, #0]

		/* Initialize for configured channels*/
		XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	7c9b      	ldrb	r3, [r3, #18]
 8000b02:	4619      	mov	r1, r3
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4610      	mov	r0, r2
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	f001 fa60 	bl	8001fd0 <XMC_VADC_GROUP_ChannelInit>

		/* Set reference voltage*/
		XMC_VADC_GROUP_ChannelSetInputReference(indexed->group_handle, (uint32_t)indexed->ch_num,
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	7c9b      	ldrb	r3, [r3, #18]
 8000b18:	4619      	mov	r1, r3
				(uint32_t)indexed->ch_handle->alternate_reference);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b24:	b2db      	uxtb	r3, r3

		/* Initialize for configured channels*/
		XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);

		/* Set reference voltage*/
		XMC_VADC_GROUP_ChannelSetInputReference(indexed->group_handle, (uint32_t)indexed->ch_num,
 8000b26:	4610      	mov	r0, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f001 fabf 	bl	80020ac <XMC_VADC_GROUP_ChannelSetInputReference>
				(uint32_t)indexed->ch_handle->alternate_reference);

		/* Initialize for configured result registers */
		XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4619      	mov	r1, r3
								  indexed->res_handle);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
		/* Set reference voltage*/
		XMC_VADC_GROUP_ChannelSetInputReference(indexed->group_handle, (uint32_t)indexed->ch_num,
				(uint32_t)indexed->ch_handle->alternate_reference);

		/* Initialize for configured result registers */
		XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 8000b44:	4610      	mov	r0, r2
 8000b46:	461a      	mov	r2, r3
 8000b48:	f7ff ff78 	bl	8000a3c <XMC_VADC_GROUP_ResultInit>
								  indexed->res_handle);

		/* Add all channels into the Background Request Source Channel Select Register */
		XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(ADC_MODULE,
													   (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	7c5b      	ldrb	r3, [r3, #17]
		/* Initialize for configured result registers */
		XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
								  indexed->res_handle);

		/* Add all channels into the Background Request Source Channel Select Register */
		XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(ADC_MODULE,
 8000b50:	461a      	mov	r2, r3
													   (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	7c9b      	ldrb	r3, [r3, #18]
		/* Initialize for configured result registers */
		XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
								  indexed->res_handle);

		/* Add all channels into the Background Request Source Channel Select Register */
		XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(ADC_MODULE,
 8000b56:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	f7ff ff51 	bl	8000a04 <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>

	/* Initialize the Background Scan hardware */
	XMC_VADC_GLOBAL_BackgroundInit(ADC_MODULE, (XMC_VADC_BACKGROUND_CONFIG_t*) &backgnd_config);

	/* Initialize Channels */
	for (j = 0; j < ADC_CHANNEL_COUNT; j++)
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	3301      	adds	r3, #1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0bd      	beq.n	8000aea <Sensor_Temperature_ADC_InitMeasurements+0x26>
													   (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);

	}

	/* Enable Interrupt */
	NVIC_SetPriority((IRQn_Type)backgnd_rs_intr_handle.node_id,
 8000b6e:	2310      	movs	r3, #16
 8000b70:	b2dc      	uxtb	r4, r3
 8000b72:	f7ff fe9d 	bl	80008b0 <NVIC_GetPriorityGrouping>
 8000b76:	4601      	mov	r1, r0
 8000b78:	223f      	movs	r2, #63	; 0x3f
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	f7ff fee5 	bl	8000950 <NVIC_EncodePriority>
 8000b86:	4602      	mov	r2, r0
 8000b88:	b263      	sxtb	r3, r4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	f7ff feb5 	bl	80008fc <NVIC_SetPriority>
						NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
						backgnd_rs_intr_handle.priority, backgnd_rs_intr_handle.sub_priority));

	/* Connect background Request Source Event to NVIC node */
	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(ADC_MODULE,
 8000b92:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000b96:	2106      	movs	r1, #6
 8000b98:	f001 f8cc 	bl	8001d34 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
												 (XMC_VADC_SR_t) XMC_VADC_SR_SHARED_SR2);

	/* Enable Background Scan Request source IRQ */
	NVIC_EnableIRQ((IRQn_Type)backgnd_rs_intr_handle.node_id);
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fe92 	bl	80008cc <NVIC_EnableIRQ>
}
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd90      	pop	{r4, r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	08002a44 	.word	0x08002a44
 8000bb4:	08002a48 	.word	0x08002a48
 8000bb8:	1ffe884c 	.word	0x1ffe884c

08000bbc <Sensor_Temperature_ADC_StartConversion>:

void Sensor_Temperature_ADC_StartConversion(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	XMC_VADC_GLOBAL_BackgroundTriggerConversion(ADC_MODULE);
 8000bc0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8000bc4:	f7ff ff0c 	bl	80009e0 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
}
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop

08000bcc <Sensor_Temperature_ADC_GetConversionResult>:

uint16_t Sensor_Temperature_ADC_GetConversionResult(SensorAnalogPort_t* sensor_handle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	return XMC_VADC_GROUP_GetResult(sensor_handle->group_handle, sensor_handle->ch_handle->result_reg_number);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	789b      	ldrb	r3, [r3, #2]
 8000bde:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	4610      	mov	r0, r2
 8000be6:	4619      	mov	r1, r3
 8000be8:	f7ff ff3a 	bl	8000a60 <XMC_VADC_GROUP_GetResult>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop

08000bf8 <Sensor_Temperature_ConvertToVoltage>:

double Sensor_Temperature_ConvertToVoltage(uint16_t adcValue)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
	return adcValue * ADC_RESOLUTION;
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fbe1 	bl	80023cc <__aeabi_i2d>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4610      	mov	r0, r2
 8000c10:	4619      	mov	r1, r3
 8000c12:	a307      	add	r3, pc, #28	; (adr r3, 8000c30 <Sensor_Temperature_ConvertToVoltage+0x38>)
 8000c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c18:	f001 fc3e 	bl	8002498 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
}
 8000c20:	4610      	mov	r0, r2
 8000c22:	4619      	mov	r1, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	97635e74 	.word	0x97635e74
 8000c34:	3f4adea8 	.word	0x3f4adea8

08000c38 <VADC0_C0_2_IRQHandler>:

void Adc_Measurement_Handler()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	SensorVoltages[TEMPERATURE_SENSOR_A] = Sensor_Temperature_ADC_GetConversionResult(SENSOR_CFG_A);
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <VADC0_C0_2_IRQHandler+0x1c>)
 8000c3e:	f7ff ffc5 	bl	8000bcc <Sensor_Temperature_ADC_GetConversionResult>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <VADC0_C0_2_IRQHandler+0x20>)
 8000c48:	801a      	strh	r2, [r3, #0]

	MeasurementRunning = 0;
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <VADC0_C0_2_IRQHandler+0x24>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
}
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	1ffe884c 	.word	0x1ffe884c
 8000c58:	1ffe8d44 	.word	0x1ffe8d44
 8000c5c:	1ffe8d46 	.word	0x1ffe8d46

08000c60 <Sensor_Temperature_Init>:
/*********************************************************************************
 * Global function definitions
 *********************************************************************************/

void Sensor_Temperature_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	Sensor_Temperature_ADC_InitGlobal();
 8000c64:	f7ff ff0e 	bl	8000a84 <Sensor_Temperature_ADC_InitGlobal>
	Sensor_Temperature_ADC_InitMeasurements();
 8000c68:	f7ff ff2c 	bl	8000ac4 <Sensor_Temperature_ADC_InitMeasurements>
}
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop

08000c70 <Sensor_Temperature_Calculate>:

int Sensor_Temperature_Calculate(Sensor_TemperatureType sensor)
{
 8000c70:	b5b0      	push	{r4, r5, r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	int i = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
	double adcVoltage = 0;
 8000c7e:	f04f 0200 	mov.w	r2, #0
 8000c82:	f04f 0300 	mov.w	r3, #0
 8000c86:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double res = 0;
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Start measurement */
	MeasurementRunning = 1;
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <Sensor_Temperature_Calculate+0xd0>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
	Sensor_Temperature_ADC_StartConversion();
 8000c9c:	f7ff ff8e 	bl	8000bbc <Sensor_Temperature_ADC_StartConversion>

	/* Wait for measurement to finish*/
	while(MeasurementRunning == 1);
 8000ca0:	bf00      	nop
 8000ca2:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <Sensor_Temperature_Calculate+0xd0>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d0fb      	beq.n	8000ca2 <Sensor_Temperature_Calculate+0x32>

	/* Calculate temperature */
	adcVoltage = Sensor_Temperature_ConvertToVoltage(SensorVoltages[sensor]);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <Sensor_Temperature_Calculate+0xd4>)
 8000cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ffa0 	bl	8000bf8 <Sensor_Temperature_ConvertToVoltage>
 8000cb8:	e9c7 0104 	strd	r0, r1, [r7, #16]
	res = (adcVoltage * R1) / (SENSOR_REF_VOLTAGE - adcVoltage);
 8000cbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000cc0:	a31d      	add	r3, pc, #116	; (adr r3, 8000d38 <Sensor_Temperature_Calculate+0xc8>)
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	f001 fbe7 	bl	8002498 <__aeabi_dmul>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	4614      	mov	r4, r2
 8000cd0:	461d      	mov	r5, r3
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	491c      	ldr	r1, [pc, #112]	; (8000d48 <Sensor_Temperature_Calculate+0xd8>)
 8000cd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000cdc:	f001 fa28 	bl	8002130 <__aeabi_dsub>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	f001 fd00 	bl	80026ec <__aeabi_ddiv>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while(TemperatureLookupTable[i++].resistence > res && i < NTC_LOOKUP_ENTRIES);
 8000cf4:	bf00      	nop
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	1c5a      	adds	r2, r3, #1
 8000cfa:	61fa      	str	r2, [r7, #28]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <Sensor_Temperature_Calculate+0xdc>)
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4413      	add	r3, r2
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fb51 	bl	80023ac <__aeabi_ui2d>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d16:	f001 fe4f 	bl	80029b8 <__aeabi_dcmpgt>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <Sensor_Temperature_Calculate+0xb6>
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	2b96      	cmp	r3, #150	; 0x96
 8000d24:	dde7      	ble.n	8000cf6 <Sensor_Temperature_Calculate+0x86>

	return TemperatureLookupTable[i].temperature;
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <Sensor_Temperature_Calculate+0xdc>)
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdb0      	pop	{r4, r5, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	40c38800 	.word	0x40c38800
 8000d40:	1ffe8d46 	.word	0x1ffe8d46
 8000d44:	1ffe8d44 	.word	0x1ffe8d44
 8000d48:	40140000 	.word	0x40140000
 8000d4c:	1ffe8860 	.word	0x1ffe8860

08000d50 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d62:	409a      	lsls	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	605a      	str	r2, [r3, #4]
}
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop

08000d74 <Motor_ClearOutputs>:
	.mode = (XMC_GPIO_MODE_t)XMC_GPIO_MODE_OUTPUT_PUSH_PULL,
	.output_level = (XMC_GPIO_OUTPUT_LEVEL_t)XMC_GPIO_OUTPUT_LEVEL_LOW,
};

void Motor_ClearOutputs()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    XMC_GPIO_SetOutputLow(MOTOR_AH);
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <Motor_ClearOutputs+0x38>)
 8000d7a:	2105      	movs	r1, #5
 8000d7c:	f7ff ffe8 	bl	8000d50 <XMC_GPIO_SetOutputLow>
    XMC_GPIO_SetOutputLow(MOTOR_AL);
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <Motor_ClearOutputs+0x38>)
 8000d82:	2102      	movs	r1, #2
 8000d84:	f7ff ffe4 	bl	8000d50 <XMC_GPIO_SetOutputLow>
    XMC_GPIO_SetOutputLow(MOTOR_BH);
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <Motor_ClearOutputs+0x38>)
 8000d8a:	2104      	movs	r1, #4
 8000d8c:	f7ff ffe0 	bl	8000d50 <XMC_GPIO_SetOutputLow>
    XMC_GPIO_SetOutputLow(MOTOR_BL);
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <Motor_ClearOutputs+0x38>)
 8000d92:	2101      	movs	r1, #1
 8000d94:	f7ff ffdc 	bl	8000d50 <XMC_GPIO_SetOutputLow>
    XMC_GPIO_SetOutputLow(MOTOR_CH);
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <Motor_ClearOutputs+0x38>)
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	f7ff ffd8 	bl	8000d50 <XMC_GPIO_SetOutputLow>
    XMC_GPIO_SetOutputLow(MOTOR_CL);
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <Motor_ClearOutputs+0x38>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	f7ff ffd4 	bl	8000d50 <XMC_GPIO_SetOutputLow>
}
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	48028000 	.word	0x48028000

08000db0 <Motor_Main>:

void Motor_Main()
{//451326
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
    Sensor_HallPattern_t pattern;
    uint8_t position;
    /* TODO: optimize to function pointers at the specified positions */
    uint8_t counterClockWisePattern[] = {1, 3, 2, 6, 4, 5, -1};
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <Motor_Main+0x78>)
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	6810      	ldr	r0, [r2, #0]
 8000dbe:	6018      	str	r0, [r3, #0]
 8000dc0:	8891      	ldrh	r1, [r2, #4]
 8000dc2:	7992      	ldrb	r2, [r2, #6]
 8000dc4:	8099      	strh	r1, [r3, #4]
 8000dc6:	719a      	strb	r2, [r3, #6]
    uint8_t clockWisePattern[] = {5, 4, 6, 2, 3, 1, -1};
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <Motor_Main+0x7c>)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	6810      	ldr	r0, [r2, #0]
 8000dce:	6018      	str	r0, [r3, #0]
 8000dd0:	8891      	ldrh	r1, [r2, #4]
 8000dd2:	7992      	ldrb	r2, [r2, #6]
 8000dd4:	8099      	strh	r1, [r3, #4]
 8000dd6:	719a      	strb	r2, [r3, #6]
    uint8_t* currentPattern = clockWisePattern;
 8000dd8:	463b      	mov	r3, r7
 8000dda:	617b      	str	r3, [r7, #20]
    if (Sensor_GetDirection() == CounterClockWise)
 8000ddc:	f7ff fc4e 	bl	800067c <Sensor_GetDirection>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d102      	bne.n	8000dec <Motor_Main+0x3c>
    {
    	currentPattern = counterClockWisePattern;
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	617b      	str	r3, [r7, #20]
    }
    if (Sensor_GetCurrentHallPattern(&pattern) == E_OK)
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fa7d 	bl	80002f0 <Sensor_GetCurrentHallPattern>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d111      	bne.n	8000e20 <Motor_Main+0x70>
    {
    	/* http://multicopter.org/wiki/PWM_Schemes */
    	position = pattern.h1 | pattern.h2 << 1 | pattern.h3 << 2;
 8000dfc:	7c3b      	ldrb	r3, [r7, #16]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	7c7b      	ldrb	r3, [r7, #17]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	7cbb      	ldrb	r3, [r7, #18]
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	74fb      	strb	r3, [r7, #19]
    	Motor_Scheme_Default(currentPattern, position);
 8000e16:	7cfb      	ldrb	r3, [r7, #19]
 8000e18:	6978      	ldr	r0, [r7, #20]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f000 f85e 	bl	8000edc <Motor_Scheme_Default>
    }
}
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08002a54 	.word	0x08002a54
 8000e2c:	08002a5c 	.word	0x08002a5c

08000e30 <Motor_Init>:

void Motor_Init()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	XMC_GPIO_Init(MOTOR_AH, &MOTOR_POSIF_0_PadConfig);
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <Motor_Init+0x58>)
 8000e36:	2105      	movs	r1, #5
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <Motor_Init+0x5c>)
 8000e3a:	f000 faff 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(MOTOR_AL, &MOTOR_POSIF_0_PadConfig);
 8000e3e:	4812      	ldr	r0, [pc, #72]	; (8000e88 <Motor_Init+0x58>)
 8000e40:	2102      	movs	r1, #2
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <Motor_Init+0x5c>)
 8000e44:	f000 fafa 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(MOTOR_BH, &MOTOR_POSIF_0_PadConfig);
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <Motor_Init+0x58>)
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <Motor_Init+0x5c>)
 8000e4e:	f000 faf5 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(MOTOR_BL, &MOTOR_POSIF_0_PadConfig);
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <Motor_Init+0x58>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <Motor_Init+0x5c>)
 8000e58:	f000 faf0 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(MOTOR_CH, &MOTOR_POSIF_0_PadConfig);
 8000e5c:	480a      	ldr	r0, [pc, #40]	; (8000e88 <Motor_Init+0x58>)
 8000e5e:	2103      	movs	r1, #3
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <Motor_Init+0x5c>)
 8000e62:	f000 faeb 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(MOTOR_CL, &MOTOR_POSIF_0_PadConfig);
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <Motor_Init+0x58>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <Motor_Init+0x5c>)
 8000e6c:	f000 fae6 	bl	800143c <XMC_GPIO_Init>
	XMC_GPIO_Init(P1_9, &MOTOR_POSIF_0_PadConfig);
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <Motor_Init+0x60>)
 8000e72:	2109      	movs	r1, #9
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <Motor_Init+0x5c>)
 8000e76:	f000 fae1 	bl	800143c <XMC_GPIO_Init>
	Motor_ClearOutputs();
 8000e7a:	f7ff ff7b 	bl	8000d74 <Motor_ClearOutputs>
    Sensor_RegisterHallCallback(&Motor_Main);
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <Motor_Init+0x64>)
 8000e80:	f7ff fa26 	bl	80002d0 <Sensor_RegisterHallCallback>
}
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	48028000 	.word	0x48028000
 8000e8c:	1ffe8d18 	.word	0x1ffe8d18
 8000e90:	48028100 	.word	0x48028100
 8000e94:	08000db1 	.word	0x08000db1

08000e98 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]
}
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	605a      	str	r2, [r3, #4]
}
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <Motor_Scheme_Default>:

/*
 * @brief H ON L PWM Scheme with only High instead of PWM
 */

void Motor_Scheme_Default(uint8_t* currentPattern, uint8_t position) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	70fb      	strb	r3, [r7, #3]
	if (position == currentPattern[0]) {
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	78fa      	ldrb	r2, [r7, #3]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d10a      	bne.n	8000f08 <Motor_Scheme_Default+0x2c>
		Motor_ClearOutputs();
 8000ef2:	f7ff ff3f 	bl	8000d74 <Motor_ClearOutputs>
		XMC_GPIO_SetOutputHigh(MOTOR_AH);
 8000ef6:	4830      	ldr	r0, [pc, #192]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000ef8:	2105      	movs	r1, #5
 8000efa:	f7ff ffcd 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
		XMC_GPIO_SetOutputHigh(MOTOR_BL);
 8000efe:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	f7ff ffc9 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
 8000f06:	e053      	b.n	8000fb0 <Motor_Scheme_Default+0xd4>
	} else if (position == currentPattern[1]) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	78fa      	ldrb	r2, [r7, #3]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d10a      	bne.n	8000f2a <Motor_Scheme_Default+0x4e>
		Motor_ClearOutputs();
 8000f14:	f7ff ff2e 	bl	8000d74 <Motor_ClearOutputs>
		XMC_GPIO_SetOutputLow(MOTOR_AH);
 8000f18:	4827      	ldr	r0, [pc, #156]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f1a:	2105      	movs	r1, #5
 8000f1c:	f7ff ffcc 	bl	8000eb8 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputHigh(MOTOR_CH);
 8000f20:	4825      	ldr	r0, [pc, #148]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f22:	2103      	movs	r1, #3
 8000f24:	f7ff ffb8 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
 8000f28:	e042      	b.n	8000fb0 <Motor_Scheme_Default+0xd4>
	} else if (position == currentPattern[2]) {
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d10a      	bne.n	8000f4c <Motor_Scheme_Default+0x70>
		Motor_ClearOutputs();
 8000f36:	f7ff ff1d 	bl	8000d74 <Motor_ClearOutputs>
		XMC_GPIO_SetOutputLow(MOTOR_BL);
 8000f3a:	481f      	ldr	r0, [pc, #124]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	f7ff ffbb 	bl	8000eb8 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputHigh(MOTOR_AL);
 8000f42:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f44:	2102      	movs	r1, #2
 8000f46:	f7ff ffa7 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
 8000f4a:	e031      	b.n	8000fb0 <Motor_Scheme_Default+0xd4>
	} else if (position == currentPattern[3]) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3303      	adds	r3, #3
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	78fa      	ldrb	r2, [r7, #3]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d10a      	bne.n	8000f6e <Motor_Scheme_Default+0x92>
		Motor_ClearOutputs();
 8000f58:	f7ff ff0c 	bl	8000d74 <Motor_ClearOutputs>
		XMC_GPIO_SetOutputLow(MOTOR_CH);
 8000f5c:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f5e:	2103      	movs	r1, #3
 8000f60:	f7ff ffaa 	bl	8000eb8 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputHigh(MOTOR_BH);
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f66:	2104      	movs	r1, #4
 8000f68:	f7ff ff96 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
 8000f6c:	e020      	b.n	8000fb0 <Motor_Scheme_Default+0xd4>
	} else if (position == currentPattern[4]) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3304      	adds	r3, #4
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d10a      	bne.n	8000f90 <Motor_Scheme_Default+0xb4>
		Motor_ClearOutputs();
 8000f7a:	f7ff fefb 	bl	8000d74 <Motor_ClearOutputs>
		XMC_GPIO_SetOutputLow(MOTOR_AL);
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f80:	2102      	movs	r1, #2
 8000f82:	f7ff ff99 	bl	8000eb8 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputHigh(MOTOR_CL);
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f7ff ff85 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
 8000f8e:	e00f      	b.n	8000fb0 <Motor_Scheme_Default+0xd4>
	} else if (position == currentPattern[5]) {
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3305      	adds	r3, #5
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d109      	bne.n	8000fb0 <Motor_Scheme_Default+0xd4>
		Motor_ClearOutputs();
 8000f9c:	f7ff feea 	bl	8000d74 <Motor_ClearOutputs>
		XMC_GPIO_SetOutputLow(MOTOR_BH);
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000fa2:	2104      	movs	r1, #4
 8000fa4:	f7ff ff88 	bl	8000eb8 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputHigh(MOTOR_AH);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <Motor_Scheme_Default+0xdc>)
 8000faa:	2105      	movs	r1, #5
 8000fac:	f7ff ff74 	bl	8000e98 <XMC_GPIO_SetOutputHigh>
	} else {
		//TODO error handling
	}
}
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	48028000 	.word	0x48028000

08000fbc <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e003      	b.n	8000fd2 <delay+0x16>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000fca:	bf00      	nop
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d3f7      	bcc.n	8000fca <delay+0xe>
  {
    __NOP();
  }
}
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000fe4:	b598      	push	{r3, r4, r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x1c>)
 8000fea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fee:	4614      	mov	r4, r2
 8000ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000ff6:	f000 f805 	bl	8001004 <SystemCoreSetup>
  SystemCoreClockSetup();
 8000ffa:	f000 f83b 	bl	8001074 <SystemCoreClockSetup>
}
 8000ffe:	bd98      	pop	{r3, r4, r7, pc}
 8001000:	2003ffc4 	.word	0x2003ffc4

08001004 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100a:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <SystemCoreSetup+0x64>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <SystemCoreSetup+0x68>)
 8001010:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001012:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001016:	b662      	cpsie	i
  __DSB();
  __enable_irq();

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <SystemCoreSetup+0x64>)
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <SystemCoreSetup+0x64>)
 800101c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <SystemCoreSetup+0x64>)
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <SystemCoreSetup+0x64>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f023 0308 	bic.w	r3, r3, #8
 8001032:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <SystemCoreSetup+0x6c>)
 8001036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103a:	3314      	adds	r3, #20
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f023 030f 	bic.w	r3, r3, #15
 8001046:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <SystemCoreSetup+0x6c>)
 8001052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001056:	3314      	adds	r3, #20
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	08000000 	.word	0x08000000
 8001070:	58001000 	.word	0x58001000

08001074 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001078:	4ba4      	ldr	r3, [pc, #656]	; (800130c <SystemCoreClockSetup+0x298>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10c      	bne.n	800109e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8001084:	4aa1      	ldr	r2, [pc, #644]	; (800130c <SystemCoreClockSetup+0x298>)
 8001086:	4ba1      	ldr	r3, [pc, #644]	; (800130c <SystemCoreClockSetup+0x298>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8001090:	bf00      	nop
 8001092:	4b9e      	ldr	r3, [pc, #632]	; (800130c <SystemCoreClockSetup+0x298>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f9      	beq.n	8001092 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800109e:	4b9c      	ldr	r3, [pc, #624]	; (8001310 <SystemCoreClockSetup+0x29c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80010aa:	4a99      	ldr	r2, [pc, #612]	; (8001310 <SystemCoreClockSetup+0x29c>)
 80010ac:	4b98      	ldr	r3, [pc, #608]	; (8001310 <SystemCoreClockSetup+0x29c>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b4:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80010b6:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80010ba:	f7ff ff7f 	bl	8000fbc <delay>
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80010be:	4a95      	ldr	r2, [pc, #596]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80010c0:	4b94      	ldr	r3, [pc, #592]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010c8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80010ca:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80010ce:	f7ff ff75 	bl	8000fbc <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80010d2:	4a90      	ldr	r2, [pc, #576]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80010d4:	4b8f      	ldr	r3, [pc, #572]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010dc:	f023 0302 	bic.w	r3, r3, #2
 80010e0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80010e2:	4b8d      	ldr	r3, [pc, #564]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d029      	beq.n	8001142 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80010ee:	4a8a      	ldr	r2, [pc, #552]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 80010f0:	4b89      	ldr	r3, [pc, #548]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80010f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80010fc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80010fe:	f000 f993 	bl	8001428 <OSCHP_GetFrequency>
 8001102:	4602      	mov	r2, r0
 8001104:	4b85      	ldr	r3, [pc, #532]	; (800131c <SystemCoreClockSetup+0x2a8>)
 8001106:	fba3 2302 	umull	r2, r3, r3, r2
 800110a:	0d1b      	lsrs	r3, r3, #20
 800110c:	3b01      	subs	r3, #1
 800110e:	041b      	lsls	r3, r3, #16
 8001110:	4981      	ldr	r1, [pc, #516]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001112:	4a81      	ldr	r2, [pc, #516]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001114:	6852      	ldr	r2, [r2, #4]
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800111a:	4a7e      	ldr	r2, [pc, #504]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800111c:	4b7d      	ldr	r3, [pc, #500]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8001126:	4a7b      	ldr	r2, [pc, #492]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001128:	4b7a      	ldr	r3, [pc, #488]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001130:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8001132:	bf00      	nop
 8001134:	4b77      	ldr	r3, [pc, #476]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800113c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8001140:	d1f8      	bne.n	8001134 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001142:	4a74      	ldr	r2, [pc, #464]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001144:	4b73      	ldr	r3, [pc, #460]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800114e:	4a71      	ldr	r2, [pc, #452]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001150:	4b70      	ldr	r3, [pc, #448]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800115c:	4a70      	ldr	r2, [pc, #448]	; (8001320 <SystemCoreClockSetup+0x2ac>)
 800115e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_24MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001160:	4a6c      	ldr	r2, [pc, #432]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001162:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800116c:	4a69      	ldr	r2, [pc, #420]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800116e:	4b69      	ldr	r3, [pc, #420]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f023 0310 	bic.w	r3, r3, #16
 8001176:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8001178:	4a66      	ldr	r2, [pc, #408]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001184:	bf00      	nop
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock at 24MHz*/
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001192:	4a60      	ldr	r2, [pc, #384]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001194:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800119e:	bf00      	nop
 80011a0:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f9      	bne.n	80011a0 <SystemCoreClockSetup+0x12c>
  }

#endif /* ENABLE_PLL */

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->SYSCLKCR = __SYSCLKCR;
 80011ac:	4b5d      	ldr	r3, [pc, #372]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011ae:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80011b2:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = __PBCLKCR;
 80011b4:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = __CPUCLKCR;
 80011ba:	4b5a      	ldr	r3, [pc, #360]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = __CCUCLKCR;
 80011c0:	4b58      	ldr	r3, [pc, #352]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = __WDTCLKCR;
 80011c6:	4b57      	ldr	r3, [pc, #348]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = __EBUCLKCR;
 80011cc:	4b55      	ldr	r3, [pc, #340]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011ce:	2203      	movs	r2, #3
 80011d0:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = __USBCLKCR;
 80011d2:	4b54      	ldr	r3, [pc, #336]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011d4:	4a54      	ldr	r2, [pc, #336]	; (8001328 <SystemCoreClockSetup+0x2b4>)
 80011d6:	619a      	str	r2, [r3, #24]
  SCU_CLK->ECATCLKCR = __ECATCLKCR;
 80011d8:	4b52      	ldr	r3, [pc, #328]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011da:	2201      	movs	r2, #1
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
  SCU_CLK->EXTCLKCR = __EXTCLKCR;
 80011de:	4b51      	ldr	r3, [pc, #324]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 80011e0:	4a52      	ldr	r2, [pc, #328]	; (800132c <SystemCoreClockSetup+0x2b8>)
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80011e4:	4a4b      	ldr	r2, [pc, #300]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ee:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80011f2:	4a4f      	ldr	r2, [pc, #316]	; (8001330 <SystemCoreClockSetup+0x2bc>)
 80011f4:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_48MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_48MHZ);
 80011f6:	f44f 6016 	mov.w	r0, #2400	; 0x960
 80011fa:	f7ff fedf 	bl	8000fbc <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80011fe:	4b45      	ldr	r3, [pc, #276]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001200:	4a4c      	ldr	r2, [pc, #304]	; (8001334 <SystemCoreClockSetup+0x2c0>)
 8001202:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_72MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_72MHZ);
 8001204:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8001208:	f7ff fed8 	bl	8000fbc <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800120c:	4b41      	ldr	r3, [pc, #260]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800120e:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <SystemCoreClockSetup+0x2c4>)
 8001210:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_96MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_96MHZ);
 8001212:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 8001216:	f7ff fed1 	bl	8000fbc <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800121c:	4a47      	ldr	r2, [pc, #284]	; (800133c <SystemCoreClockSetup+0x2c8>)
 800121e:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV_120MHZ << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_120MHZ);
 8001220:	f241 7070 	movw	r0, #6000	; 0x1770
 8001224:	f7ff feca 	bl	8000fbc <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800122a:	4a45      	ldr	r2, [pc, #276]	; (8001340 <SystemCoreClockSetup+0x2cc>)
 800122c:	609a      	str	r2, [r3, #8]
	                  (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                  (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  delay(DELAY_CNT_50US_144MHZ);
 800122e:	f44f 50e1 	mov.w	r0, #7200	; 0x1c20
 8001232:	f7ff fec3 	bl	8000fbc <delay>

#endif /* ENABLE_PLL */

#if ENABLE_USBPLL
  /* enable USB PLL first */
  SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8001236:	4a37      	ldr	r2, [pc, #220]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001238:	4b36      	ldr	r3, [pc, #216]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001240:	f023 0302 	bic.w	r3, r3, #2
 8001244:	6153      	str	r3, [r2, #20]

  /* USB PLL uses as clock input the OSC_HP */
  /* check and if not already running enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800124e:	2b00      	cmp	r3, #0
 8001250:	d031      	beq.n	80012b6 <SystemCoreClockSetup+0x242>
  {
    /* check if Main PLL is switched on for OSC WDG*/
    if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 8001252:	4b30      	ldr	r3, [pc, #192]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <SystemCoreClockSetup+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <SystemCoreClockSetup+0x1fa>
    {
      /* enable PLL first */
      SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800125e:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001260:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001268:	f023 0302 	bic.w	r3, r3, #2
 800126c:	6053      	str	r3, [r2, #4]
    }

    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800126e:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001278:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800127c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800127e:	f000 f8d3 	bl	8001428 <OSCHP_GetFrequency>
 8001282:	4602      	mov	r2, r0
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemCoreClockSetup+0x2a8>)
 8001286:	fba3 2302 	umull	r2, r3, r3, r2
 800128a:	0d1b      	lsrs	r3, r3, #20
 800128c:	3b01      	subs	r3, #1
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	4921      	ldr	r1, [pc, #132]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001292:	4a21      	ldr	r2, [pc, #132]	; (8001318 <SystemCoreClockSetup+0x2a4>)
 8001294:	6852      	ldr	r2, [r2, #4]
 8001296:	4313      	orrs	r3, r2
 8001298:	604b      	str	r3, [r1, #4]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012a4:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 80012a6:	bf00      	nop
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80012b0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80012b4:	d1f8      	bne.n	80012a8 <SystemCoreClockSetup+0x234>
    }
  }

  /* Setup USB PLL */
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80012b6:	4a17      	ldr	r2, [pc, #92]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 80012c2:	4a14      	ldr	r2, [pc, #80]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <SystemCoreClockSetup+0x2d4>)
 80012d2:	615a      	str	r2, [r3, #20]
                        (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80012d4:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012de:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f023 0310 	bic.w	r3, r3, #16
 80012ea:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012f6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80012f8:	bf00      	nop
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <SystemCoreClockSetup+0x2a0>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f9      	beq.n	80012fa <SystemCoreClockSetup+0x286>
    /* wait for PLL Lock */
  }
#endif

  /* Enable selected clocks */
  SCU_CLK->CLKSET = __CLKSET;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <SystemCoreClockSetup+0x2b0>)
 8001308:	2200      	movs	r2, #0
 800130a:	e01f      	b.n	800134c <SystemCoreClockSetup+0x2d8>
 800130c:	50004200 	.word	0x50004200
 8001310:	50004400 	.word	0x50004400
 8001314:	50004710 	.word	0x50004710
 8001318:	50004700 	.word	0x50004700
 800131c:	6b5fca6b 	.word	0x6b5fca6b
 8001320:	010b2f00 	.word	0x010b2f00
 8001324:	50004600 	.word	0x50004600
 8001328:	00010005 	.word	0x00010005
 800132c:	01200003 	.word	0x01200003
 8001330:	01052f00 	.word	0x01052f00
 8001334:	01032f00 	.word	0x01032f00
 8001338:	01022f00 	.word	0x01022f00
 800133c:	01012f00 	.word	0x01012f00
 8001340:	01002f00 	.word	0x01002f00
 8001344:	00010002 	.word	0x00010002
 8001348:	02006300 	.word	0x02006300
 800134c:	605a      	str	r2, [r3, #4]
  PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif
#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800134e:	f000 f801 	bl	8001354 <SystemCoreClockUpdate>
}
 8001352:	bd80      	pop	{r7, pc}

08001354 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800135a:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <SystemCoreClockUpdate+0xc4>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03e      	beq.n	80013e4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <SystemCoreClockUpdate+0xc8>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <SystemCoreClockUpdate+0xcc>)
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	e002      	b.n	800137e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001378:	f000 f856 	bl	8001428 <OSCHP_GetFrequency>
 800137c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <SystemCoreClockUpdate+0xc8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b00      	cmp	r3, #0
 8001388:	d020      	beq.n	80013cc <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <SystemCoreClockUpdate+0xc8>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001392:	0e1b      	lsrs	r3, r3, #24
 8001394:	3301      	adds	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <SystemCoreClockUpdate+0xc8>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	3301      	adds	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <SystemCoreClockUpdate+0xc8>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	3301      	adds	r3, #1
 80013b2:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	fb02 f303 	mul.w	r3, r2, r3
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	e00d      	b.n	80013e8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <SystemCoreClockUpdate+0xc8>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d4:	3301      	adds	r3, #1
 80013d6:	603b      	str	r3, [r7, #0]

      temp = (temp / kdiv);
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	e001      	b.n	80013e8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */
    temp = OFI_FREQUENCY;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <SystemCoreClockUpdate+0xcc>)
 80013e6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <SystemCoreClockUpdate+0xc4>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <SystemCoreClockUpdate+0xc4>)
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	3301      	adds	r3, #1
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <SystemCoreClockUpdate+0xd0>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	50004600 	.word	0x50004600
 800141c:	50004710 	.word	0x50004710
 8001420:	016e3600 	.word	0x016e3600
 8001424:	2003ffc0 	.word	0x2003ffc0

08001428 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 800142c:	4b02      	ldr	r3, [pc, #8]	; (8001438 <OSCHP_GetFrequency+0x10>)
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	00b71b00 	.word	0x00b71b00

0800143c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	460b      	mov	r3, r1
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800144a:	7afb      	ldrb	r3, [r7, #11]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	7afb      	ldrb	r3, [r7, #11]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3204      	adds	r2, #4
 800145e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	4619      	mov	r1, r3
 800146c:	23f8      	movs	r3, #248	; 0xf8
 800146e:	408b      	lsls	r3, r1
 8001470:	43db      	mvns	r3, r3
 8001472:	ea02 0103 	and.w	r1, r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1d02      	adds	r2, r0, #4
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001482:	7afb      	ldrb	r3, [r7, #11]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4619      	mov	r1, r3
 8001488:	2303      	movs	r3, #3
 800148a:	408b      	lsls	r3, r1
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a37      	ldr	r2, [pc, #220]	; (8001574 <XMC_GPIO_Init+0x138>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d003      	beq.n	80014a4 <XMC_GPIO_Init+0x68>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a36      	ldr	r2, [pc, #216]	; (8001578 <XMC_GPIO_Init+0x13c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d10a      	bne.n	80014ba <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a8:	7afb      	ldrb	r3, [r7, #11]
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	661a      	str	r2, [r3, #96]	; 0x60
 80014b8:	e03c      	b.n	8001534 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	7afb      	ldrb	r3, [r7, #11]
 80014c0:	409a      	lsls	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80014c6:	7afb      	ldrb	r3, [r7, #11]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3210      	adds	r2, #16
 80014da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4619      	mov	r1, r3
 80014e8:	2307      	movs	r3, #7
 80014ea:	408b      	lsls	r3, r1
 80014ec:	43db      	mvns	r3, r3
 80014ee:	ea02 0103 	and.w	r1, r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f100 0210 	add.w	r2, r0, #16
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4618      	mov	r0, r3
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	3210      	adds	r2, #16
 8001510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	4619      	mov	r1, r3
 800151a:	7afb      	ldrb	r3, [r7, #11]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	ea42 0103 	orr.w	r1, r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f100 0210 	add.w	r2, r0, #16
 8001530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	7afb      	ldrb	r3, [r7, #11]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	3204      	adds	r2, #4
 8001548:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	ea42 0103 	orr.w	r1, r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1d02      	adds	r2, r0, #4
 8001566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	48028e00 	.word	0x48028e00
 8001578:	48028f00 	.word	0x48028f00

0800157c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0f1b      	lsrs	r3, r3, #28
 8001588:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001590:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	461a      	mov	r2, r3
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80015a0:	4413      	add	r3, r2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	601a      	str	r2, [r3, #0]
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	50004414 	.word	0x50004414

080015b4 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	6053      	str	r3, [r2, #4]
}
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	50004600 	.word	0x50004600

080015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0f1b      	lsrs	r3, r3, #28
 80015e0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80015e8:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b04      	ldr	r3, [pc, #16]	; (8001608 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80015f8:	4413      	add	r3, r2
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	601a      	str	r2, [r3, #0]
}
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	50004648 	.word	0x50004648

0800160c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]
}
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop

0800162c <XMC_CCU4_lDeassertReset>:

  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <XMC_CCU4_lDeassertReset+0x54>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d011      	beq.n	8001660 <XMC_CCU4_lDeassertReset+0x34>
 800163c:	4a10      	ldr	r2, [pc, #64]	; (8001680 <XMC_CCU4_lDeassertReset+0x54>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d803      	bhi.n	800164a <XMC_CCU4_lDeassertReset+0x1e>
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <XMC_CCU4_lDeassertReset+0x58>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <XMC_CCU4_lDeassertReset+0x2c>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8001648:	e016      	b.n	8001678 <XMC_CCU4_lDeassertReset+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <XMC_CCU4_lDeassertReset+0x5c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00b      	beq.n	8001668 <XMC_CCU4_lDeassertReset+0x3c>
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <XMC_CCU4_lDeassertReset+0x60>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d00c      	beq.n	8001670 <XMC_CCU4_lDeassertReset+0x44>
      break;
#endif

    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   
 8001656:	e00f      	b.n	8001678 <XMC_CCU4_lDeassertReset+0x4c>
__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001658:	2004      	movs	r0, #4
 800165a:	f7ff ff8f 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 800165e:	e00b      	b.n	8001678 <XMC_CCU4_lDeassertReset+0x4c>
      
#if defined(CCU41)
    case (uint32_t)CCU41:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001660:	2008      	movs	r0, #8
 8001662:	f7ff ff8b 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8001666:	e007      	b.n	8001678 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU42)
    case (uint32_t)CCU42:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8001668:	2010      	movs	r0, #16
 800166a:	f7ff ff87 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 800166e:	e003      	b.n	8001678 <XMC_CCU4_lDeassertReset+0x4c>
#endif

#if defined(CCU43)
    case (uint32_t)CCU43:
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8001670:	4807      	ldr	r0, [pc, #28]	; (8001690 <XMC_CCU4_lDeassertReset+0x64>)
 8001672:	f7ff ff83 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
      break;
 8001676:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
      break;   

  }
}
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40010000 	.word	0x40010000
 8001684:	4000c000 	.word	0x4000c000
 8001688:	40014000 	.word	0x40014000
 800168c:	48004000 	.word	0x48004000
 8001690:	10000001 	.word	0x10000001

08001694 <XMC_CCU4_lUngateClock>:

  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  switch ((uint32_t)module)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <XMC_CCU4_lUngateClock+0x54>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d011      	beq.n	80016c8 <XMC_CCU4_lUngateClock+0x34>
 80016a4:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <XMC_CCU4_lUngateClock+0x54>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d803      	bhi.n	80016b2 <XMC_CCU4_lUngateClock+0x1e>
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <XMC_CCU4_lUngateClock+0x58>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d007      	beq.n	80016c0 <XMC_CCU4_lUngateClock+0x2c>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 80016b0:	e016      	b.n	80016e0 <XMC_CCU4_lUngateClock+0x4c>
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <XMC_CCU4_lUngateClock+0x5c>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00b      	beq.n	80016d0 <XMC_CCU4_lUngateClock+0x3c>
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <XMC_CCU4_lUngateClock+0x60>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00c      	beq.n	80016d8 <XMC_CCU4_lUngateClock+0x44>
      break;
#endif  

    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
 80016be:	e00f      	b.n	80016e0 <XMC_CCU4_lUngateClock+0x4c>
__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80016c0:	2004      	movs	r0, #4
 80016c2:	f7ff ff87 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80016c6:	e00b      	b.n	80016e0 <XMC_CCU4_lUngateClock+0x4c>
      
#if defined(CCU41)      
    case (uint32_t)CCU41:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80016c8:	2008      	movs	r0, #8
 80016ca:	f7ff ff83 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80016ce:	e007      	b.n	80016e0 <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU42)      
    case (uint32_t)CCU42:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80016d0:	2010      	movs	r0, #16
 80016d2:	f7ff ff7f 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80016d6:	e003      	b.n	80016e0 <XMC_CCU4_lUngateClock+0x4c>
#endif

#if defined(CCU43)      
    case (uint32_t)CCU43:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <XMC_CCU4_lUngateClock+0x64>)
 80016da:	f7ff ff7b 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
      break;
 80016de:	bf00      	nop
    default:
      XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
      break;   
    
  }
}
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40010000 	.word	0x40010000
 80016ec:	4000c000 	.word	0x4000c000
 80016f0:	40014000 	.word	0x40014000
 80016f4:	48004000 	.word	0x48004000
 80016f8:	10000001 	.word	0x10000001

080016fc <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001704:	2010      	movs	r0, #16
 8001706:	f7ff ff55 	bl	80015b4 <XMC_SCU_CLOCK_EnableClock>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ffc2 	bl	8001694 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff8b 	bl	800162c <XMC_CCU4_lDeassertReset>
#endif
}
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ffe7 	bl	80016fc <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff6c 	bl	800160c <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001740:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	039b      	lsls	r3, r3, #14
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001770:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	795b      	ldrb	r3, [r3, #5]
 80017a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	051a      	lsls	r2, r3, #20
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	791b      	ldrb	r3, [r3, #4]
 80017b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	795b      	ldrb	r3, [r3, #5]
 80017d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	795b      	ldrb	r3, [r3, #5]
 800180e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	051a      	lsls	r2, r3, #20
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	791b      	ldrb	r3, [r3, #4]
 800181e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001822:	b2db      	uxtb	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	791b      	ldrb	r3, [r3, #4]
 800182e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
		                        const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
 8001850:	4613      	mov	r3, r2
 8001852:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
		          (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	4313      	orrs	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8001876:	78bb      	ldrb	r3, [r7, #2]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d104      	bne.n	8001886 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	e003      	b.n	800188e <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	615a      	str	r2, [r3, #20]
}
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <XMC_CCU4_SLICE_Capture0Config>:
  slice->CMC = cmc;
}

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018b8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	605a      	str	r2, [r3, #4]
}
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	; 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	460b      	mov	r3, r1
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80018e2:	7afb      	ldrb	r3, [r7, #11]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	3310      	adds	r3, #16
 80018f6:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	461a      	mov	r2, r3
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 800191a:	7ffb      	ldrb	r3, [r7, #31]
 800191c:	3316      	adds	r3, #22
 800191e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	2201      	movs	r2, #1
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	789b      	ldrb	r3, [r3, #2]
 8001934:	461a      	mov	r2, r3
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3319      	adds	r3, #25
 800194a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	78db      	ldrb	r3, [r3, #3]
 8001960:	461a      	mov	r2, r3
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 800196e:	7ffb      	ldrb	r3, [r7, #31]
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]
#endif
}
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <XMC_CCU4_SLICE_GetCaptureRegisterValue>:
  }
}

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	331c      	adds	r3, #28
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	685b      	ldr	r3, [r3, #4]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
 80019d8:	4613      	mov	r3, r2
 80019da:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3204      	adds	r2, #4
 80019f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4619      	mov	r1, r3
 80019fe:	23f8      	movs	r3, #248	; 0xf8
 8001a00:	408b      	lsls	r3, r1
 8001a02:	43db      	mvns	r3, r3
 8001a04:	ea02 0103 	and.w	r1, r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1d02      	adds	r2, r0, #4
 8001a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3204      	adds	r2, #4
 8001a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a28:	78bb      	ldrb	r3, [r7, #2]
 8001a2a:	78f9      	ldrb	r1, [r7, #3]
 8001a2c:	f001 0103 	and.w	r1, r1, #3
 8001a30:	00c9      	lsls	r1, r1, #3
 8001a32:	408b      	lsls	r3, r1
 8001a34:	ea42 0103 	orr.w	r1, r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	1d02      	adds	r2, r0, #4
 8001a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <XMC_POSIF_Stop>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_POSIF_Start(),XMC_POSIF_IsRunning() \n\n\n
 */
__STATIC_INLINE void XMC_POSIF_Stop(XMC_POSIF_t *const peripheral)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  peripheral->PRUNC = (uint32_t)(POSIF_PRUNC_CRB_Msk | POSIF_PRUNC_CSM_Msk);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2203      	movs	r2, #3
 8001a58:	60da      	str	r2, [r3, #12]
}
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <XMC_POSIF_Enable>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to enable the POSIF module */
void XMC_POSIF_Enable(XMC_POSIF_t *const peripheral)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
#if UC_FAMILY == XMC4
   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8001a6c:	2010      	movs	r0, #16
 8001a6e:	f7ff fda1 	bl	80015b4 <XMC_SCU_CLOCK_EnableClock>
#endif

  switch ((uint32_t)peripheral)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <XMC_POSIF_Enable+0x48>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d003      	beq.n	8001a82 <XMC_POSIF_Enable+0x1e>
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <XMC_POSIF_Enable+0x4c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <XMC_POSIF_Enable+0x30>
      break;
#endif

    default:
      XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
      break;      
 8001a80:	e011      	b.n	8001aa6 <XMC_POSIF_Enable+0x42>

  switch ((uint32_t)peripheral)
  {
    case (uint32_t)POSIF0:
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF0);
 8001a82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a86:	f7ff fda5 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF0);
 8001a8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a8e:	f7ff fd75 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
      break;
 8001a92:	e008      	b.n	8001aa6 <XMC_POSIF_Enable+0x42>
      
#if defined(POSIF1)
    case (uint32_t)POSIF1:
#if defined(CLOCK_GATING_SUPPORTED)
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_POSIF1);
 8001a94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a98:	f7ff fd9c 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
      XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_POSIF1);
 8001a9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aa0:	f7ff fd6c 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
      break;
 8001aa4:	bf00      	nop

    default:
      XMC_ASSERT("XMC_POSIF_Disable:Invalid module pointer", 0);
      break;      
  }
}
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40028000 	.word	0x40028000
 8001ab0:	4002c000 	.word	0x4002c000

08001ab4 <XMC_POSIF_Init>:
  }
}

/* API to initialize POSIF global resources */
void XMC_POSIF_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_CONFIG_t *const config)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_POSIF_Init:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_Init:NULL Pointer", (config != (XMC_POSIF_CONFIG_t *)NULL) );

  /* Enable the POSIF module */
  XMC_POSIF_Enable(peripheral);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffd0 	bl	8001a64 <XMC_POSIF_Enable>

  /* Stop POSIF */
  XMC_POSIF_Stop(peripheral);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffc1 	bl	8001a4c <XMC_POSIF_Stop>

  /* Program the operational mode, input selectors and debounce filter */
  peripheral->PCONF = config->pconf;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
}
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <XMC_POSIF_HSC_Init>:

/* API to initialize hall sensor interface */
XMC_POSIF_STATUS_t XMC_POSIF_HSC_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_HSC_CONFIG_t * const config)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  XMC_POSIF_STATUS_t retval;
  
  XMC_ASSERT("XMC_POSIF_HSC_Init:Invalid module pointer\n", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_HSC_Init:NULL Pointer\n", (config != (XMC_POSIF_HSC_CONFIG_t *)NULL) );

  if (XMC_POSIF_MODE_HALL_SENSOR == (XMC_POSIF_MODE_t)((peripheral->PCONF) & (uint32_t)POSIF_PCONF_FSEL_Msk) )
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <XMC_POSIF_HSC_Init+0x2c>
  {
    peripheral->PCONF |= config->hall_config;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	601a      	str	r2, [r3, #0]
    retval = XMC_POSIF_STATUS_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e001      	b.n	8001b08 <XMC_POSIF_HSC_Init+0x30>
  }
  else
  {
    retval = XMC_POSIF_STATUS_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
  }
  return retval;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <XMC_POSIF_SetInterruptNode>:
  peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)XMC_POSIF_PCONF_INSEL_Msk) | reg);
}

/* API to select an interrupt node */
void XMC_POSIF_SetInterruptNode(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_t event, const XMC_POSIF_SR_ID_t sr)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
 8001b24:	4613      	mov	r3, r2
 8001b26:	70bb      	strb	r3, [r7, #2]
  
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Invalid module pointer", XMC_POSIF_IsPeripheralValid(peripheral));
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Wrong IRQ event", (event <= XMC_POSIF_IRQ_EVENT_PCLK) );
  XMC_ASSERT("XMC_POSIF_SetInterruptNode:Wrong SR ID", (sr <= XMC_POSIF_SR_ID_1) );
  
  reg = peripheral->PFLGE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2c:	60fb      	str	r3, [r7, #12]
  reg &= ~((uint32_t)1 << ((uint32_t)event + (uint32_t)POSIF_PFLGE_CHESEL_Pos));
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	3310      	adds	r3, #16
 8001b32:	461a      	mov	r2, r3
 8001b34:	2301      	movs	r3, #1
 8001b36:	4093      	lsls	r3, r2
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t)sr << ((uint32_t)event + (uint32_t)POSIF_PFLGE_CHESEL_Pos);
 8001b40:	78bb      	ldrb	r3, [r7, #2]
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	3210      	adds	r2, #16
 8001b46:	4093      	lsls	r3, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  peripheral->PFLGE = reg;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001b6a:	783b      	ldrb	r3, [r7, #0]
 8001b6c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001b74:	887b      	ldrh	r3, [r7, #2]
 8001b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001b9e:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	079b      	lsls	r3, r3, #30
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop

08001c00 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop

08001c24 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff fcd3 	bl	80015d4 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff fca4 	bl	800157c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop

08001c38 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001c42:	f7ff ffef 	bl	8001c24 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f240 731f 	movw	r3, #1823	; 0x71f
 8001ca8:	4013      	ands	r3, r2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	3128      	adds	r1, #40	; 0x28
 8001cb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8001cb4:	e007      	b.n	8001cc6 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	6839      	ldr	r1, [r7, #0]
 8001cc0:	3128      	adds	r1, #40	; 0x28
 8001cc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	071f0000 	.word	0x071f0000

08001cd4 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ce2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e016      	b.n	8001d20 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8001d0a:	bf00      	nop
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f8      	bne.n	8001d0c <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d9e5      	bls.n	8001cf2 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	08002a64 	.word	0x08002a64

08001d34 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d903      	bls.n	8001d4e <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	3b04      	subs	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e001      	b.n	8001d52 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d58:	f023 020f 	bic.w	r2, r3, #15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f000 f828 	bl	8001de4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f000 f821 	bl	8001de4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	6899      	ldr	r1, [r3, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 f81a 	bl	8001de4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	6899      	ldr	r1, [r3, #8]
 8001db6:	2201      	movs	r2, #1
 8001db8:	2301      	movs	r3, #1
 8001dba:	f000 f813 	bl	8001de4 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	f7ff fec2 	bl	8001b60 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop

08001de4 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b08d      	sub	sp, #52	; 0x34
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d113      	bne.n	8001e22 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 8001dfe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8001e08:	231f      	movs	r3, #31
 8001e0a:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8001e0c:	7a3b      	ldrb	r3, [r7, #8]
 8001e0e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001e16:	7a7b      	ldrb	r3, [r7, #9]
 8001e18:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	76fb      	strb	r3, [r7, #27]
 8001e20:	e013      	b.n	8001e4a <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 8001e22:	2318      	movs	r3, #24
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001e26:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 8001e30:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001e34:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001e36:	7abb      	ldrb	r3, [r7, #10]
 8001e38:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8001e40:	7afb      	ldrb	r3, [r7, #11]
 8001e42:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	3228      	adds	r2, #40	; 0x28
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8001e60:	7efa      	ldrb	r2, [r7, #27]
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4013      	ands	r3, r2
 8001e76:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7a:	69fa      	ldr	r2, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	3228      	adds	r2, #40	; 0x28
 8001e8c:	6979      	ldr	r1, [r7, #20]
 8001e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e92:	3734      	adds	r7, #52	; 0x34
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eae:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
 8001ee2:	e009      	b.n	8001ef8 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe87 	bl	8001c00 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	75fb      	strb	r3, [r7, #23]
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d9f2      	bls.n	8001ee4 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 8001f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f14:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
 8001f1a:	e021      	b.n	8001f60 <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f28:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d9da      	bls.n	8001f1c <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f043 0201 	orr.w	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d107      	bne.n	8001fa4 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	75fb      	strb	r3, [r7, #23]
 8001fa8:	e009      	b.n	8001fbe <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fe12 	bl	8001bdc <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	75fb      	strb	r3, [r7, #23]
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d9f2      	bls.n	8001faa <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	08002a64 	.word	0x08002a64

08001fd0 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7b1b      	ldrb	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe8:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2201      	movs	r2, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b5b      	ldrb	r3, [r3, #13]
 8002014:	b25b      	sxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	db29      	blt.n	800206e <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d10a      	bne.n	800203a <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8002024:	2308      	movs	r3, #8
 8002026:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800202e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002038:	e00c      	b.n	8002054 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800204a:	f023 021f 	bic.w	r2, r3, #31
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	7b52      	ldrb	r2, [r2, #13]
 800205e:	b251      	sxtb	r1, r2
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	431a      	orrs	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	431a      	orrs	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	3280      	adds	r2, #128	; 0x80
 800209c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop

080020ac <XMC_VADC_GROUP_ChannelSetInputReference>:

/* Set a reference voltage for conversion */
void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
                                             const uint32_t ch_num,
                                             const XMC_VADC_CHANNEL_REF_t ref)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	4613      	mov	r3, r2
 80020b8:	71fb      	strb	r3, [r7, #7]
  uint32_t chctr;
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_CHANNEL_REF_ALT_CH0))

  chctr = group_ptr->CHCTR[ch_num];
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	3280      	adds	r2, #128	; 0x80
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	617b      	str	r3, [r7, #20]
  chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020cc:	617b      	str	r3, [r7, #20]
  chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	02db      	lsls	r3, r3, #11
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  group_ptr->CHCTR[ch_num] = chctr;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	3280      	adds	r2, #128	; 0x80
 80020de:	6979      	ldr	r1, [r7, #20]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop

080020f0 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <main>:
#include "Motor.h"
#include "Sensor.h"


int main(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  MotorDirection_t direction = ClockWise;
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]
  Sensor_SetDirection(direction);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f8d5 	bl	80002b8 <Sensor_SetDirection>
  int temp;

  Sensor_Init();
 800210e:	f7fe f8c5 	bl	800029c <Sensor_Init>
  Motor_Init();
 8002112:	f7fe fe8d 	bl	8000e30 <Motor_Init>

  Sensor_StartAll();
 8002116:	f7fe f8c9 	bl	80002ac <Sensor_StartAll>
  /* Start the motor */
  Motor_Main();
 800211a:	f7fe fe49 	bl	8000db0 <Motor_Main>

  while(1U)
  {
	  Sensor_GetTemperature(&temp);
 800211e:	463b      	mov	r3, r7
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f8f9 	bl	8000318 <Sensor_GetTemperature>
  }
 8002126:	e7fa      	b.n	800211e <main+0x22>

08002128 <__aeabi_drsub>:
 8002128:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800212c:	e002      	b.n	8002134 <__adddf3>
 800212e:	bf00      	nop

08002130 <__aeabi_dsub>:
 8002130:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002134 <__adddf3>:
 8002134:	b530      	push	{r4, r5, lr}
 8002136:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800213a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800213e:	ea94 0f05 	teq	r4, r5
 8002142:	bf08      	it	eq
 8002144:	ea90 0f02 	teqeq	r0, r2
 8002148:	bf1f      	itttt	ne
 800214a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800214e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002152:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002156:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800215a:	f000 80e2 	beq.w	8002322 <__adddf3+0x1ee>
 800215e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002162:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002166:	bfb8      	it	lt
 8002168:	426d      	neglt	r5, r5
 800216a:	dd0c      	ble.n	8002186 <__adddf3+0x52>
 800216c:	442c      	add	r4, r5
 800216e:	ea80 0202 	eor.w	r2, r0, r2
 8002172:	ea81 0303 	eor.w	r3, r1, r3
 8002176:	ea82 0000 	eor.w	r0, r2, r0
 800217a:	ea83 0101 	eor.w	r1, r3, r1
 800217e:	ea80 0202 	eor.w	r2, r0, r2
 8002182:	ea81 0303 	eor.w	r3, r1, r3
 8002186:	2d36      	cmp	r5, #54	; 0x36
 8002188:	bf88      	it	hi
 800218a:	bd30      	pophi	{r4, r5, pc}
 800218c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002190:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002194:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002198:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800219c:	d002      	beq.n	80021a4 <__adddf3+0x70>
 800219e:	4240      	negs	r0, r0
 80021a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80021a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80021a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80021ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80021b0:	d002      	beq.n	80021b8 <__adddf3+0x84>
 80021b2:	4252      	negs	r2, r2
 80021b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80021b8:	ea94 0f05 	teq	r4, r5
 80021bc:	f000 80a7 	beq.w	800230e <__adddf3+0x1da>
 80021c0:	f1a4 0401 	sub.w	r4, r4, #1
 80021c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80021c8:	db0d      	blt.n	80021e6 <__adddf3+0xb2>
 80021ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80021ce:	fa22 f205 	lsr.w	r2, r2, r5
 80021d2:	1880      	adds	r0, r0, r2
 80021d4:	f141 0100 	adc.w	r1, r1, #0
 80021d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80021dc:	1880      	adds	r0, r0, r2
 80021de:	fa43 f305 	asr.w	r3, r3, r5
 80021e2:	4159      	adcs	r1, r3
 80021e4:	e00e      	b.n	8002204 <__adddf3+0xd0>
 80021e6:	f1a5 0520 	sub.w	r5, r5, #32
 80021ea:	f10e 0e20 	add.w	lr, lr, #32
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80021f4:	bf28      	it	cs
 80021f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80021fa:	fa43 f305 	asr.w	r3, r3, r5
 80021fe:	18c0      	adds	r0, r0, r3
 8002200:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002204:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002208:	d507      	bpl.n	800221a <__adddf3+0xe6>
 800220a:	f04f 0e00 	mov.w	lr, #0
 800220e:	f1dc 0c00 	rsbs	ip, ip, #0
 8002212:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002216:	eb6e 0101 	sbc.w	r1, lr, r1
 800221a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800221e:	d31b      	bcc.n	8002258 <__adddf3+0x124>
 8002220:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002224:	d30c      	bcc.n	8002240 <__adddf3+0x10c>
 8002226:	0849      	lsrs	r1, r1, #1
 8002228:	ea5f 0030 	movs.w	r0, r0, rrx
 800222c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002230:	f104 0401 	add.w	r4, r4, #1
 8002234:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002238:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800223c:	f080 809a 	bcs.w	8002374 <__adddf3+0x240>
 8002240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002244:	bf08      	it	eq
 8002246:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800224a:	f150 0000 	adcs.w	r0, r0, #0
 800224e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002252:	ea41 0105 	orr.w	r1, r1, r5
 8002256:	bd30      	pop	{r4, r5, pc}
 8002258:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800225c:	4140      	adcs	r0, r0
 800225e:	eb41 0101 	adc.w	r1, r1, r1
 8002262:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002266:	f1a4 0401 	sub.w	r4, r4, #1
 800226a:	d1e9      	bne.n	8002240 <__adddf3+0x10c>
 800226c:	f091 0f00 	teq	r1, #0
 8002270:	bf04      	itt	eq
 8002272:	4601      	moveq	r1, r0
 8002274:	2000      	moveq	r0, #0
 8002276:	fab1 f381 	clz	r3, r1
 800227a:	bf08      	it	eq
 800227c:	3320      	addeq	r3, #32
 800227e:	f1a3 030b 	sub.w	r3, r3, #11
 8002282:	f1b3 0220 	subs.w	r2, r3, #32
 8002286:	da0c      	bge.n	80022a2 <__adddf3+0x16e>
 8002288:	320c      	adds	r2, #12
 800228a:	dd08      	ble.n	800229e <__adddf3+0x16a>
 800228c:	f102 0c14 	add.w	ip, r2, #20
 8002290:	f1c2 020c 	rsb	r2, r2, #12
 8002294:	fa01 f00c 	lsl.w	r0, r1, ip
 8002298:	fa21 f102 	lsr.w	r1, r1, r2
 800229c:	e00c      	b.n	80022b8 <__adddf3+0x184>
 800229e:	f102 0214 	add.w	r2, r2, #20
 80022a2:	bfd8      	it	le
 80022a4:	f1c2 0c20 	rsble	ip, r2, #32
 80022a8:	fa01 f102 	lsl.w	r1, r1, r2
 80022ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80022b0:	bfdc      	itt	le
 80022b2:	ea41 010c 	orrle.w	r1, r1, ip
 80022b6:	4090      	lslle	r0, r2
 80022b8:	1ae4      	subs	r4, r4, r3
 80022ba:	bfa2      	ittt	ge
 80022bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80022c0:	4329      	orrge	r1, r5
 80022c2:	bd30      	popge	{r4, r5, pc}
 80022c4:	ea6f 0404 	mvn.w	r4, r4
 80022c8:	3c1f      	subs	r4, #31
 80022ca:	da1c      	bge.n	8002306 <__adddf3+0x1d2>
 80022cc:	340c      	adds	r4, #12
 80022ce:	dc0e      	bgt.n	80022ee <__adddf3+0x1ba>
 80022d0:	f104 0414 	add.w	r4, r4, #20
 80022d4:	f1c4 0220 	rsb	r2, r4, #32
 80022d8:	fa20 f004 	lsr.w	r0, r0, r4
 80022dc:	fa01 f302 	lsl.w	r3, r1, r2
 80022e0:	ea40 0003 	orr.w	r0, r0, r3
 80022e4:	fa21 f304 	lsr.w	r3, r1, r4
 80022e8:	ea45 0103 	orr.w	r1, r5, r3
 80022ec:	bd30      	pop	{r4, r5, pc}
 80022ee:	f1c4 040c 	rsb	r4, r4, #12
 80022f2:	f1c4 0220 	rsb	r2, r4, #32
 80022f6:	fa20 f002 	lsr.w	r0, r0, r2
 80022fa:	fa01 f304 	lsl.w	r3, r1, r4
 80022fe:	ea40 0003 	orr.w	r0, r0, r3
 8002302:	4629      	mov	r1, r5
 8002304:	bd30      	pop	{r4, r5, pc}
 8002306:	fa21 f004 	lsr.w	r0, r1, r4
 800230a:	4629      	mov	r1, r5
 800230c:	bd30      	pop	{r4, r5, pc}
 800230e:	f094 0f00 	teq	r4, #0
 8002312:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002316:	bf06      	itte	eq
 8002318:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800231c:	3401      	addeq	r4, #1
 800231e:	3d01      	subne	r5, #1
 8002320:	e74e      	b.n	80021c0 <__adddf3+0x8c>
 8002322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002326:	bf18      	it	ne
 8002328:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800232c:	d029      	beq.n	8002382 <__adddf3+0x24e>
 800232e:	ea94 0f05 	teq	r4, r5
 8002332:	bf08      	it	eq
 8002334:	ea90 0f02 	teqeq	r0, r2
 8002338:	d005      	beq.n	8002346 <__adddf3+0x212>
 800233a:	ea54 0c00 	orrs.w	ip, r4, r0
 800233e:	bf04      	itt	eq
 8002340:	4619      	moveq	r1, r3
 8002342:	4610      	moveq	r0, r2
 8002344:	bd30      	pop	{r4, r5, pc}
 8002346:	ea91 0f03 	teq	r1, r3
 800234a:	bf1e      	ittt	ne
 800234c:	2100      	movne	r1, #0
 800234e:	2000      	movne	r0, #0
 8002350:	bd30      	popne	{r4, r5, pc}
 8002352:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002356:	d105      	bne.n	8002364 <__adddf3+0x230>
 8002358:	0040      	lsls	r0, r0, #1
 800235a:	4149      	adcs	r1, r1
 800235c:	bf28      	it	cs
 800235e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002362:	bd30      	pop	{r4, r5, pc}
 8002364:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002368:	bf3c      	itt	cc
 800236a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800236e:	bd30      	popcc	{r4, r5, pc}
 8002370:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002374:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002378:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	bd30      	pop	{r4, r5, pc}
 8002382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002386:	bf1a      	itte	ne
 8002388:	4619      	movne	r1, r3
 800238a:	4610      	movne	r0, r2
 800238c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002390:	bf1c      	itt	ne
 8002392:	460b      	movne	r3, r1
 8002394:	4602      	movne	r2, r0
 8002396:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800239a:	bf06      	itte	eq
 800239c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80023a0:	ea91 0f03 	teqeq	r1, r3
 80023a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80023a8:	bd30      	pop	{r4, r5, pc}
 80023aa:	bf00      	nop

080023ac <__aeabi_ui2d>:
 80023ac:	f090 0f00 	teq	r0, #0
 80023b0:	bf04      	itt	eq
 80023b2:	2100      	moveq	r1, #0
 80023b4:	4770      	bxeq	lr
 80023b6:	b530      	push	{r4, r5, lr}
 80023b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80023bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80023c0:	f04f 0500 	mov.w	r5, #0
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	e750      	b.n	800226c <__adddf3+0x138>
 80023ca:	bf00      	nop

080023cc <__aeabi_i2d>:
 80023cc:	f090 0f00 	teq	r0, #0
 80023d0:	bf04      	itt	eq
 80023d2:	2100      	moveq	r1, #0
 80023d4:	4770      	bxeq	lr
 80023d6:	b530      	push	{r4, r5, lr}
 80023d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80023dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80023e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80023e4:	bf48      	it	mi
 80023e6:	4240      	negmi	r0, r0
 80023e8:	f04f 0100 	mov.w	r1, #0
 80023ec:	e73e      	b.n	800226c <__adddf3+0x138>
 80023ee:	bf00      	nop

080023f0 <__aeabi_f2d>:
 80023f0:	0042      	lsls	r2, r0, #1
 80023f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80023f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80023fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80023fe:	bf1f      	itttt	ne
 8002400:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002404:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002408:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800240c:	4770      	bxne	lr
 800240e:	f092 0f00 	teq	r2, #0
 8002412:	bf14      	ite	ne
 8002414:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002418:	4770      	bxeq	lr
 800241a:	b530      	push	{r4, r5, lr}
 800241c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002424:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002428:	e720      	b.n	800226c <__adddf3+0x138>
 800242a:	bf00      	nop

0800242c <__aeabi_ul2d>:
 800242c:	ea50 0201 	orrs.w	r2, r0, r1
 8002430:	bf08      	it	eq
 8002432:	4770      	bxeq	lr
 8002434:	b530      	push	{r4, r5, lr}
 8002436:	f04f 0500 	mov.w	r5, #0
 800243a:	e00a      	b.n	8002452 <__aeabi_l2d+0x16>

0800243c <__aeabi_l2d>:
 800243c:	ea50 0201 	orrs.w	r2, r0, r1
 8002440:	bf08      	it	eq
 8002442:	4770      	bxeq	lr
 8002444:	b530      	push	{r4, r5, lr}
 8002446:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800244a:	d502      	bpl.n	8002452 <__aeabi_l2d+0x16>
 800244c:	4240      	negs	r0, r0
 800244e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002452:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002456:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800245a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800245e:	f43f aedc 	beq.w	800221a <__adddf3+0xe6>
 8002462:	f04f 0203 	mov.w	r2, #3
 8002466:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800246a:	bf18      	it	ne
 800246c:	3203      	addne	r2, #3
 800246e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002472:	bf18      	it	ne
 8002474:	3203      	addne	r2, #3
 8002476:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800247a:	f1c2 0320 	rsb	r3, r2, #32
 800247e:	fa00 fc03 	lsl.w	ip, r0, r3
 8002482:	fa20 f002 	lsr.w	r0, r0, r2
 8002486:	fa01 fe03 	lsl.w	lr, r1, r3
 800248a:	ea40 000e 	orr.w	r0, r0, lr
 800248e:	fa21 f102 	lsr.w	r1, r1, r2
 8002492:	4414      	add	r4, r2
 8002494:	e6c1      	b.n	800221a <__adddf3+0xe6>
 8002496:	bf00      	nop

08002498 <__aeabi_dmul>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800249e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80024a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80024a6:	bf1d      	ittte	ne
 80024a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80024ac:	ea94 0f0c 	teqne	r4, ip
 80024b0:	ea95 0f0c 	teqne	r5, ip
 80024b4:	f000 f8de 	bleq	8002674 <__aeabi_dmul+0x1dc>
 80024b8:	442c      	add	r4, r5
 80024ba:	ea81 0603 	eor.w	r6, r1, r3
 80024be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80024c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80024c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80024ca:	bf18      	it	ne
 80024cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80024d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80024d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d8:	d038      	beq.n	800254c <__aeabi_dmul+0xb4>
 80024da:	fba0 ce02 	umull	ip, lr, r0, r2
 80024de:	f04f 0500 	mov.w	r5, #0
 80024e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80024e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80024ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80024ee:	f04f 0600 	mov.w	r6, #0
 80024f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80024f6:	f09c 0f00 	teq	ip, #0
 80024fa:	bf18      	it	ne
 80024fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8002500:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002504:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002508:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800250c:	d204      	bcs.n	8002518 <__aeabi_dmul+0x80>
 800250e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002512:	416d      	adcs	r5, r5
 8002514:	eb46 0606 	adc.w	r6, r6, r6
 8002518:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800251c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002520:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002524:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002528:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800252c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002530:	bf88      	it	hi
 8002532:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002536:	d81e      	bhi.n	8002576 <__aeabi_dmul+0xde>
 8002538:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800253c:	bf08      	it	eq
 800253e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002542:	f150 0000 	adcs.w	r0, r0, #0
 8002546:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002550:	ea46 0101 	orr.w	r1, r6, r1
 8002554:	ea40 0002 	orr.w	r0, r0, r2
 8002558:	ea81 0103 	eor.w	r1, r1, r3
 800255c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002560:	bfc2      	ittt	gt
 8002562:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002566:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800256a:	bd70      	popgt	{r4, r5, r6, pc}
 800256c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002570:	f04f 0e00 	mov.w	lr, #0
 8002574:	3c01      	subs	r4, #1
 8002576:	f300 80ab 	bgt.w	80026d0 <__aeabi_dmul+0x238>
 800257a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800257e:	bfde      	ittt	le
 8002580:	2000      	movle	r0, #0
 8002582:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002586:	bd70      	pople	{r4, r5, r6, pc}
 8002588:	f1c4 0400 	rsb	r4, r4, #0
 800258c:	3c20      	subs	r4, #32
 800258e:	da35      	bge.n	80025fc <__aeabi_dmul+0x164>
 8002590:	340c      	adds	r4, #12
 8002592:	dc1b      	bgt.n	80025cc <__aeabi_dmul+0x134>
 8002594:	f104 0414 	add.w	r4, r4, #20
 8002598:	f1c4 0520 	rsb	r5, r4, #32
 800259c:	fa00 f305 	lsl.w	r3, r0, r5
 80025a0:	fa20 f004 	lsr.w	r0, r0, r4
 80025a4:	fa01 f205 	lsl.w	r2, r1, r5
 80025a8:	ea40 0002 	orr.w	r0, r0, r2
 80025ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80025b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80025b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80025b8:	fa21 f604 	lsr.w	r6, r1, r4
 80025bc:	eb42 0106 	adc.w	r1, r2, r6
 80025c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80025c4:	bf08      	it	eq
 80025c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	f1c4 040c 	rsb	r4, r4, #12
 80025d0:	f1c4 0520 	rsb	r5, r4, #32
 80025d4:	fa00 f304 	lsl.w	r3, r0, r4
 80025d8:	fa20 f005 	lsr.w	r0, r0, r5
 80025dc:	fa01 f204 	lsl.w	r2, r1, r4
 80025e0:	ea40 0002 	orr.w	r0, r0, r2
 80025e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80025e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80025ec:	f141 0100 	adc.w	r1, r1, #0
 80025f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80025f4:	bf08      	it	eq
 80025f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	f1c4 0520 	rsb	r5, r4, #32
 8002600:	fa00 f205 	lsl.w	r2, r0, r5
 8002604:	ea4e 0e02 	orr.w	lr, lr, r2
 8002608:	fa20 f304 	lsr.w	r3, r0, r4
 800260c:	fa01 f205 	lsl.w	r2, r1, r5
 8002610:	ea43 0302 	orr.w	r3, r3, r2
 8002614:	fa21 f004 	lsr.w	r0, r1, r4
 8002618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800261c:	fa21 f204 	lsr.w	r2, r1, r4
 8002620:	ea20 0002 	bic.w	r0, r0, r2
 8002624:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800262c:	bf08      	it	eq
 800262e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f094 0f00 	teq	r4, #0
 8002638:	d10f      	bne.n	800265a <__aeabi_dmul+0x1c2>
 800263a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800263e:	0040      	lsls	r0, r0, #1
 8002640:	eb41 0101 	adc.w	r1, r1, r1
 8002644:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002648:	bf08      	it	eq
 800264a:	3c01      	subeq	r4, #1
 800264c:	d0f7      	beq.n	800263e <__aeabi_dmul+0x1a6>
 800264e:	ea41 0106 	orr.w	r1, r1, r6
 8002652:	f095 0f00 	teq	r5, #0
 8002656:	bf18      	it	ne
 8002658:	4770      	bxne	lr
 800265a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800265e:	0052      	lsls	r2, r2, #1
 8002660:	eb43 0303 	adc.w	r3, r3, r3
 8002664:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002668:	bf08      	it	eq
 800266a:	3d01      	subeq	r5, #1
 800266c:	d0f7      	beq.n	800265e <__aeabi_dmul+0x1c6>
 800266e:	ea43 0306 	orr.w	r3, r3, r6
 8002672:	4770      	bx	lr
 8002674:	ea94 0f0c 	teq	r4, ip
 8002678:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800267c:	bf18      	it	ne
 800267e:	ea95 0f0c 	teqne	r5, ip
 8002682:	d00c      	beq.n	800269e <__aeabi_dmul+0x206>
 8002684:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002688:	bf18      	it	ne
 800268a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800268e:	d1d1      	bne.n	8002634 <__aeabi_dmul+0x19c>
 8002690:	ea81 0103 	eor.w	r1, r1, r3
 8002694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80026a2:	bf06      	itte	eq
 80026a4:	4610      	moveq	r0, r2
 80026a6:	4619      	moveq	r1, r3
 80026a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80026ac:	d019      	beq.n	80026e2 <__aeabi_dmul+0x24a>
 80026ae:	ea94 0f0c 	teq	r4, ip
 80026b2:	d102      	bne.n	80026ba <__aeabi_dmul+0x222>
 80026b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80026b8:	d113      	bne.n	80026e2 <__aeabi_dmul+0x24a>
 80026ba:	ea95 0f0c 	teq	r5, ip
 80026be:	d105      	bne.n	80026cc <__aeabi_dmul+0x234>
 80026c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80026c4:	bf1c      	itt	ne
 80026c6:	4610      	movne	r0, r2
 80026c8:	4619      	movne	r1, r3
 80026ca:	d10a      	bne.n	80026e2 <__aeabi_dmul+0x24a>
 80026cc:	ea81 0103 	eor.w	r1, r1, r3
 80026d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80026d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80026d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026dc:	f04f 0000 	mov.w	r0, #0
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80026e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80026ea:	bd70      	pop	{r4, r5, r6, pc}

080026ec <__aeabi_ddiv>:
 80026ec:	b570      	push	{r4, r5, r6, lr}
 80026ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80026f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80026f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80026fa:	bf1d      	ittte	ne
 80026fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002700:	ea94 0f0c 	teqne	r4, ip
 8002704:	ea95 0f0c 	teqne	r5, ip
 8002708:	f000 f8a7 	bleq	800285a <__aeabi_ddiv+0x16e>
 800270c:	eba4 0405 	sub.w	r4, r4, r5
 8002710:	ea81 0e03 	eor.w	lr, r1, r3
 8002714:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002718:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800271c:	f000 8088 	beq.w	8002830 <__aeabi_ddiv+0x144>
 8002720:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002724:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002728:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800272c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002730:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002734:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002738:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800273c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002740:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002744:	429d      	cmp	r5, r3
 8002746:	bf08      	it	eq
 8002748:	4296      	cmpeq	r6, r2
 800274a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800274e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002752:	d202      	bcs.n	800275a <__aeabi_ddiv+0x6e>
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	ea4f 0232 	mov.w	r2, r2, rrx
 800275a:	1ab6      	subs	r6, r6, r2
 800275c:	eb65 0503 	sbc.w	r5, r5, r3
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	ea4f 0232 	mov.w	r2, r2, rrx
 8002766:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800276a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800276e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002776:	bf22      	ittt	cs
 8002778:	1ab6      	subcs	r6, r6, r2
 800277a:	4675      	movcs	r5, lr
 800277c:	ea40 000c 	orrcs.w	r0, r0, ip
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	ea4f 0232 	mov.w	r2, r2, rrx
 8002786:	ebb6 0e02 	subs.w	lr, r6, r2
 800278a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800278e:	bf22      	ittt	cs
 8002790:	1ab6      	subcs	r6, r6, r2
 8002792:	4675      	movcs	r5, lr
 8002794:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	ea4f 0232 	mov.w	r2, r2, rrx
 800279e:	ebb6 0e02 	subs.w	lr, r6, r2
 80027a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80027a6:	bf22      	ittt	cs
 80027a8:	1ab6      	subcs	r6, r6, r2
 80027aa:	4675      	movcs	r5, lr
 80027ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80027b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80027ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80027be:	bf22      	ittt	cs
 80027c0:	1ab6      	subcs	r6, r6, r2
 80027c2:	4675      	movcs	r5, lr
 80027c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80027c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80027cc:	d018      	beq.n	8002800 <__aeabi_ddiv+0x114>
 80027ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80027d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80027d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80027da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80027de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80027e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80027e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80027ea:	d1c0      	bne.n	800276e <__aeabi_ddiv+0x82>
 80027ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80027f0:	d10b      	bne.n	800280a <__aeabi_ddiv+0x11e>
 80027f2:	ea41 0100 	orr.w	r1, r1, r0
 80027f6:	f04f 0000 	mov.w	r0, #0
 80027fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80027fe:	e7b6      	b.n	800276e <__aeabi_ddiv+0x82>
 8002800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002804:	bf04      	itt	eq
 8002806:	4301      	orreq	r1, r0
 8002808:	2000      	moveq	r0, #0
 800280a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800280e:	bf88      	it	hi
 8002810:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002814:	f63f aeaf 	bhi.w	8002576 <__aeabi_dmul+0xde>
 8002818:	ebb5 0c03 	subs.w	ip, r5, r3
 800281c:	bf04      	itt	eq
 800281e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002822:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002826:	f150 0000 	adcs.w	r0, r0, #0
 800282a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800282e:	bd70      	pop	{r4, r5, r6, pc}
 8002830:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002834:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002838:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800283c:	bfc2      	ittt	gt
 800283e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002842:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002846:	bd70      	popgt	{r4, r5, r6, pc}
 8002848:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800284c:	f04f 0e00 	mov.w	lr, #0
 8002850:	3c01      	subs	r4, #1
 8002852:	e690      	b.n	8002576 <__aeabi_dmul+0xde>
 8002854:	ea45 0e06 	orr.w	lr, r5, r6
 8002858:	e68d      	b.n	8002576 <__aeabi_dmul+0xde>
 800285a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800285e:	ea94 0f0c 	teq	r4, ip
 8002862:	bf08      	it	eq
 8002864:	ea95 0f0c 	teqeq	r5, ip
 8002868:	f43f af3b 	beq.w	80026e2 <__aeabi_dmul+0x24a>
 800286c:	ea94 0f0c 	teq	r4, ip
 8002870:	d10a      	bne.n	8002888 <__aeabi_ddiv+0x19c>
 8002872:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002876:	f47f af34 	bne.w	80026e2 <__aeabi_dmul+0x24a>
 800287a:	ea95 0f0c 	teq	r5, ip
 800287e:	f47f af25 	bne.w	80026cc <__aeabi_dmul+0x234>
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	e72c      	b.n	80026e2 <__aeabi_dmul+0x24a>
 8002888:	ea95 0f0c 	teq	r5, ip
 800288c:	d106      	bne.n	800289c <__aeabi_ddiv+0x1b0>
 800288e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002892:	f43f aefd 	beq.w	8002690 <__aeabi_dmul+0x1f8>
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	e722      	b.n	80026e2 <__aeabi_dmul+0x24a>
 800289c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80028a0:	bf18      	it	ne
 80028a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80028a6:	f47f aec5 	bne.w	8002634 <__aeabi_dmul+0x19c>
 80028aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80028ae:	f47f af0d 	bne.w	80026cc <__aeabi_dmul+0x234>
 80028b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80028b6:	f47f aeeb 	bne.w	8002690 <__aeabi_dmul+0x1f8>
 80028ba:	e712      	b.n	80026e2 <__aeabi_dmul+0x24a>

080028bc <__gedf2>:
 80028bc:	f04f 3cff 	mov.w	ip, #4294967295
 80028c0:	e006      	b.n	80028d0 <__cmpdf2+0x4>
 80028c2:	bf00      	nop

080028c4 <__ledf2>:
 80028c4:	f04f 0c01 	mov.w	ip, #1
 80028c8:	e002      	b.n	80028d0 <__cmpdf2+0x4>
 80028ca:	bf00      	nop

080028cc <__cmpdf2>:
 80028cc:	f04f 0c01 	mov.w	ip, #1
 80028d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80028d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80028d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80028dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80028e0:	bf18      	it	ne
 80028e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80028e6:	d01b      	beq.n	8002920 <__cmpdf2+0x54>
 80028e8:	b001      	add	sp, #4
 80028ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80028ee:	bf0c      	ite	eq
 80028f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80028f4:	ea91 0f03 	teqne	r1, r3
 80028f8:	bf02      	ittt	eq
 80028fa:	ea90 0f02 	teqeq	r0, r2
 80028fe:	2000      	moveq	r0, #0
 8002900:	4770      	bxeq	lr
 8002902:	f110 0f00 	cmn.w	r0, #0
 8002906:	ea91 0f03 	teq	r1, r3
 800290a:	bf58      	it	pl
 800290c:	4299      	cmppl	r1, r3
 800290e:	bf08      	it	eq
 8002910:	4290      	cmpeq	r0, r2
 8002912:	bf2c      	ite	cs
 8002914:	17d8      	asrcs	r0, r3, #31
 8002916:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800291a:	f040 0001 	orr.w	r0, r0, #1
 800291e:	4770      	bx	lr
 8002920:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002928:	d102      	bne.n	8002930 <__cmpdf2+0x64>
 800292a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800292e:	d107      	bne.n	8002940 <__cmpdf2+0x74>
 8002930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002934:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002938:	d1d6      	bne.n	80028e8 <__cmpdf2+0x1c>
 800293a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800293e:	d0d3      	beq.n	80028e8 <__cmpdf2+0x1c>
 8002940:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop

08002948 <__aeabi_cdrcmple>:
 8002948:	4684      	mov	ip, r0
 800294a:	4610      	mov	r0, r2
 800294c:	4662      	mov	r2, ip
 800294e:	468c      	mov	ip, r1
 8002950:	4619      	mov	r1, r3
 8002952:	4663      	mov	r3, ip
 8002954:	e000      	b.n	8002958 <__aeabi_cdcmpeq>
 8002956:	bf00      	nop

08002958 <__aeabi_cdcmpeq>:
 8002958:	b501      	push	{r0, lr}
 800295a:	f7ff ffb7 	bl	80028cc <__cmpdf2>
 800295e:	2800      	cmp	r0, #0
 8002960:	bf48      	it	mi
 8002962:	f110 0f00 	cmnmi.w	r0, #0
 8002966:	bd01      	pop	{r0, pc}

08002968 <__aeabi_dcmpeq>:
 8002968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800296c:	f7ff fff4 	bl	8002958 <__aeabi_cdcmpeq>
 8002970:	bf0c      	ite	eq
 8002972:	2001      	moveq	r0, #1
 8002974:	2000      	movne	r0, #0
 8002976:	f85d fb08 	ldr.w	pc, [sp], #8
 800297a:	bf00      	nop

0800297c <__aeabi_dcmplt>:
 800297c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002980:	f7ff ffea 	bl	8002958 <__aeabi_cdcmpeq>
 8002984:	bf34      	ite	cc
 8002986:	2001      	movcc	r0, #1
 8002988:	2000      	movcs	r0, #0
 800298a:	f85d fb08 	ldr.w	pc, [sp], #8
 800298e:	bf00      	nop

08002990 <__aeabi_dcmple>:
 8002990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002994:	f7ff ffe0 	bl	8002958 <__aeabi_cdcmpeq>
 8002998:	bf94      	ite	ls
 800299a:	2001      	movls	r0, #1
 800299c:	2000      	movhi	r0, #0
 800299e:	f85d fb08 	ldr.w	pc, [sp], #8
 80029a2:	bf00      	nop

080029a4 <__aeabi_dcmpge>:
 80029a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80029a8:	f7ff ffce 	bl	8002948 <__aeabi_cdrcmple>
 80029ac:	bf94      	ite	ls
 80029ae:	2001      	movls	r0, #1
 80029b0:	2000      	movhi	r0, #0
 80029b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80029b6:	bf00      	nop

080029b8 <__aeabi_dcmpgt>:
 80029b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80029bc:	f7ff ffc4 	bl	8002948 <__aeabi_cdrcmple>
 80029c0:	bf34      	ite	cc
 80029c2:	2001      	movcc	r0, #1
 80029c4:	2000      	movcs	r0, #0
 80029c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80029ca:	bf00      	nop

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <__libc_init_array+0x3c>)
 80029d0:	4c0e      	ldr	r4, [pc, #56]	; (8002a0c <__libc_init_array+0x40>)
 80029d2:	1ae4      	subs	r4, r4, r3
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	2500      	movs	r5, #0
 80029d8:	461e      	mov	r6, r3
 80029da:	42a5      	cmp	r5, r4
 80029dc:	d004      	beq.n	80029e8 <__libc_init_array+0x1c>
 80029de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029e2:	4798      	blx	r3
 80029e4:	3501      	adds	r5, #1
 80029e6:	e7f8      	b.n	80029da <__libc_init_array+0xe>
 80029e8:	f7ff fb82 	bl	80020f0 <_init>
 80029ec:	4c08      	ldr	r4, [pc, #32]	; (8002a10 <__libc_init_array+0x44>)
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <__libc_init_array+0x48>)
 80029f0:	1ae4      	subs	r4, r4, r3
 80029f2:	10a4      	asrs	r4, r4, #2
 80029f4:	2500      	movs	r5, #0
 80029f6:	461e      	mov	r6, r3
 80029f8:	42a5      	cmp	r5, r4
 80029fa:	d004      	beq.n	8002a06 <__libc_init_array+0x3a>
 80029fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a00:	4798      	blx	r3
 8002a02:	3501      	adds	r5, #1
 8002a04:	e7f8      	b.n	80029f8 <__libc_init_array+0x2c>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	1ffe8d24 	.word	0x1ffe8d24
 8002a0c:	1ffe8d24 	.word	0x1ffe8d24
 8002a10:	1ffe8d24 	.word	0x1ffe8d24
 8002a14:	1ffe8d24 	.word	0x1ffe8d24

08002a18 <global_config>:
 8002a18:	00000000 00000004 00000000 00000000     ................
	...

08002a30 <group_init_handle0>:
	...

08002a44 <global_iclass_config>:
 8002a44:	00000000                                ....

08002a48 <backgnd_config>:
 8002a48:	00000005 00000000 00000008 06020301     ................
 8002a58:	00ff0504 02060405 00ff0103              ............

08002a64 <g_xmc_vadc_group_array>:
 8002a64:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@
