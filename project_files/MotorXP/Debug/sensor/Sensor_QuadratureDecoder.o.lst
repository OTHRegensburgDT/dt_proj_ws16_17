   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "Sensor_QuadratureDecoder.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	NVIC_EnableIRQ:
  25              	.LFB108:
  26              	 .file 1 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Include/core_cm4.h"
   1:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**************************************************************************//**
   2:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @file     core_cm4.h
   3:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @version  V4.30
   5:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @date     20. October 2015
   6:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
   7:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
   9:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    All rights reserved.
  10:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      to endorse or promote products derived from this software without
  19:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      specific prior written permission.
  20:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    *
  21:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  34:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  35:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __ICCARM__ )
  36:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
  40:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  41:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  44:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include <stdint.h>
  45:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  46:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
  47:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
  48:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
  49:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  50:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
  51:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  54:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  57:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Unions are used for effective representation of core registers.
  59:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  60:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
  63:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  64:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  65:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
  66:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                 CMSIS definitions
  67:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
  68:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
  69:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup Cortex_M4
  70:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
  71:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
  72:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  73:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*  CMSIS CM4 definitions */
  74:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  79:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  81:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  82:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __CC_ARM )
  83:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  87:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  92:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
  93:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  97:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
  98:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 102:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TMS470__ )
 103:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 106:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 107:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 111:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 112:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __packed
 113:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 117:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #else
 118:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #error Unknown compiler
 119:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 120:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 121:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 124:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if defined ( __CC_ARM )
 125:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 128:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 129:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 131:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 132:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 133:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 134:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 135:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 136:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 140:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 141:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 143:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 144:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 145:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 146:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 147:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 148:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
 149:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 152:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 153:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 155:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 156:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 157:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 158:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 159:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 160:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
 161:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARMVFP__
 162:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 164:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 165:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 167:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 168:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 169:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 170:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 171:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 172:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TMS470__ )
 173:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 176:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 177:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 179:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 180:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 181:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 182:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 183:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 184:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 185:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __FPU_VFP__
 186:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 188:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 189:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 191:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 192:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 193:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 194:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 195:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 196:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 197:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 200:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 201:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 203:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 204:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 205:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 206:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 207:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 208:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 209:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 210:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 214:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 215:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 216:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 217:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 218:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 220:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 222:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 225:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 226:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
 227:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 228:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 229:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* check device defines and use defaults */
 230:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __CM4_REV
 232:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __CM4_REV               0x0000U
 233:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 235:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 236:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __FPU_PRESENT
 237:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_PRESENT             0U
 238:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 240:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 241:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __MPU_PRESENT
 242:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __MPU_PRESENT             0U
 243:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 245:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 246:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 250:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 251:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 255:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 256:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 257:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 259:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \li to specify the access to peripheral variables.
 263:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 265:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 266:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #else
 268:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 270:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 273:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* following defines should be used for structure members */
 274:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 278:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group Cortex_M4 */
 279:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 280:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 281:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 282:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
 283:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                 Register Abstraction
 284:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   Core Register contain:
 285:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register
 286:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Register
 287:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SCB Register
 288:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Register
 289:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Register
 290:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core MPU Register
 291:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core FPU Register
 292:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
 293:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 294:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 297:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 298:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 299:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 300:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Core Register type definitions.
 302:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 303:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 304:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 305:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 306:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 308:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 309:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 310:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 311:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 312:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } APSR_Type;
 323:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 324:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* APSR Register Definitions */
 325:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 328:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 331:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 334:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 337:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 340:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 343:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 344:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 345:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 347:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 348:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 349:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 350:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 351:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } IPSR_Type;
 356:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 357:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* IPSR Register Definitions */
 358:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 361:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 362:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 363:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 365:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 366:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 367:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 368:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 369:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } xPSR_Type;
 383:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 384:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* xPSR Register Definitions */
 385:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 388:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 391:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 394:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 397:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 400:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 403:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 406:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 409:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 412:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 413:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 414:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 416:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 417:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 418:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 419:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 420:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } CONTROL_Type;
 427:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 428:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* CONTROL Register Definitions */
 429:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 432:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 435:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 438:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 440:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 441:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 442:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 443:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 446:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 447:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 448:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 449:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 451:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 452:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 453:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[24U];
 455:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RSERVED1[24U];
 457:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[24U];
 459:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[24U];
 461:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[56U];
 463:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[644U];
 465:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }  NVIC_Type;
 467:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 468:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 472:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 474:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 475:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 476:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 477:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 480:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 481:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 482:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 483:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 485:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 486:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 487:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[5U];
 507:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SCB_Type;
 509:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 510:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB CPUID Register Definitions */
 511:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 514:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 517:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 520:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 523:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 526:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 530:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 533:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 536:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 539:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 542:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 545:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 548:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 551:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 554:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 557:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 561:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 565:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 568:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 571:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 574:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 577:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 580:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 583:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Control Register Definitions */
 584:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 587:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 590:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 593:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 597:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 600:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 603:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 606:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 609:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 612:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 616:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 619:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 622:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 625:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 628:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 631:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 634:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 637:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 640:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 643:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 646:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 649:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 652:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 655:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 659:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 662:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 665:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 669:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 672:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 675:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 679:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 682:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 685:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 688:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 691:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 693:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 694:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 695:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 696:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 699:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 700:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 701:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 702:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 704:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 705:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 706:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 707:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SCnSCB_Type;
 710:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 711:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 715:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 719:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 722:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 725:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 728:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 731:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 733:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 734:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 735:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 736:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 739:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 740:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 741:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 742:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 744:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 745:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 746:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SysTick_Type;
 751:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 752:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 756:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 759:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 762:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 765:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Reload Register Definitions */
 766:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 769:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Current Register Definitions */
 770:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 773:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 777:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 780:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 783:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 785:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 786:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 787:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 788:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 791:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 792:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 793:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 794:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 796:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 797:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 798:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  union
 799:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 800:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[864U];
 805:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[15U];
 807:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[15U];
 809:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[29U];
 811:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[43U];
 815:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[6U];
 818:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } ITM_Type;
 831:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 832:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 836:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 840:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 843:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 846:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 849:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 852:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 855:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 858:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 861:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 864:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 868:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 872:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 876:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 880:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 883:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 886:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 888:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 889:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 890:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 891:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 894:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 895:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 896:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 897:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 899:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 900:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 901:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 913:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[1U];
 917:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[1U];
 921:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } DWT_Type;
 925:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 926:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Control Register Definitions */
 927:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 930:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 933:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 936:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 939:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 942:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 945:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 948:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 951:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 954:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 957:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 960:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 963:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 966:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 969:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 972:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 975:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 978:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 981:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 985:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 989:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 993:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 997:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1001:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1005:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1009:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1012:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1015:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1018:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1021:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1024:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1027:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1030:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1033:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1035:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1036:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1037:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1038:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1041:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1042:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1043:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1044:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1046:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1047:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1048:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[2U];
1051:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[55U];
1053:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[131U];
1055:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[759U];
1059:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[1U];
1063:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[39U];
1067:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED7[8U];
1070:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } TPI_Type;
1073:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1074:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1078:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1082:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1086:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1089:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1092:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1095:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1099:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1102:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1106:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1110:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1113:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1116:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1119:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1122:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1125:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1128:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1132:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1136:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1139:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1142:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1145:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1148:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1151:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1154:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1158:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1162:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVID Register Definitions */
1163:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1166:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1169:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1172:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1175:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1178:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1181:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1185:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1188:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1190:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1191:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1193:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1194:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1197:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1198:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1199:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1200:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1202:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1203:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1204:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } MPU_Type;
1216:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1217:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Type Register Definitions */
1218:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1221:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1224:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1227:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Control Register Definitions */
1228:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1231:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1234:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1237:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Number Register Definitions */
1238:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1241:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1245:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1248:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1251:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1255:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1258:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1261:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1264:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1267:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1270:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1273:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1276:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1279:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1282:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1284:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1285:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1286:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1288:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1289:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1292:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1293:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1294:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1295:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1297:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1298:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1299:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
1300:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } FPU_Type;
1306:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1307:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1311:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1314:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1317:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1320:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1323:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1326:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1329:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1332:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1335:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1339:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1343:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1346:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1349:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1352:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1356:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1359:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1362:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1365:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1368:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1371:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1374:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1377:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1381:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1384:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1387:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1390:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1392:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1393:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1394:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1395:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1396:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1399:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1400:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1401:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1402:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1404:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1405:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1406:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } CoreDebug_Type;
1411:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1412:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1416:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1419:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1422:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1425:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1428:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1431:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1434:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1437:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1440:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1443:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1446:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1449:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1453:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1456:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1460:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1463:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1466:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1469:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1472:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1475:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1478:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1481:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1484:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1487:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1490:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1493:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1496:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1498:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1499:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1500:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1501:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1504:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1505:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1506:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1507:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of the bit field.
1510:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted value.
1511:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1512:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1514:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1515:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of register.
1518:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted bit field value.
1519:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1520:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1522:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1524:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1525:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1526:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1527:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1530:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1531:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1532:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1542:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1551:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1555:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1556:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1560:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1561:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} */
1562:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1563:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1564:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1565:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
1566:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                Hardware Abstraction Layer
1567:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   Core Function Interface contains:
1568:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Functions
1569:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Functions
1570:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Functions
1571:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register Access Functions
1572:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
1573:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1574:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1576:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1577:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1578:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1579:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1581:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1585:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1586:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1587:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1588:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Priority Grouping
1589:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            Only values from 0..7 are used.
1592:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            In case of a conflict between priority grouping and available
1593:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1596:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1598:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t reg_value;
1599:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1601:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1608:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1609:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1610:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1611:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Priority Grouping
1612:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1615:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1617:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1618:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1619:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1620:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1621:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1622:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Enable External Interrupt
1623:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1626:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
  27              	 .loc 1 1627 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 0346     	 mov r3,r0
  43 0008 FB71     	 strb r3,[r7,#7]
1628:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  44              	 .loc 1 1628 0
  45 000a 0849     	 ldr r1,.L2
  46 000c 97F90730 	 ldrsb r3,[r7,#7]
  47 0010 5B09     	 lsrs r3,r3,#5
  48 0012 FA79     	 ldrb r2,[r7,#7]
  49 0014 02F01F02 	 and r2,r2,#31
  50 0018 0120     	 movs r0,#1
  51 001a 00FA02F2 	 lsl r2,r0,r2
  52 001e 41F82320 	 str r2,[r1,r3,lsl#2]
1629:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
  53              	 .loc 1 1629 0
  54 0022 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0024 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0026 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 002a 7047     	 bx lr
  66              	.L3:
  67              	 .align 2
  68              	.L2:
  69 002c 00E100E0 	 .word -536813312
  70              	 .cfi_endproc
  71              	.LFE108:
  73              	 .section .text.NVIC_SetPriority,"ax",%progbits
  74              	 .align 2
  75              	 .thumb
  76              	 .thumb_func
  78              	NVIC_SetPriority:
  79              	.LFB114:
1630:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1631:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1632:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1633:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Disable External Interrupt
1634:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1637:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1639:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1641:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1642:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1643:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1644:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Pending Interrupt
1645:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is pending.
1649:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1650:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1652:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1654:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1655:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1656:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1657:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Pending Interrupt
1658:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1661:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1663:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1665:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1666:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1667:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1668:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Clear Pending Interrupt
1669:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1672:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1674:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1676:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1677:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1678:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1679:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Active Interrupt
1680:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not active.
1683:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is active.
1684:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1685:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1687:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1689:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1690:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1691:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1692:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Interrupt Priority
1693:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority of an interrupt.
1694:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]  priority  Priority to set.
1697:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1698:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
  80              	 .loc 1 1699 0
  81              	 .cfi_startproc
  82              	 
  83              	 
  84              	 
  85 0000 80B4     	 push {r7}
  86              	.LCFI6:
  87              	 .cfi_def_cfa_offset 4
  88              	 .cfi_offset 7,-4
  89 0002 83B0     	 sub sp,sp,#12
  90              	.LCFI7:
  91              	 .cfi_def_cfa_offset 16
  92 0004 00AF     	 add r7,sp,#0
  93              	.LCFI8:
  94              	 .cfi_def_cfa_register 7
  95 0006 0346     	 mov r3,r0
  96 0008 3960     	 str r1,[r7]
  97 000a FB71     	 strb r3,[r7,#7]
1700:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) < 0)
  98              	 .loc 1 1700 0
  99 000c 97F90730 	 ldrsb r3,[r7,#7]
 100 0010 002B     	 cmp r3,#0
 101 0012 0BDA     	 bge .L5
1701:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1702:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 102              	 .loc 1 1702 0
 103 0014 0D49     	 ldr r1,.L7
 104 0016 FB79     	 ldrb r3,[r7,#7]
 105 0018 03F00F03 	 and r3,r3,#15
 106 001c 043B     	 subs r3,r3,#4
 107 001e 3A68     	 ldr r2,[r7]
 108 0020 D2B2     	 uxtb r2,r2
 109 0022 9200     	 lsls r2,r2,#2
 110 0024 D2B2     	 uxtb r2,r2
 111 0026 0B44     	 add r3,r3,r1
 112 0028 1A76     	 strb r2,[r3,#24]
 113 002a 09E0     	 b .L4
 114              	.L5:
1703:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1704:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   else
1705:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1706:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 115              	 .loc 1 1706 0
 116 002c 0849     	 ldr r1,.L7+4
 117 002e 97F90730 	 ldrsb r3,[r7,#7]
 118 0032 3A68     	 ldr r2,[r7]
 119 0034 D2B2     	 uxtb r2,r2
 120 0036 9200     	 lsls r2,r2,#2
 121 0038 D2B2     	 uxtb r2,r2
 122 003a 0B44     	 add r3,r3,r1
 123 003c 83F80023 	 strb r2,[r3,#768]
 124              	.L4:
1707:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1708:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 125              	 .loc 1 1708 0
 126 0040 0C37     	 adds r7,r7,#12
 127              	.LCFI9:
 128              	 .cfi_def_cfa_offset 4
 129 0042 BD46     	 mov sp,r7
 130              	.LCFI10:
 131              	 .cfi_def_cfa_register 13
 132              	 
 133 0044 5DF8047B 	 ldr r7,[sp],#4
 134              	.LCFI11:
 135              	 .cfi_restore 7
 136              	 .cfi_def_cfa_offset 0
 137 0048 7047     	 bx lr
 138              	.L8:
 139 004a 00BF     	 .align 2
 140              	.L7:
 141 004c 00ED00E0 	 .word -536810240
 142 0050 00E100E0 	 .word -536813312
 143              	 .cfi_endproc
 144              	.LFE114:
 146              	 .section .text.XMC_POSIF_Start,"ax",%progbits
 147              	 .align 2
 148              	 .thumb
 149              	 .thumb_func
 151              	XMC_POSIF_Start:
 152              	.LFB166:
 153              	 .file 2 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_posif.h"
   1:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
   2:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @file xmc_posif.h
   3:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @date 2016-03-09
   4:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
   5:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @cond
   6:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **********************************************************************************
   7:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
   9:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * All rights reserved.                        
  11:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                             
  12:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Redistribution and use in source and binary forms, with or without           
  13:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * modification,are permitted provided that the following conditions are met:   
  14:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                                                              
  15:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   Redistributions of source code must retain the above copyright notice,      
  16:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   this list of conditions and the following disclaimer.                        
  17:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 
  18:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  19:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   this list of conditions and the following disclaimer in the documentation    
  20:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   and/or other materials provided with the distribution.                       
  21:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 
  22:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   Neither the name of the copyright holders nor the names of its contributors 
  23:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   may be used to endorse or promote products derived from this software without
  24:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   specific prior written permission.                                           
  25:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                                                              
  26:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  27:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  28:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  29:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  30:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  31:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  32:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  33:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  34:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  35:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  36:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  37:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                                                              
  38:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * To improve the quality of the software, users are encouraged to share        
  39:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  40:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * dave@infineon.com).                                                          
  41:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **********************************************************************************
  42:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  43:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Change History
  44:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * --------------
  45:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  46:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-02-18:
  47:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Initial version
  48:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *      
  49:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-02-20:
  50:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Driver description added <BR>
  51:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  52:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-06-19:
  53:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Removed version macros and declaration of GetDriverVersion API <BR> 
  54:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  55:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-07-02:
  56:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Updated XMC_POSIF_QD_GetDirection API
  57:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  58:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2016-03-09:
  59:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Optimization of write only registers
  60:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  61:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @endcond 
  62:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  63:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
  64:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  65:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  66:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #ifndef XMC_POSIF_H
  67:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_H
  68:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  69:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
  70:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * HEADER FILES
  71:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
  72:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #include <xmc_common.h>
  73:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  74:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if defined(POSIF0)
  75:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #include <xmc_scu.h>
  76:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  77:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
  78:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @addtogroup XMClib
  79:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @{
  80:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
  81:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  82:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
  83:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @addtogroup POSIF
  84:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @{
  85:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @brief Position Interface Unit (POSIF) driver for the XMC microcontroller family <br>
  86:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  87:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The POSIF unit is a flexible and powerful component for motor control systems that use
  88:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * rotary encoders or hall sensors as feedback loop. It provides interface for motor position and v
  89:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSIF unit works with CCU4 and CCU8 to enable position and velocity measurement and to control P
  90:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  91:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Driver is divided in three POSIF functional blocks - Hall Sensor Control (POSIF_HSC), Quadrature
  92:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * MultiChannel Mode (POSIF_MCM). <br>
  93:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  94:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSIF driver features:
  95:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  Configuration structure XMC_POSIF_CONFIG_t and initialization function XMC_POSIF_Init() to c
  96:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# Allows to change the operating mode using XMC_POSIF_SetMode()
  97:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# Allows the selection of one of the four inputs (A, B, C or D) using XMC_POSIF_SelectInputSour
  98:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * hall0, hall1 and hall2 signals. For quadrature decoder mode, inputs are phase A, phase B and ind
  99:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  Hall Sensor Control (APIs prefixed with XMC_POSIF_HSC_) <br>
 100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Configuration structure XMC_POSIF_HSC_CONFIG_t and initialization function XMC_POSIF_HSC_Ini
 101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Update current and expected hall pattern in shadow register using XMC_POSIF_HSC_SetHallPatte
 102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	- Allows immediate shadow transfer using XMC_POSIF_HSC_UpdateHallPattern()
 103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  Quadrature Decoder (APIs prefixed with XMC_POSIF_QD_) <br>
 104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Configuration structure XMC_POSIF_QD_CONFIG_t and initialization function XMC_POSIF_QD_Init(
 105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Get direction of rotation using XMC_POSIF_QD_GetDirection()
 106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  MultiChannel Mode (APIs prefixed with XMC_POSIF_MCM_) <br>
 107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *	-  Configuration structure XMC_POSIF_MCM_CONFIG_t and initialization function XMC_POSIF_MCM_Init
 108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *	-  Update multichannel pattern in shadow register using XMC_POSIF_MCM_SetMultiChannelPattern()
 109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *	-  Allows immediate shadow transfer using XMC_POSIF_MCM_UpdateMultiChannelPattern()
 110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# User need to call respective init functions to configure POSIF operating mode. e.g to configu
 111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * call both XMC_POSIF_HSC_Init() and XMC_POSIF_MCM_Init().
 112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# Allows to enable and disable interrupt sources and assign to service request node using XMC_P
 113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /* POSIF is not available on XMC11 and XMC12 devices */
 116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * MACROS
 119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_PCONF_INSEL_Msk        (0x3fUL << POSIF_PCONF_INSEL0_Pos) /*< Mask for input pins
 121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_INSEL_MAX              (4U) /*< Maximum possible input selector */
 122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_HALPS_HALLPAT_Msk      (0x3FUL)
 123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44) || (UC_SERIES == XMC47) || (UC_SERIES == XMC48) |
 125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_CHECK_MODULE_PTR(PTR)  ( ((PTR)== POSIF0) || ((PTR)== POSIF1) ) /*< Check for val
 126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #else
 127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_CHECK_MODULE_PTR(PTR)  ( ((PTR)== POSIF0))  /*< Check for valid module pointer */
 128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * ENUMS
 132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines the return status, to verify the POSIF related API calls. Use type @ref XMC_POSIF_STATU
 135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_STATUS
 137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_STATUS_OK = 0U,     /**< API fulfills request */
 139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_STATUS_ERROR        /**< API cannot fulfill request */
 140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_STATUS_t;
 141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF configurable modes.Use type @ref XMC_POSIF_MODE_t for this enum.
 144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The members defines the function selector(FSEL) bitfields of \a PCONF register.
 145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_MODE
 147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_HALL_SENSOR = 0U, /**< Hall sensor mode */
 149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_QD              , /**< Quadrature Decoder mode */
 150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_MCM             , /**< Standalone Multichannel mode */
 151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_MCM_QD           /**< Quadrature Decoder + Standalone Multichannel mode */
 152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_MODE_t;
 153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF configurable input ports.Use type @ref XMC_POSIF_INPUT_PORT_t for this enum.
 156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines the respective input selector(INSELX) bitfields of \a PCONF register.
 157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It selects, which input is used for the phase or Hall input function (depending on the module is
 158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Quadrature Decoder or Hall Sensor Mode). Same enum can be used to configure pattern update signa
 159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \a PCONF register's \a MSETS bit field.
 160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_INPUT_PORT
 162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_A = 0U, /**< INPUT-A */
 164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_B     , /**< INPUT-B */
 165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_C     , /**< INPUT-C */
 166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_D     , /**< INPUT-D */
 167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_E     , /**< INPUT-E */
 168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_F     , /**< INPUT-F */
 169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_G     , /**< INPUT-G */
 170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_H       /**< INPUT-H */
 171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_INPUT_PORT_t;
 172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines active level of an input signal.Use type @ref XMC_POSIF_INPUT_ACTIVE_LEVEL_t for this e
 175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_INPUT_ACTIVE_LEVEL
 177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_ACTIVE_LEVEL_HIGH  = 0U, /**< Input - Active High */
 179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_ACTIVE_LEVEL_LOW         /**< Input - Active Low */
 180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_INPUT_ACTIVE_LEVEL_t;
 181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF input debounce filter configuration.POSIF inputs are connected to low pass filter 
 184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * this enum is used to configure low pass filters cut off frequency.
 185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Use type @ref XMC_POSIF_FILTER_t for this enum.
 186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines the low pass filter configuration(LPC) bitfield of \a PCONF register.
 187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_FILTER
 189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_DISABLED     = 0U, /**< No filtering */
 191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_1_CLOCK_CYCLE    , /**< Filter of 1 Clock Cycle */
 192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_2_CLOCK_CYCLE    , /**< Filter of 2 Clock Cycles */
 193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_4_CLOCK_CYCLE    , /**< Filter of 4 Clock Cycles */
 194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_8_CLOCK_CYCLE    , /**< Filter of 8 Clock Cycles */
 195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_16_CLOCK_CYCLE   , /**< Filter of 16 Clock Cycles */
 196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_32_CLOCK_CYCLE   , /**< Filter of 32 Clock Cycles */
 197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_64_CLOCK_CYCLE     /**< Filter of 64 Clock Cycles */
 198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_FILTER_t;
 199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF events.Use type @ref XMC_POSIF_IRQ_EVENT_t for this enum.
 202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines available event sources.It is used to configure which event to be used for
 203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * interrupt generation using \a PFLGE register. [ PFLG,SPFLG,RPFLG]
 204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_IRQ_EVENT
 206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_CHE                  = 0U, /**< Hall Mode : Correct Hall Event */
 208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_WHE                  = 1U, /**< Hall Mode : Wrong Hall Event */
 209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_HALL_INPUT           = 2U, /**< Hall Mode : Hall Input update */
 210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_MCP_SHADOW_TRANSFER  = 4U, /**< Hall Mode + MCM Mode : MC Pattern shadow tran
 211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_INDX                 = 8U, /**< Quadrature Mode : Index event detection */
 212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_ERR                  = 9U, /**< Quadrature Mode : Quadrature Phase Error */
 213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_CNT                  = 10U, /**< Quadrature Mode : Quadrature Clock event */
 214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_DIR                  = 11U, /**< Quadrature Mode : Quadrature Direction chang
 215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_PCLK                 = 12U  /**< Quadrature Mode : Quadrature period clock ge
 216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_IRQ_EVENT_t;
 217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF service request lines.Use type @ref XMC_POSIF_SR_ID_t for this enum.
 220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to connect POSIF event to required service request line.
 221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * in \a PFLGE register for interrupt generation.
 222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_SR_ID
 224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_SR_ID_0 = 0U, /**< SR-0 */
 226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_SR_ID_1      /**< SR-1 */
 227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_SR_ID_t;
 228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines position decoder mode selection.Use type @ref XMC_POSIF_QD_MODE_t for this enum.
 231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines configuration for the operation of the quadrature decoder mode.
 232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to configure \a QDC register.
 233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_QD_MODE
 235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_MODE_QUADRATURE       = 0U, /**< Standard Quadrature Mode */
 237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_MODE_DIRECTION_COUNT       /**< Direction Count Mode */
 238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_MODE_t;
 239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines motor rotation direction.Use type @ref XMC_POSIF_QD_DIR_t for this enum.
 242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines the direction in quadrature mode.
 243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_QD_DIR
 245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_DIR_COUNTERCLOCKWISE  = 0U, /**< Counter Clockwise */
 247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_DIR_CLOCKWISE              /**< Clockwise */
 248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_DIR_t;
 249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines frequency of index signal generation.Use type @ref XMC_POSIF_QD_INDEX_GENERATION_t for t
 252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Member represents available configuration for index marker generation using \a ICM  bit field in
 253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_QD_INDEX_GENERATION
 255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_INDEX_GENERATION_NEVER  = 0U, /**< Never generate the index marker signal */
 257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_INDEX_GENERATION_ONCE      , /**< Generate only once after the first revolution */
 258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_INDEX_GENERATION_ALWAYS      /**< Index marker generated upon every revolution */
 259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_INDEX_GENERATION_t;
 260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines trigger edge in hall sensor mode.Use type @ref XMC_POSIF_HSC_TRIGGER_EDGE_t for this en
 263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  It can be used to configure \a PCONF register's \a SPES and \a MSES bit fields.
 264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_HSC_TRIGGER_EDGE
 266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_HSC_TRIGGER_EDGE_RISING  = 0U, /**< Rising edge */
 268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_HSC_TRIGGER_EDGE_FALLING      /**< Falling edge */
 269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_HSC_TRIGGER_EDGE_t;
 270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * DATA STRUCTURES
 273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /*Anonymous structure/union guard start*/
 276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if defined(__CC_ARM)
 277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma push
 278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma anon_unions
 279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #elif defined(__TASKING__)
 280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma warning 586
 281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF peripheral register structure.Use type @ref XMC_POSIF_t for this data structure.
 286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef POSIF_GLOBAL_TypeDef XMC_POSIF_t;
 288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines POSIF quadrature decoder initialization data structure.
 291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Use type @ref XMC_POSIF_QD_CONFIG_t for this data structure.
 292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  It used to configure Quadrature mode using \a QDC register.
 293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_QD_CONFIG
 295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_MODE_t mode;      /**< Operational Mode of the quadrature encoder and decoder */
 297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t phase_a: 1;       /**< Phase-A active level configuration */
 302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t phase_b: 1;       /**< Phase-B active level configuration */
 303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t phase_leader: 1;  /**< Which of the two phase signals[Phase A or Phase B] leads the 
 304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 1;
 305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t index: 2;        /**< Index signal generation control. Use @ref XMC_POSIF_QD_INDEX_G
 306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 26;
 307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t qdc;
 309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_CONFIG_t;
 311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF hall sensor control initialization data structure.
 314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Use type @ref XMC_POSIF_HSC_CONFIG_t for this data structure.
 315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to initialize hall sensor mode configuration using \a PCONF register.
 316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_HSC_CONFIG
 318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 4;
 324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t disable_idle_signal: 1;   /**< Should idle signal be disabled upon wrong hall event?
 325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 11;
 326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t sampling_trigger: 1;      /**< Of HSDA and HSDB, which one is to be used to trigger 
 327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t sampling_trigger_edge: 1; /**< Which edge of the sampling trigger signal is to be co
 328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 	  uint32_t : 6;
 329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t external_error_port: 2;    /**< Of the 4 external error ports, which one is to be co
 330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t external_error_enable: 1;  /**< Should external errors lead to Wrong Hall event? */
 331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t external_error_level: 1;   /**< What should be the active level of external error si
 332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t: 4;
 333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t hall_config;
 335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_HSC_CONFIG_t;
 337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF multi-channel mode initialization data structure.
 340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Use type @ref XMC_POSIF_MCM_CONFIG_t for this data structure.
 341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to initialize multi channel mode configuration using \a PCONF register.
 342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_MCM_CONFIG
 344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 5;
 350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t pattern_sw_update: 1; /**< should multi channel pattern updated by SW ? */
 351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 12;
 352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 	  uint32_t pattern_update_trigger: 3; /**< Of the 8 update triggers, which one is to be considered
 353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t pattern_trigger_edge: 1;  /**< Which edge of the pattern update trigger is to be con
 354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t pwm_sync: 2;         /**< Of the 4 pwm sync inputs, which one is to be considered? *
 355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 8;
 356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t mcm_config;
 358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }XMC_POSIF_MCM_CONFIG_t;
 360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines POSIF module initialization data structure.
 363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Use type @ref XMC_POSIF_CONFIG_t for this data structure.
 364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  It is used to initialize POSIF module using \a PCONF register.
 365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_CONFIG
 367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t mode: 2;    /**< POSIF Operational mode. Use @ref XMC_POSIF_MODE_t to configure */
 373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t :6;
 374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t input0: 2; /**< Choice of input for Input-1 */
 375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t input1: 2; /**< Choice of input for Input-2 */
 376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t input2: 2; /**< Choice of input for Input-3 */
 377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t :14;
 378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t filter: 3; /**< Input filter configuration */
 379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t: 1;
 380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t pconf;
 382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_CONFIG_t;
 384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /*Anonymous structure/union guard end*/
 386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if defined(__CC_ARM)
 387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma pop
 388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #elif defined(__TASKING__)
 389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma warning restore
 390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * API Prototypes
 394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #ifdef __cplusplus
 396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** extern "C" {
 397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module of type @ref XMC_POSIF_t
 401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * De-asserts the POSIF module from reset and enables the clock.\n
 405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PRCLR0 register's \a POSIF0RS or \a POSIF1RS bit field depends upon \a peripheral.
 406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * If running on other than XMC45 device then it will ungate the peripheral clock.
 407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is the first API which application must invoke to configure POSIF.
 410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is internally called by XMC_POSIF_Init().
 411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Disable(),XMC_POSIF_Init() \n\n\n
 414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_Enable(XMC_POSIF_t *const peripheral);
 416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module of type @ref XMC_POSIF_t
 419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Asserts the POSIF module into reset and disables the clock.\n
 423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * If running on other than XMC45 device then in addition it will gate the peripheral clock.
 424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PRCLR0 register's \a POSIF0RS or \a POSIF1RS bitfield depends upon \a peripheral.
 425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Enable()\n\n\n
 428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_Disable(XMC_POSIF_t *const peripheral);
 430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module of type @ref XMC_POSIF_t
 433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to POSIF configuration data(operation mode,input selection and filter conf
 434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initialize POSIF module with \a config.\n
 438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures POSIF global registers.This is the first API which application must invoke to configu
 439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It sets up parameters common to all the POSIF modes - hall sensor,quadrature decoder and multi-c
 440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with mode of operation,input selection and filter configuration.
 441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_Init(),XMC_POSIF_QD_Init(),XMC_POSIF_MCM_Init() \n\n\n
 444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** */
 445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_CONFIG_t * const config);
 446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to hall sensor control initialization data of type @ref XMC_POSIF_HSC_CONF
 450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_STATUS_t  Returns @ref XMC_POSIF_STATUS_OK if configured in Hall Sensor Mode
 451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                             else return @ref XMC_POSIF_STATUS_ERROR.
 452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes hall sensor control mode.\n
 455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with which POSIF input trigger to be used for
 456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * sampling hall pattern.Configures \a PCONF register for idle signal generation for wrong hall eve
 457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is necessary to have called XMC_POSIF_Init first with Hall sensor mode before invocation of t
 460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init() \n\n\n
 463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** XMC_POSIF_STATUS_t XMC_POSIF_HSC_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_HSC_CONFIG_t *
 465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to quadrature decoder initialization data
 469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_STATUS_t Returns quadrature mode initialization status of type @ref XMC_POSIF_
 470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes quadrature decoder control mode.\n
 473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with quadrature mode using @ref XMC_POSIF_QD_MODE_t data structure.
 474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes \a QDC register with quadrature mode configuration using @ref XMC_POSIF_QD_CONFIG_t 
 475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is necessary to have called XMC_POSIF_Init first with Quadrature decoder mode before invocati
 478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init() \n\n\n
 481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** XMC_POSIF_STATUS_t XMC_POSIF_QD_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_QD_CONFIG_t * c
 483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to quadrature decoder initialization data
 487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_STATUS_t Returns multi channel pattern initialization status of type @ref XMC_
 488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes multi channel mode in Hall mode, standalone multi-channel mode and quadrature with m
 491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with multi channel mode using @ref XMC_POSIF_MCM_CONFIG_t data stru
 492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is necessary to call XMC_POSIF_Init first before invocation of this API.
 495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * For XMC_POSIF_MODE_HALL_SENSOR, it is necessary to have called XMC_POSIF_HSC_Init before invocat
 496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * For XMC_POSIF_MODE_MCM_QD, it is necessary to have called XMC_POSIF_QD_Init before invocation of
 497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init(),XMC_POSIF_HSC_Init(),XMC_POSIF_QD_Init() \n\n\n
 500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** XMC_POSIF_STATUS_t XMC_POSIF_MCM_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_MCM_CONFIG_t *
 502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param mode POSIF operating mode of type @ref XMC_POSIF_MODE_t
 506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures POSIF module for \a mode.\n
 510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register's a\ FSEL bitfield with \a mode.
 511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Refer @ref XMC_POSIF_MODE_t for available options.
 512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSIF module should be in stopped state while changing the operating mode.
 515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Stop() \n\n\n
 518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_SetMode(XMC_POSIF_t *const peripheral, const XMC_POSIF_MODE_t mode)
 520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)(POSIF_PCONF_FSEL_Msk)) |
 522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****                      (((uint32_t)mode << POSIF_PCONF_FSEL_Pos) & (uint32_t)POSIF_PCONF_FSEL_Msk));
 523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param input0 Choice of input for input 0 [0-3]
 528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param input1 Choice of input for input 1 [0-3]
 529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param input2 Choice of input for input 2 [0-3]
 530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures which input to be connected to POSIF module. \n
 534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register's INSEL0,INSEL1,INSEL2 bit fields with source for the input connect
 535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \a input1, \a input2 respectively.
 536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures which input is used for the Phase X or Hall input X function depending upon the modul
 539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * set for Quadrature Decoder or Hall Sensor Mode.
 540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init() \n\n\n
 543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_SelectInputSource(XMC_POSIF_t *const peripheral, const XMC_POSIF_INPUT_PORT_t input0
 545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     const XMC_POSIF_INPUT_PORT_t input1, const XMC_POSIF_INPUT_PORT_t input2);
 546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Starts POSIF \a peripheral functional state machine.\n
 554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Starts POSIF state machine for \a peripheral.Configures \a PRUNS register's \a SRB bit field wit
 555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Global properties of POSIF along with mode specific properties should have been initialized befo
 558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * FSM.
 559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Stop(),XMC_POSIF_IsRunning() \n\n\n
 562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_Start(XMC_POSIF_t *const peripheral)
 564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 154              	 .loc 2 564 0
 155              	 .cfi_startproc
 156              	 
 157              	 
 158              	 
 159 0000 80B4     	 push {r7}
 160              	.LCFI12:
 161              	 .cfi_def_cfa_offset 4
 162              	 .cfi_offset 7,-4
 163 0002 83B0     	 sub sp,sp,#12
 164              	.LCFI13:
 165              	 .cfi_def_cfa_offset 16
 166 0004 00AF     	 add r7,sp,#0
 167              	.LCFI14:
 168              	 .cfi_def_cfa_register 7
 169 0006 7860     	 str r0,[r7,#4]
 565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PRUNS = (uint32_t)POSIF_PRUNS_SRB_Msk;
 170              	 .loc 2 565 0
 171 0008 7B68     	 ldr r3,[r7,#4]
 172 000a 0122     	 movs r2,#1
 173 000c 9A60     	 str r2,[r3,#8]
 566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 174              	 .loc 2 566 0
 175 000e 0C37     	 adds r7,r7,#12
 176              	.LCFI15:
 177              	 .cfi_def_cfa_offset 4
 178 0010 BD46     	 mov sp,r7
 179              	.LCFI16:
 180              	 .cfi_def_cfa_register 13
 181              	 
 182 0012 5DF8047B 	 ldr r7,[sp],#4
 183              	.LCFI17:
 184              	 .cfi_restore 7
 185              	 .cfi_def_cfa_offset 0
 186 0016 7047     	 bx lr
 187              	 .cfi_endproc
 188              	.LFE166:
 190              	 .section .text.XMC_CCU4_StartPrescaler,"ax",%progbits
 191              	 .align 2
 192              	 .thumb
 193              	 .thumb_func
 195              	XMC_CCU4_StartPrescaler:
 196              	.LFB202:
 197              	 .file 3 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2016-05-20
   4:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  67:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  68:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  71:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  72:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  73:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  74:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  75:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  76:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  77:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  78:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  79:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  80:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  81:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  82:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  83:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  84:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  85:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  86:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  87:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  88:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  89:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  90:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  91:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  92:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  93:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
  94:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  95:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  96:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  97:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
  98:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
  99:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 198              	 .loc 3 858 0
 199              	 .cfi_startproc
 200              	 
 201              	 
 202              	 
 203 0000 80B4     	 push {r7}
 204              	.LCFI18:
 205              	 .cfi_def_cfa_offset 4
 206              	 .cfi_offset 7,-4
 207 0002 83B0     	 sub sp,sp,#12
 208              	.LCFI19:
 209              	 .cfi_def_cfa_offset 16
 210 0004 00AF     	 add r7,sp,#0
 211              	.LCFI20:
 212              	 .cfi_def_cfa_register 7
 213 0006 7860     	 str r0,[r7,#4]
 859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 214              	 .loc 3 860 0
 215 0008 7B68     	 ldr r3,[r7,#4]
 216 000a DB68     	 ldr r3,[r3,#12]
 217 000c 43F48072 	 orr r2,r3,#256
 218 0010 7B68     	 ldr r3,[r7,#4]
 219 0012 DA60     	 str r2,[r3,#12]
 861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 220              	 .loc 3 861 0
 221 0014 0C37     	 adds r7,r7,#12
 222              	.LCFI21:
 223              	 .cfi_def_cfa_offset 4
 224 0016 BD46     	 mov sp,r7
 225              	.LCFI22:
 226              	 .cfi_def_cfa_register 13
 227              	 
 228 0018 5DF8047B 	 ldr r7,[sp],#4
 229              	.LCFI23:
 230              	 .cfi_restore 7
 231              	 .cfi_def_cfa_offset 0
 232 001c 7047     	 bx lr
 233              	 .cfi_endproc
 234              	.LFE202:
 236 001e 00BF     	 .section .text.XMC_CCU4_EnableClock,"ax",%progbits
 237              	 .align 2
 238              	 .thumb
 239              	 .thumb_func
 241              	XMC_CCU4_EnableClock:
 242              	.LFB206:
 862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 243              	 .loc 3 944 0
 244              	 .cfi_startproc
 245              	 
 246              	 
 247              	 
 248 0000 80B4     	 push {r7}
 249              	.LCFI24:
 250              	 .cfi_def_cfa_offset 4
 251              	 .cfi_offset 7,-4
 252 0002 83B0     	 sub sp,sp,#12
 253              	.LCFI25:
 254              	 .cfi_def_cfa_offset 16
 255 0004 00AF     	 add r7,sp,#0
 256              	.LCFI26:
 257              	 .cfi_def_cfa_register 7
 258 0006 7860     	 str r0,[r7,#4]
 259 0008 0B46     	 mov r3,r1
 260 000a FB70     	 strb r3,[r7,#3]
 945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
 261              	 .loc 3 948 0
 262 000c 7B68     	 ldr r3,[r7,#4]
 263 000e DA68     	 ldr r2,[r3,#12]
 264 0010 FB78     	 ldrb r3,[r7,#3]
 265 0012 0121     	 movs r1,#1
 266 0014 01FA03F3 	 lsl r3,r1,r3
 267 0018 1A43     	 orrs r2,r2,r3
 268 001a 7B68     	 ldr r3,[r7,#4]
 269 001c DA60     	 str r2,[r3,#12]
 949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 270              	 .loc 3 949 0
 271 001e 0C37     	 adds r7,r7,#12
 272              	.LCFI27:
 273              	 .cfi_def_cfa_offset 4
 274 0020 BD46     	 mov sp,r7
 275              	.LCFI28:
 276              	 .cfi_def_cfa_register 13
 277              	 
 278 0022 5DF8047B 	 ldr r7,[sp],#4
 279              	.LCFI29:
 280              	 .cfi_restore 7
 281              	 .cfi_def_cfa_offset 0
 282 0026 7047     	 bx lr
 283              	 .cfi_endproc
 284              	.LFE206:
 286              	 .section .text.XMC_CCU4_SLICE_StartTimer,"ax",%progbits
 287              	 .align 2
 288              	 .thumb
 289              	 .thumb_func
 291              	XMC_CCU4_SLICE_StartTimer:
 292              	.LFB213:
 950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
 991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
 994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
 998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 293              	 .loc 3 1433 0
 294              	 .cfi_startproc
 295              	 
 296              	 
 297              	 
 298 0000 80B4     	 push {r7}
 299              	.LCFI30:
 300              	 .cfi_def_cfa_offset 4
 301              	 .cfi_offset 7,-4
 302 0002 83B0     	 sub sp,sp,#12
 303              	.LCFI31:
 304              	 .cfi_def_cfa_offset 16
 305 0004 00AF     	 add r7,sp,#0
 306              	.LCFI32:
 307              	 .cfi_def_cfa_register 7
 308 0006 7860     	 str r0,[r7,#4]
1434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 309              	 .loc 3 1435 0
 310 0008 7B68     	 ldr r3,[r7,#4]
 311 000a 0122     	 movs r2,#1
 312 000c DA60     	 str r2,[r3,#12]
1436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 313              	 .loc 3 1436 0
 314 000e 0C37     	 adds r7,r7,#12
 315              	.LCFI33:
 316              	 .cfi_def_cfa_offset 4
 317 0010 BD46     	 mov sp,r7
 318              	.LCFI34:
 319              	 .cfi_def_cfa_register 13
 320              	 
 321 0012 5DF8047B 	 ldr r7,[sp],#4
 322              	.LCFI35:
 323              	 .cfi_restore 7
 324              	 .cfi_def_cfa_offset 0
 325 0016 7047     	 bx lr
 326              	 .cfi_endproc
 327              	.LFE213:
 329              	 .section .text.XMC_CCU4_SLICE_SetTimerPeriodMatch,"ax",%progbits
 330              	 .align 2
 331              	 .thumb
 332              	 .thumb_func
 334              	XMC_CCU4_SLICE_SetTimerPeriodMatch:
 335              	.LFB220:
1437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 336              	 .loc 3 1605 0
 337              	 .cfi_startproc
 338              	 
 339              	 
 340              	 
 341 0000 80B4     	 push {r7}
 342              	.LCFI36:
 343              	 .cfi_def_cfa_offset 4
 344              	 .cfi_offset 7,-4
 345 0002 83B0     	 sub sp,sp,#12
 346              	.LCFI37:
 347              	 .cfi_def_cfa_offset 16
 348 0004 00AF     	 add r7,sp,#0
 349              	.LCFI38:
 350              	 .cfi_def_cfa_register 7
 351 0006 7860     	 str r0,[r7,#4]
 352 0008 0B46     	 mov r3,r1
 353 000a 7B80     	 strh r3,[r7,#2]
1606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
 354              	 .loc 3 1607 0
 355 000c 7A88     	 ldrh r2,[r7,#2]
 356 000e 7B68     	 ldr r3,[r7,#4]
 357 0010 5A63     	 str r2,[r3,#52]
1608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 358              	 .loc 3 1608 0
 359 0012 0C37     	 adds r7,r7,#12
 360              	.LCFI39:
 361              	 .cfi_def_cfa_offset 4
 362 0014 BD46     	 mov sp,r7
 363              	.LCFI40:
 364              	 .cfi_def_cfa_register 13
 365              	 
 366 0016 5DF8047B 	 ldr r7,[sp],#4
 367              	.LCFI41:
 368              	 .cfi_restore 7
 369              	 .cfi_def_cfa_offset 0
 370 001a 7047     	 bx lr
 371              	 .cfi_endproc
 372              	.LFE220:
 374              	 .section .text.XMC_CCU4_SLICE_SetTimerCompareMatch,"ax",%progbits
 375              	 .align 2
 376              	 .thumb
 377              	 .thumb_func
 379              	XMC_CCU4_SLICE_SetTimerCompareMatch:
 380              	.LFB222:
1609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 381              	 .loc 3 1653 0
 382              	 .cfi_startproc
 383              	 
 384              	 
 385              	 
 386 0000 80B4     	 push {r7}
 387              	.LCFI42:
 388              	 .cfi_def_cfa_offset 4
 389              	 .cfi_offset 7,-4
 390 0002 83B0     	 sub sp,sp,#12
 391              	.LCFI43:
 392              	 .cfi_def_cfa_offset 16
 393 0004 00AF     	 add r7,sp,#0
 394              	.LCFI44:
 395              	 .cfi_def_cfa_register 7
 396 0006 7860     	 str r0,[r7,#4]
 397 0008 0B46     	 mov r3,r1
 398 000a 7B80     	 strh r3,[r7,#2]
1654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
 399              	 .loc 3 1655 0
 400 000c 7A88     	 ldrh r2,[r7,#2]
 401 000e 7B68     	 ldr r3,[r7,#4]
 402 0010 DA63     	 str r2,[r3,#60]
1656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 403              	 .loc 3 1656 0
 404 0012 0C37     	 adds r7,r7,#12
 405              	.LCFI45:
 406              	 .cfi_def_cfa_offset 4
 407 0014 BD46     	 mov sp,r7
 408              	.LCFI46:
 409              	 .cfi_def_cfa_register 13
 410              	 
 411 0016 5DF8047B 	 ldr r7,[sp],#4
 412              	.LCFI47:
 413              	 .cfi_restore 7
 414              	 .cfi_def_cfa_offset 0
 415 001a 7047     	 bx lr
 416              	 .cfi_endproc
 417              	.LFE222:
 419              	 .section .text.XMC_CCU4_EnableShadowTransfer,"ax",%progbits
 420              	 .align 2
 421              	 .thumb
 422              	 .thumb_func
 424              	XMC_CCU4_EnableShadowTransfer:
 425              	.LFB224:
1657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 426              	 .loc 3 1707 0
 427              	 .cfi_startproc
 428              	 
 429              	 
 430              	 
 431 0000 80B4     	 push {r7}
 432              	.LCFI48:
 433              	 .cfi_def_cfa_offset 4
 434              	 .cfi_offset 7,-4
 435 0002 83B0     	 sub sp,sp,#12
 436              	.LCFI49:
 437              	 .cfi_def_cfa_offset 16
 438 0004 00AF     	 add r7,sp,#0
 439              	.LCFI50:
 440              	 .cfi_def_cfa_register 7
 441 0006 7860     	 str r0,[r7,#4]
 442 0008 3960     	 str r1,[r7]
1708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
 443              	 .loc 3 1709 0
 444 000a 7B68     	 ldr r3,[r7,#4]
 445 000c 3A68     	 ldr r2,[r7]
 446 000e 1A61     	 str r2,[r3,#16]
1710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 447              	 .loc 3 1710 0
 448 0010 0C37     	 adds r7,r7,#12
 449              	.LCFI51:
 450              	 .cfi_def_cfa_offset 4
 451 0012 BD46     	 mov sp,r7
 452              	.LCFI52:
 453              	 .cfi_def_cfa_register 13
 454              	 
 455 0014 5DF8047B 	 ldr r7,[sp],#4
 456              	.LCFI53:
 457              	 .cfi_restore 7
 458              	 .cfi_def_cfa_offset 0
 459 0018 7047     	 bx lr
 460              	 .cfi_endproc
 461              	.LFE224:
 463 001a 00BF     	 .section .text.XMC_CCU4_SLICE_EnableEvent,"ax",%progbits
 464              	 .align 2
 465              	 .thumb
 466              	 .thumb_func
 468              	XMC_CCU4_SLICE_EnableEvent:
 469              	.LFB234:
1711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer value
1716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest timer value, from CC4yTIMER register.\n\n
1720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerValue().
1723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
1725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->TIMER);
1728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param timer_val The new timer value that has to be loaded into the TIMER register.
1732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Range: [0x0 to 0xFFFF]
1733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Loads a new timer value, by setting CC4yTIMER register.\n\n
1738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Request to load is ignored if the timer is running.
1741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerValue().
1744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerValue(XMC_CCU4_SLICE_t *const slice, const uint16_t tim
1746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TIMER = (uint32_t) timer_val;
1749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_dither Boolean instruction on dithering of period match
1753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param duty_dither Boolean instruction on dithering of compare match
1754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param spread Dither compare value
1755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables dithering of PWM frequency and duty cycle, by configuring CC4yTC.DITHE and CC4yDITS bits
1760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Some control loops are slow in updating PWM frequency and duty cycle. In such a case, a Bresenha
1761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can help reduce long term errors. Dithering can be applied to period and duty individually,
1762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * this can be selected using the parameter \b period_dither and \b duty_dither.
1763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The \b spread would provide the dither compare value. If the dither counter value is less than t
1764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the period/compare values would be dithered according to the dither mode selected. This API woul
1765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetDitherCompareValue().
1766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After this API call, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask
1769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to transfer the dither value.
1770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableDithering().
1773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
1775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool period_dither,
1776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const bool duty_dither,
1777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                     const uint8_t spread);
1778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables dithering of PWM frequency and duty cycle, by clearing CC4yTC.DITHE bits.\n\n
1786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This disables the Dither mode that was set in XMC_CCU4_SLICE_EnableDithering().
1787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will not clear the dither compare value.
1788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableDithering(XMC_CCU4_SLICE_t *const slice)
1793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice))
1795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
1796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the floating prescaler, by setting CC4yTC.FPE bit.\n\n
1805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider starts with an initial value and increments upon every period match. It ke
1806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * until a ceiling (prescaler compare value) is hit and thereafter rolls back to the original presc
1807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have programmed an initial divider value and a compare value before the featu
1808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue()<BR> XMC_CCU4_SLICE_DisableFloatingPrescaler()
1811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_FPE_Msk;
1817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the floating prescaler, by clearing CC4yTC.FPE bit.\n\n
1826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the prescaler to the normal mode.
1827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler that would be applied is the value present in CC4yPSC.
1828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableFloatingPrescaler().
1831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableFloatingPrescaler(XMC_CCU4_SLICE_t *const slice)
1833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableFloatingPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice
1835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_FPE_Msk);
1836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param comp_val Dither compare value
1841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Sets the dither spread/compare value, by setting CC4yDITS.DCVS bits.\n\n
1847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This value is the cornerstone of PWM dithering feature. Dithering is applied/done when the value
1848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * dithering counter is less than this compare/spread value. For all dithering counter values great
1849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the spread value, there is no dithering. After setting the value XMC_CCU4_EnableShadowTransfer()
1850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * called with appropriate mask.
1851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   * \par<b>Related APIs:</b><br>
1853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableDithering().
1854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetDitherCompareValue(XMC_CCU4_SLICE_t *const slice, const uint
1856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetDitherCompareValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
1858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->DITS = comp_val;
1859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param div_val Prescaler divider value
1863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the slice specific prescaler divider, by configuring the CC4yPSC and CC4yFPC registers.
1869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The prescaler divider may only be programmed after the prescaler run bit has been cleared
1870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by calling XMC_CCU4_StopPrescaler().
1871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue().
1874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const uint8_t div_val);
1876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param cmp_val Prescaler divider compare value
1880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                 Range: [0x0 to 0xF]
1881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the slice specific prescaler divider compare value, by configuring CC4yFPCS register.\n
1886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is applicable only in floating mode of operation. The prescaler divider starts
1887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * value and increments to the compare value steadily upon every period match. Once prescaler divid
1888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * equals the prescaler divider compare value, the value in the former resets back to the PVAL (fro
1889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the value, XMC_CCU4_EnableShadowTransfer() has to be called with appropriate mask.
1890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetPrescaler().
1893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue(XMC_CCU4_SLICE_t *const slice,
1895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                      const uint8_t cmp_val)
1896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetFloatingPrescalerCompareValue:Invalid Slice Pointer", XMC_CCU4_IsVa
1898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   /*  write to the shadow register */
1899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->FPCS = (uint32_t) cmp_val;
1900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the multichannel mode, by setting CC4yTC.MCME bit.<BR>\n
1908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The output state of the Timer slices can be controlled in parallel by a single input signal.
1909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature in motor control applications where the PWM output of multiple sli
1910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be gated and ungated by multi-channel gating inputs connected to the slices. A peripheral like P
1911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * motor knows exactly which of the power drive switches are to be turned on and off at any instant
1912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a gating bus (known as multi-channel inputs) control which of the slices output stays gated/unga
1913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultiChannelMode()<BR> XMC_CCU4_SetMultiChannelShadowTransferMode().
1916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableMultiChannelMode(XMC_CCU4_SLICE_t *const slice)
1918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableMultiChannelMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(s
1920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_MCME_Msk;
1921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the multichannel mode, by clearing CC4yTC.MCME bit.<BR>\n
1930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would return the slices to the normal operation mode.
1931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableMultiChannelMode().
1934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableMultiChannelMode(XMC_CCU4_SLICE_t *const slice)
1936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableMultiChannelMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(
1938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_MCME_Msk);
1939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_mode_msk Slices for which the configuration has to be applied.
1944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Use ::XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t enum items to create a mask
1945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             using a bit wise OR operation.
1946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the Multi-channel shadow transfer request trigger signal either by software or hardware 
1951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GCTRL.MSE0, GCTRL.MSE1, GCTRL.MSE2, and GCTRL.MSE3 based on the mask.\n\n
1952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The shadow transfer would take place either if it was requested by software or by the CCU4x.MCSS
1953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** */
1957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t sli
1958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param reg_num The capture register from which the captured value is to be retrieved
1962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                Range: [0,3]
1963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t  Returns the Capture register value.
1965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *              Range: [0 to 0x1FFFFF]
1966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer value which has been captured in the Capture registers, by reading CC4yCV[\b reg
1969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The signal whose timing characteristics are to be measured must be mapped to an event which in t
1970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to the capture function. Based on the capture criteria, the timer values are captured into captu
1971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * characteristics of the input signal may then be derived/inferred from the captured values. The f
1972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * to find out if there is a new captured value present.
1973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetLastCapturedTimerValue().
1976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t 
1978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set  The capture register set, which must be evaluated
1982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param val_ptr Out Parameter of the API.Stores the captured timer value into this out parameter.
1983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     ::XMC_CCU4_STATUS_t Returns XMC_CCU4_STATUS_OK if there was new value present in the capture
1985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   returns XMC_CCU4_STATUS_ERROR if there was no new value present in the capture
1986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the latest captured timer value, by reading CC4yCV registers.\n\n
1989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieve the timer value last stored by the slice. When separate capture events are used,
1990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * users must specify the capture set to evaluate. If single capture event mode is used, all 4 capt
1991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * evaluated.\n
1992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The lowest register is evaluated first followed by the next higher ordered register and this con
1993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * capture registers have been evaluated.
1994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetCaptureRegisterValue().
1997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
1999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                            const XMC_CCU4_SLICE_CAP_REG_SET_t set,
2000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                            uint32_t *val_ptr);
2001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the generation of an interrupt pulse for the event, by configuring CC4yINTE register.\n\
2010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API merely enables the event. Binding with SR is perform
2012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_
2015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
2018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                 const XMC_CCU4_SLICE_IRQ_ID_t event)
2019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 470              	 .loc 3 2019 0
 471              	 .cfi_startproc
 472              	 
 473              	 
 474              	 
 475 0000 80B4     	 push {r7}
 476              	.LCFI54:
 477              	 .cfi_def_cfa_offset 4
 478              	 .cfi_offset 7,-4
 479 0002 83B0     	 sub sp,sp,#12
 480              	.LCFI55:
 481              	 .cfi_def_cfa_offset 16
 482 0004 00AF     	 add r7,sp,#0
 483              	.LCFI56:
 484              	 .cfi_def_cfa_register 7
 485 0006 7860     	 str r0,[r7,#4]
 486 0008 0B46     	 mov r3,r1
 487 000a FB70     	 strb r3,[r7,#3]
2020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 488              	 .loc 3 2022 0
 489 000c 7B68     	 ldr r3,[r7,#4]
 490 000e D3F8A420 	 ldr r2,[r3,#164]
 491 0012 FB78     	 ldrb r3,[r7,#3]
 492 0014 0121     	 movs r1,#1
 493 0016 01FA03F3 	 lsl r3,r1,r3
 494 001a 1A43     	 orrs r2,r2,r3
 495 001c 7B68     	 ldr r3,[r7,#4]
 496 001e C3F8A420 	 str r2,[r3,#164]
2023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 497              	 .loc 3 2023 0
 498 0022 0C37     	 adds r7,r7,#12
 499              	.LCFI57:
 500              	 .cfi_def_cfa_offset 4
 501 0024 BD46     	 mov sp,r7
 502              	.LCFI58:
 503              	 .cfi_def_cfa_register 13
 504              	 
 505 0026 5DF8047B 	 ldr r7,[sp],#4
 506              	.LCFI59:
 507              	 .cfi_restore 7
 508              	 .cfi_def_cfa_offset 0
 509 002a 7047     	 bx lr
 510              	 .cfi_endproc
 511              	.LFE234:
 513              	 .section .text.XMC_CCU4_SLICE_ClearEvent,"ax",%progbits
 514              	 .align 2
 515              	 .thumb
 516              	 .thumb_func
 518              	XMC_CCU4_SLICE_ClearEvent:
 519              	.LFB239:
2024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param intr_mask Event mask such that multiple events can be enabled.
2028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  Use ::XMC_CCU4_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                  using a bit wise OR operation.
2030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the generation of an interrupt pulse for the required events, by configuring CC4yINTE re
2035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API merely enables the events. Binding with SR is perfor
2037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_DisableEv
2040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableMultipleEvents(XMC_CCU4_SLICE_t *const slice, const uint1
2043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableMultipleEvents:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
2045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE |= (uint32_t)intr_mask;
2046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the generation of an interrupt pulse for the event, by clearing CC4yINTE register.\n\n
2056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Prevents the event from being asserted
2057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableMultipleEvents().
2061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableEvent(XMC_CCU4_SLICE_t *const slice,
2063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                  const XMC_CCU4_SLICE_IRQ_ID_t event)
2064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event))
2067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE &= ~(((uint32_t) 1) << ((uint32_t) event));
2068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mask Event mask such that multiple events can be enabled.
2073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Use ::XMC_CCU4_SLICE_MULTI_IRQ_ID_t enum items to create a mask of choice,
2074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             using a bit wise OR operation.
2075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Disables the generation of an interrupt pulse for the required events, by clearing CC4yINTE reg
2080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prevents selected events of the slice from being asserted.
2081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_DisableEvent().
2085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableMultipleEvents(XMC_CCU4_SLICE_t *const slice, const uint
2087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableMultipleEvents:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sl
2089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->INTE &= ~((uint32_t) mask);
2090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Event whose assertion can potentially lead to an interrupt
2095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Manually asserts the requested event, by setting CC4ySWS register.\n\n
2100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * For an event to lead to an interrupt, it must first be enabled and bound to a service request li
2101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * NVIC node must be enabled as well. This API manually asserts the requested event.
2102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_EnableMul
2105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IR
2107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
2108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->SWS |= ((uint32_t) 1) << ((uint32_t) event);
2111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
2112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
2113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
2114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
2115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Asserted event which must be acknowledged.
2116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
2117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
2118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
2120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Acknowledges an asserted event, by setting CC4ySWR with respective event flag.\n\n
2121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
2122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
2123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
2124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
2125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_
2126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 520              	 .loc 3 2126 0
 521              	 .cfi_startproc
 522              	 
 523              	 
 524              	 
 525 0000 80B4     	 push {r7}
 526              	.LCFI60:
 527              	 .cfi_def_cfa_offset 4
 528              	 .cfi_offset 7,-4
 529 0002 83B0     	 sub sp,sp,#12
 530              	.LCFI61:
 531              	 .cfi_def_cfa_offset 16
 532 0004 00AF     	 add r7,sp,#0
 533              	.LCFI62:
 534              	 .cfi_def_cfa_register 7
 535 0006 7860     	 str r0,[r7,#4]
 536 0008 0B46     	 mov r3,r1
 537 000a FB70     	 strb r3,[r7,#3]
2127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
2128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
2129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->SWR |= ((uint32_t) 1) << ((uint32_t) event);
 538              	 .loc 3 2129 0
 539 000c 7B68     	 ldr r3,[r7,#4]
 540 000e D3F8B020 	 ldr r2,[r3,#176]
 541 0012 FB78     	 ldrb r3,[r7,#3]
 542 0014 0121     	 movs r1,#1
 543 0016 01FA03F3 	 lsl r3,r1,r3
 544 001a 1A43     	 orrs r2,r2,r3
 545 001c 7B68     	 ldr r3,[r7,#4]
 546 001e C3F8B020 	 str r2,[r3,#176]
2130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 547              	 .loc 3 2130 0
 548 0022 0C37     	 adds r7,r7,#12
 549              	.LCFI63:
 550              	 .cfi_def_cfa_offset 4
 551 0024 BD46     	 mov sp,r7
 552              	.LCFI64:
 553              	 .cfi_def_cfa_register 13
 554              	 
 555 0026 5DF8047B 	 ldr r7,[sp],#4
 556              	.LCFI65:
 557              	 .cfi_restore 7
 558              	 .cfi_def_cfa_offset 0
 559 002a 7047     	 bx lr
 560              	 .cfi_endproc
 561              	.LFE239:
 563              	 .global position_config
 564              	 .section .data.position_config,"aw",%progbits
 565              	 .align 2
 568              	position_config:
 569 0000 04       	 .byte 4
 570 0001 00       	 .byte 0
 571 0002 00       	 .byte 0
 572 0003 00       	 .byte 0
 573 0004 00       	 .byte 0
 574 0005 00       	 .byte 0
 575 0006 0000     	 .space 2
 576              	 .global position_event0_config
 577              	 .section .data.position_event0_config,"aw",%progbits
 578              	 .align 2
 581              	position_event0_config:
 582 0000 04       	 .byte 4
 583 0001 01       	 .byte 1
 584 0002 01       	 .byte 1
 585 0003 00       	 .byte 0
 586              	 .global position_event1_config
 587              	 .section .data.position_event1_config,"aw",%progbits
 588              	 .align 2
 591              	position_event1_config:
 592 0000 05       	 .byte 5
 593 0001 01       	 .byte 1
 594 0002 00       	 .byte 0
 595 0003 00       	 .byte 0
 596              	 .global revolution_config
 597              	 .section .data.revolution_config,"aw",%progbits
 598              	 .align 2
 601              	revolution_config:
 602 0000 04       	 .byte 4
 603 0001 00       	 .byte 0
 604 0002 00       	 .byte 0
 605 0003 00       	 .byte 0
 606 0004 00       	 .byte 0
 607 0005 00       	 .byte 0
 608 0006 0000     	 .space 2
 609              	 .global revolution_event0_config
 610              	 .section .data.revolution_event0_config,"aw",%progbits
 611              	 .align 2
 614              	revolution_event0_config:
 615 0000 01       	 .byte 1
 616 0001 01       	 .byte 1
 617 0002 00       	 .byte 0
 618 0003 00       	 .byte 0
 619              	 .global revolution_event1_config
 620              	 .section .data.revolution_event1_config,"aw",%progbits
 621              	 .align 2
 624              	revolution_event1_config:
 625 0000 05       	 .byte 5
 626 0001 01       	 .byte 1
 627 0002 01       	 .byte 1
 628 0003 00       	 .byte 0
 629              	 .global tick_config
 630              	 .section .data.tick_config,"aw",%progbits
 631              	 .align 2
 634              	tick_config:
 635 0000 04       	 .byte 4
 636 0001 00       	 .byte 0
 637 0002 00       	 .byte 0
 638 0003 00       	 .byte 0
 639 0004 00       	 .byte 0
 640 0005 00       	 .byte 0
 641 0006 0000     	 .space 2
 642              	 .global tick_event0_config
 643              	 .section .data.tick_event0_config,"aw",%progbits
 644              	 .align 2
 647              	tick_event0_config:
 648 0000 05       	 .byte 5
 649 0001 01       	 .byte 1
 650 0002 00       	 .byte 0
 651 0003 00       	 .byte 0
 652              	 .global tick_event1_config
 653              	 .section .data.tick_event1_config,"aw",%progbits
 654              	 .align 2
 657              	tick_event1_config:
 658 0000 01       	 .byte 1
 659 0001 01       	 .byte 1
 660 0002 00       	 .byte 0
 661 0003 00       	 .byte 0
 662              	 .global capture_config
 663              	 .section .data.capture_config,"aw",%progbits
 664              	 .align 2
 667              	capture_config:
 668 0000 60       	 .byte 96
 669 0001 00       	 .byte 0
 670 0002 00       	 .byte 0
 671 0003 00       	 .space 1
 672 0004 06       	 .byte 6
 673 0005 00       	 .byte 0
 674 0006 0000     	 .space 2
 675              	 .global capture_event0_config
 676              	 .section .data.capture_event0_config,"aw",%progbits
 677              	 .align 2
 680              	capture_event0_config:
 681 0000 05       	 .byte 5
 682 0001 01       	 .byte 1
 683 0002 00       	 .byte 0
 684 0003 00       	 .byte 0
 685              	 .global capture_event1_config
 686              	 .section .data.capture_event1_config,"aw",%progbits
 687              	 .align 2
 690              	capture_event1_config:
 691 0000 0E       	 .byte 14
 692 0001 01       	 .byte 1
 693 0002 00       	 .byte 0
 694 0003 00       	 .byte 0
 695              	 .global capture_event2_config
 696              	 .section .data.capture_event2_config,"aw",%progbits
 697              	 .align 2
 700              	capture_event2_config:
 701 0000 0E       	 .byte 14
 702 0001 02       	 .byte 2
 703 0002 00       	 .byte 0
 704 0003 00       	 .byte 0
 705              	 .global posif_config
 706              	 .section .data.posif_config,"aw",%progbits
 707              	 .align 2
 710              	posif_config:
 711 0000 01       	 .byte 1
 712 0001 15       	 .byte 21
 713 0002 00       	 .space 1
 714 0003 00       	 .byte 0
 715              	 .global posif_qd_config
 716              	 .section .bss.posif_qd_config,"aw",%nobits
 717              	 .align 2
 720              	posif_qd_config:
 721 0000 00000000 	 .space 8
 721      00000000 
 722              	 .global posif_encoder_port_config
 723              	 .section .data.posif_encoder_port_config,"aw",%progbits
 724              	 .align 2
 727              	posif_encoder_port_config:
 728 0000 80       	 .byte -128
 729 0001 000000   	 .space 3
 730 0004 01000000 	 .word 1
 731 0008 00       	 .byte 0
 732 0009 000000   	 .space 3
 733              	 .global posif_encoder_inputport_config
 734              	 .section .data.posif_encoder_inputport_config,"aw",%progbits
 735              	 .align 2
 738              	posif_encoder_inputport_config:
 739 0000 10       	 .byte 16
 740 0001 000000   	 .space 3
 741 0004 01000000 	 .word 1
 742 0008 00       	 .byte 0
 743 0009 000000   	 .space 3
 744              	 .section .text.Sensor_QD_InitCCU,"ax",%progbits
 745              	 .align 2
 746              	 .global Sensor_QD_InitCCU
 747              	 .thumb
 748              	 .thumb_func
 750              	Sensor_QD_InitCCU:
 751              	.LFB241:
 752              	 .file 4 "../sensor/Sensor_QuadratureDecoder.c"
   1:../sensor/Sensor_QuadratureDecoder.c **** /*
   2:../sensor/Sensor_QuadratureDecoder.c ****  * Sensor_QuadratureDecoder.c
   3:../sensor/Sensor_QuadratureDecoder.c ****  *
   4:../sensor/Sensor_QuadratureDecoder.c ****  *  Created on: Dec 11, 2016
   5:../sensor/Sensor_QuadratureDecoder.c ****  *      Author: Andreas Lackner
   6:../sensor/Sensor_QuadratureDecoder.c ****  */
   7:../sensor/Sensor_QuadratureDecoder.c **** 
   8:../sensor/Sensor_QuadratureDecoder.c **** /*********************************************************************************
   9:../sensor/Sensor_QuadratureDecoder.c ****  * Includes
  10:../sensor/Sensor_QuadratureDecoder.c ****  *********************************************************************************/
  11:../sensor/Sensor_QuadratureDecoder.c **** 
  12:../sensor/Sensor_QuadratureDecoder.c **** #include <xmc_posif.h>
  13:../sensor/Sensor_QuadratureDecoder.c **** #include <xmc_gpio.h>
  14:../sensor/Sensor_QuadratureDecoder.c **** #include <xmc_ccu4.h>
  15:../sensor/Sensor_QuadratureDecoder.c **** 
  16:../sensor/Sensor_QuadratureDecoder.c **** /*********************************************************************************
  17:../sensor/Sensor_QuadratureDecoder.c ****  * Local macros
  18:../sensor/Sensor_QuadratureDecoder.c ****  *********************************************************************************/
  19:../sensor/Sensor_QuadratureDecoder.c **** 
  20:../sensor/Sensor_QuadratureDecoder.c **** #define POSIF_PTR	POSIF1
  21:../sensor/Sensor_QuadratureDecoder.c **** 
  22:../sensor/Sensor_QuadratureDecoder.c **** #define CCU_PTR		CCU40
  23:../sensor/Sensor_QuadratureDecoder.c **** #define CCU_NUMBER 	(0U)
  24:../sensor/Sensor_QuadratureDecoder.c **** 
  25:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE0_PTR 		CCU41_CC40
  26:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE0_NUMBER 	(0U)
  27:../sensor/Sensor_QuadratureDecoder.c **** 
  28:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE1_PTR 		CCU41_CC41
  29:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE1_NUMBER 	(1U)
  30:../sensor/Sensor_QuadratureDecoder.c **** 
  31:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE2_PTR 		CCU41_CC42
  32:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE2_NUMBER 	(2U)
  33:../sensor/Sensor_QuadratureDecoder.c **** 
  34:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE3_PTR 		CCU41_CC43
  35:../sensor/Sensor_QuadratureDecoder.c **** #define SLICE3_NUMBER 	(3U)
  36:../sensor/Sensor_QuadratureDecoder.c **** 
  37:../sensor/Sensor_QuadratureDecoder.c **** #define QD_INDEX	P3_8
  38:../sensor/Sensor_QuadratureDecoder.c **** #define QD_A		P3_10
  39:../sensor/Sensor_QuadratureDecoder.c **** #define QD_B		P3_9
  40:../sensor/Sensor_QuadratureDecoder.c **** 
  41:../sensor/Sensor_QuadratureDecoder.c **** /*********************************************************************************
  42:../sensor/Sensor_QuadratureDecoder.c ****  * Local data
  43:../sensor/Sensor_QuadratureDecoder.c ****  *********************************************************************************/
  44:../sensor/Sensor_QuadratureDecoder.c **** 
  45:../sensor/Sensor_QuadratureDecoder.c **** /************************* CCU Configuration **********************************/
  46:../sensor/Sensor_QuadratureDecoder.c **** 
  47:../sensor/Sensor_QuadratureDecoder.c **** /* CCU4 Configuration for Position Count */
  48:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_COMPARE_CONFIG_t position_config =
  49:../sensor/Sensor_QuadratureDecoder.c **** {
  50:../sensor/Sensor_QuadratureDecoder.c **** 		  .timer_mode          = XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA,
  51:../sensor/Sensor_QuadratureDecoder.c **** 		  .monoshot            = 0U,
  52:../sensor/Sensor_QuadratureDecoder.c **** 		  .shadow_xfer_clear   = 1U,
  53:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_timer_period = 0U,
  54:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_duty_cycle   = 0U,
  55:../sensor/Sensor_QuadratureDecoder.c **** 		  .prescaler_mode      = (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL,
  56:../sensor/Sensor_QuadratureDecoder.c **** 		  .mcm_enable          = 0U,
  57:../sensor/Sensor_QuadratureDecoder.c **** 		  .prescaler_initval   = 0U,
  58:../sensor/Sensor_QuadratureDecoder.c **** 		  .float_limit         = 0U,
  59:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_limit        = 0U,
  60:../sensor/Sensor_QuadratureDecoder.c **** 		  .passive_level       = (uint32_t)XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW,
  61:../sensor/Sensor_QuadratureDecoder.c **** 		  .timer_concatenation = 0U
  62:../sensor/Sensor_QuadratureDecoder.c **** };
  63:../sensor/Sensor_QuadratureDecoder.c **** 
  64:../sensor/Sensor_QuadratureDecoder.c **** /* Event 0: Counts up on rising edge of POSIF0.OUT0 (Quadrature Clock) */
  65:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t position_event0_config =
  66:../sensor/Sensor_QuadratureDecoder.c **** {
  67:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_E, /* mapped to POSIF0.OUT0 - POSITION tick */
  68:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
  69:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH,
  70:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
  71:../sensor/Sensor_QuadratureDecoder.c **** };
  72:../sensor/Sensor_QuadratureDecoder.c **** 
  73:../sensor/Sensor_QuadratureDecoder.c **** /* Event 1: Count direction of POSIF0.OUT1 (Quadrature Direction)
  74:../sensor/Sensor_QuadratureDecoder.c ****  * OUT1 signal is asserted high when motor is rotating clockwise */
  75:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t position_event1_config=
  76:../sensor/Sensor_QuadratureDecoder.c **** {
  77:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_F, /* mapped to POSIF0.OUT1 - Direction */
  78:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
  79:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
  80:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
  81:../sensor/Sensor_QuadratureDecoder.c **** };
  82:../sensor/Sensor_QuadratureDecoder.c **** 
  83:../sensor/Sensor_QuadratureDecoder.c **** /* Configuration for Revolution Count */
  84:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_COMPARE_CONFIG_t revolution_config =
  85:../sensor/Sensor_QuadratureDecoder.c **** {
  86:../sensor/Sensor_QuadratureDecoder.c **** 		  .timer_mode          = XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA,
  87:../sensor/Sensor_QuadratureDecoder.c **** 		  .monoshot            = 0U,
  88:../sensor/Sensor_QuadratureDecoder.c **** 		  .shadow_xfer_clear   = 1U,
  89:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_timer_period = 0U,
  90:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_duty_cycle   = 0U,
  91:../sensor/Sensor_QuadratureDecoder.c **** 		  .prescaler_mode      = (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL,
  92:../sensor/Sensor_QuadratureDecoder.c **** 		  .mcm_enable          = 0U,
  93:../sensor/Sensor_QuadratureDecoder.c **** 		  .prescaler_initval   = 0U,
  94:../sensor/Sensor_QuadratureDecoder.c **** 		  .float_limit         = 0U,
  95:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_limit        = 0U,
  96:../sensor/Sensor_QuadratureDecoder.c **** 		  .passive_level       = (uint32_t)XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW,
  97:../sensor/Sensor_QuadratureDecoder.c **** 		  .timer_concatenation = 0U
  98:../sensor/Sensor_QuadratureDecoder.c **** };
  99:../sensor/Sensor_QuadratureDecoder.c **** 
 100:../sensor/Sensor_QuadratureDecoder.c **** 
 101:../sensor/Sensor_QuadratureDecoder.c **** /* Event 0: Counts up on rising edge of Index signal direct from Encoder */
 102:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t revolution_event0_config=
 103:../sensor/Sensor_QuadratureDecoder.c **** {
 104:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_B, /* mapped to index input P14.5 to P2.8 */
 105:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 106:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 107:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 108:../sensor/Sensor_QuadratureDecoder.c **** };
 109:../sensor/Sensor_QuadratureDecoder.c **** 
 110:../sensor/Sensor_QuadratureDecoder.c **** /* Event 1: Count direction of POSIF0.OUT1 (Quadrature Direction)
 111:../sensor/Sensor_QuadratureDecoder.c ****  * OUT1 signal is asserted high when motor is rotating clockwise */
 112:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t revolution_event1_config=
 113:../sensor/Sensor_QuadratureDecoder.c **** {
 114:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_F, /* mapped to POSIF0.OUT1 - Direction  */
 115:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 116:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH,
 117:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 118:../sensor/Sensor_QuadratureDecoder.c **** };
 119:../sensor/Sensor_QuadratureDecoder.c **** 
 120:../sensor/Sensor_QuadratureDecoder.c **** /* Configuration for tick Count */
 121:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_COMPARE_CONFIG_t tick_config =
 122:../sensor/Sensor_QuadratureDecoder.c **** {
 123:../sensor/Sensor_QuadratureDecoder.c **** 		  .timer_mode          = XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA,
 124:../sensor/Sensor_QuadratureDecoder.c **** 		  .monoshot            = 0U,
 125:../sensor/Sensor_QuadratureDecoder.c **** 		  .shadow_xfer_clear   = 1U,
 126:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_timer_period = 0U,
 127:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_duty_cycle   = 0U,
 128:../sensor/Sensor_QuadratureDecoder.c **** 		  .prescaler_mode      = (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL,
 129:../sensor/Sensor_QuadratureDecoder.c **** 		  .mcm_enable          = 0U,
 130:../sensor/Sensor_QuadratureDecoder.c **** 		  .prescaler_initval   = 0U,
 131:../sensor/Sensor_QuadratureDecoder.c **** 		  .float_limit         = 0U,
 132:../sensor/Sensor_QuadratureDecoder.c **** 		  .dither_limit        = 0U,
 133:../sensor/Sensor_QuadratureDecoder.c **** 		  .passive_level       = (uint32_t)XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW,
 134:../sensor/Sensor_QuadratureDecoder.c **** 		  .timer_concatenation = 0U
 135:../sensor/Sensor_QuadratureDecoder.c **** };
 136:../sensor/Sensor_QuadratureDecoder.c **** 
 137:../sensor/Sensor_QuadratureDecoder.c **** /* Event 0: Counts up on rising edge of POSIF0.OUT2 (Period Clock) */
 138:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t tick_event0_config=
 139:../sensor/Sensor_QuadratureDecoder.c **** {
 140:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_F, /* mapped to POSIF0.OUT2 - Period Clock  */
 141:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 142:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 143:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 144:../sensor/Sensor_QuadratureDecoder.c **** };
 145:../sensor/Sensor_QuadratureDecoder.c **** 
 146:../sensor/Sensor_QuadratureDecoder.c **** /* As the motor encoder produces an index signal that is less than 1/2 tick period,
 147:../sensor/Sensor_QuadratureDecoder.c ****  * the index is connected directly to the CCU4 module for this example.
 148:../sensor/Sensor_QuadratureDecoder.c ****  *
 149:../sensor/Sensor_QuadratureDecoder.c ****  * Since a board connection is not directly available on the General Purpose Motor
 150:../sensor/Sensor_QuadratureDecoder.c ****  * Drive Card, we need to connect P14.5 (index signal) to P2.8 (CCU40.41 event0 input)
 151:../sensor/Sensor_QuadratureDecoder.c ****  *
 152:../sensor/Sensor_QuadratureDecoder.c ****  * Event 1: Counts up on rising edge of Index signal direct from Encoder */
 153:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t tick_event1_config=
 154:../sensor/Sensor_QuadratureDecoder.c **** {
 155:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_B, /* mapped to index input P14.5 to P2.8 */
 156:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 157:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 158:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 159:../sensor/Sensor_QuadratureDecoder.c **** };
 160:../sensor/Sensor_QuadratureDecoder.c **** 
 161:../sensor/Sensor_QuadratureDecoder.c **** /* Configuration for capture count */
 162:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_CAPTURE_CONFIG_t capture_config =
 163:../sensor/Sensor_QuadratureDecoder.c **** {
 164:../sensor/Sensor_QuadratureDecoder.c **** 	.fifo_enable = false,
 165:../sensor/Sensor_QuadratureDecoder.c **** 	.timer_clear_mode = XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS,
 166:../sensor/Sensor_QuadratureDecoder.c **** 	.same_event = false,
 167:../sensor/Sensor_QuadratureDecoder.c **** 	.ignore_full_flag = false,
 168:../sensor/Sensor_QuadratureDecoder.c **** 	.prescaler_mode = XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL,
 169:../sensor/Sensor_QuadratureDecoder.c **** 	.prescaler_initval = (uint32_t) 6,		/* set the prescaler to 6; ccu4 resolution = 530ns */
 170:../sensor/Sensor_QuadratureDecoder.c **** 	.float_limit = (uint32_t) 0,
 171:../sensor/Sensor_QuadratureDecoder.c **** 	.timer_concatenation = (uint32_t) 0
 172:../sensor/Sensor_QuadratureDecoder.c **** };
 173:../sensor/Sensor_QuadratureDecoder.c **** 
 174:../sensor/Sensor_QuadratureDecoder.c **** /* Event 0: Start the slice on rising edge of POSIF0.OUT5 (Sync Start)  */
 175:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t capture_event0_config =
 176:../sensor/Sensor_QuadratureDecoder.c **** {
 177:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_F, 	/* POSIF0.OUT5 - SYNC Start  */
 178:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 179:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 180:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 181:../sensor/Sensor_QuadratureDecoder.c **** };
 182:../sensor/Sensor_QuadratureDecoder.c **** 
 183:../sensor/Sensor_QuadratureDecoder.c **** /* Event 1: Capture on rising edge of CCU40.ST2 */
 184:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t capture_event1_config =
 185:../sensor/Sensor_QuadratureDecoder.c **** {
 186:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_O, 		/* CAPTURE on CCU40.ST2 rising edge */
 187:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 188:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 189:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 190:../sensor/Sensor_QuadratureDecoder.c **** };
 191:../sensor/Sensor_QuadratureDecoder.c **** 
 192:../sensor/Sensor_QuadratureDecoder.c **** /* Event 2: Capture on falling edge of CCU40.ST2 */
 193:../sensor/Sensor_QuadratureDecoder.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t capture_event2_config =
 194:../sensor/Sensor_QuadratureDecoder.c **** {
 195:../sensor/Sensor_QuadratureDecoder.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_O, 		/* CAPTURE on CCU40.ST2 falling edge */
 196:../sensor/Sensor_QuadratureDecoder.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE,
 197:../sensor/Sensor_QuadratureDecoder.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 198:../sensor/Sensor_QuadratureDecoder.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 199:../sensor/Sensor_QuadratureDecoder.c **** };
 200:../sensor/Sensor_QuadratureDecoder.c **** 
 201:../sensor/Sensor_QuadratureDecoder.c **** /************************* POSIF Configuration **********************************/
 202:../sensor/Sensor_QuadratureDecoder.c **** 
 203:../sensor/Sensor_QuadratureDecoder.c **** XMC_POSIF_CONFIG_t posif_config =
 204:../sensor/Sensor_QuadratureDecoder.c **** {
 205:../sensor/Sensor_QuadratureDecoder.c ****    .mode   = XMC_POSIF_MODE_QD,    		/**< POSIF Operational mode */
 206:../sensor/Sensor_QuadratureDecoder.c ****    .input0 = XMC_POSIF_INPUT_PORT_B,    /**< Choice of input for Input-1 */
 207:../sensor/Sensor_QuadratureDecoder.c ****    .input1 = XMC_POSIF_INPUT_PORT_B,    /**< Choice of input for Input-2 */
 208:../sensor/Sensor_QuadratureDecoder.c ****    .input2 = XMC_POSIF_INPUT_PORT_B,   	/**< Choice of input for Input-3 */
 209:../sensor/Sensor_QuadratureDecoder.c ****    .filter = XMC_POSIF_FILTER_DISABLED, /**< Input filter configuration */
 210:../sensor/Sensor_QuadratureDecoder.c **** };
 211:../sensor/Sensor_QuadratureDecoder.c **** 
 212:../sensor/Sensor_QuadratureDecoder.c **** /* Defines POSIF quadrature decoder initialization data structure. */
 213:../sensor/Sensor_QuadratureDecoder.c **** XMC_POSIF_QD_CONFIG_t posif_qd_config =
 214:../sensor/Sensor_QuadratureDecoder.c **** {
 215:../sensor/Sensor_QuadratureDecoder.c ****   .mode                = (XMC_POSIF_QD_MODE_t)0,
 216:../sensor/Sensor_QuadratureDecoder.c ****   .phase_a             = 0U,	/* Phase A is active High */
 217:../sensor/Sensor_QuadratureDecoder.c ****   .phase_b             = 0U,	/* Phase B is active High */
 218:../sensor/Sensor_QuadratureDecoder.c ****   .phase_leader        = 0U,	/* Phase A is the leading signal for clockwise rotation */
 219:../sensor/Sensor_QuadratureDecoder.c ****   .index               = 0U		/* No index marker generation on POSIF0.OUT3 */
 220:../sensor/Sensor_QuadratureDecoder.c **** };
 221:../sensor/Sensor_QuadratureDecoder.c **** 
 222:../sensor/Sensor_QuadratureDecoder.c **** /* GPIO Init handle for inverter enable Pin */
 223:../sensor/Sensor_QuadratureDecoder.c **** XMC_GPIO_CONFIG_t posif_encoder_port_config =
 224:../sensor/Sensor_QuadratureDecoder.c **** {
 225:../sensor/Sensor_QuadratureDecoder.c ****   .mode             = XMC_GPIO_MODE_OUTPUT_PUSH_PULL,
 226:../sensor/Sensor_QuadratureDecoder.c ****   .output_level     = XMC_GPIO_OUTPUT_LEVEL_HIGH,
 227:../sensor/Sensor_QuadratureDecoder.c ****   .output_strength  = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE,
 228:../sensor/Sensor_QuadratureDecoder.c **** };
 229:../sensor/Sensor_QuadratureDecoder.c **** 
 230:../sensor/Sensor_QuadratureDecoder.c **** /* GPIO Init handle for input Pin */
 231:../sensor/Sensor_QuadratureDecoder.c **** /* Port 14 digital pad input is disabled by default, this is to enable the digital pad input */
 232:../sensor/Sensor_QuadratureDecoder.c **** XMC_GPIO_CONFIG_t posif_encoder_inputport_config =
 233:../sensor/Sensor_QuadratureDecoder.c **** {
 234:../sensor/Sensor_QuadratureDecoder.c ****   .mode             = XMC_GPIO_MODE_INPUT_PULL_UP,
 235:../sensor/Sensor_QuadratureDecoder.c ****   .output_level     = XMC_GPIO_OUTPUT_LEVEL_HIGH,
 236:../sensor/Sensor_QuadratureDecoder.c ****   .output_strength  = XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE,
 237:../sensor/Sensor_QuadratureDecoder.c **** };
 238:../sensor/Sensor_QuadratureDecoder.c **** 
 239:../sensor/Sensor_QuadratureDecoder.c **** /*********************************************************************************
 240:../sensor/Sensor_QuadratureDecoder.c ****  * Local function prototypes
 241:../sensor/Sensor_QuadratureDecoder.c ****  *********************************************************************************/
 242:../sensor/Sensor_QuadratureDecoder.c **** 
 243:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_InitCCU();
 244:../sensor/Sensor_QuadratureDecoder.c **** 
 245:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_InitPosif();
 246:../sensor/Sensor_QuadratureDecoder.c **** 
 247:../sensor/Sensor_QuadratureDecoder.c **** /*********************************************************************************
 248:../sensor/Sensor_QuadratureDecoder.c ****  * Local function definitions
 249:../sensor/Sensor_QuadratureDecoder.c ****  *********************************************************************************/
 250:../sensor/Sensor_QuadratureDecoder.c **** 
 251:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_InitCCU()
 252:../sensor/Sensor_QuadratureDecoder.c **** {
 753              	 .loc 4 252 0
 754              	 .cfi_startproc
 755              	 
 756              	 
 757 0000 80B5     	 push {r7,lr}
 758              	.LCFI66:
 759              	 .cfi_def_cfa_offset 8
 760              	 .cfi_offset 7,-8
 761              	 .cfi_offset 14,-4
 762 0002 00AF     	 add r7,sp,#0
 763              	.LCFI67:
 764              	 .cfi_def_cfa_register 7
 253:../sensor/Sensor_QuadratureDecoder.c **** 	/* Enable clock, enable prescaler block and configure global control */
 254:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_Init(CCU_PTR, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 765              	 .loc 4 254 0
 766 0004 5648     	 ldr r0,.L19
 767 0006 0021     	 movs r1,#0
 768 0008 FFF7FEFF 	 bl XMC_CCU4_Init
 255:../sensor/Sensor_QuadratureDecoder.c **** 
 256:../sensor/Sensor_QuadratureDecoder.c **** 	/* Start the prescaler and restore clocks to slices */
 257:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_StartPrescaler(CCU_PTR);
 769              	 .loc 4 257 0
 770 000c 5448     	 ldr r0,.L19
 771 000e FFF7FEFF 	 bl XMC_CCU4_StartPrescaler
 258:../sensor/Sensor_QuadratureDecoder.c **** 
 259:../sensor/Sensor_QuadratureDecoder.c **** 	/* Start of CCU4 configurations */
 260:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SetModuleClock(CCU_PTR, XMC_CCU4_CLOCK_SCU);
 772              	 .loc 4 260 0
 773 0012 5348     	 ldr r0,.L19
 774 0014 0021     	 movs r1,#0
 775 0016 FFF7FEFF 	 bl XMC_CCU4_SetModuleClock
 261:../sensor/Sensor_QuadratureDecoder.c **** 
 262:../sensor/Sensor_QuadratureDecoder.c **** 	/* Initialize the Slice */
 263:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CompareInit(SLICE0_PTR, &position_config);
 776              	 .loc 4 263 0
 777 001a 5248     	 ldr r0,.L19+4
 778 001c 5249     	 ldr r1,.L19+8
 779 001e FFF7FEFF 	 bl XMC_CCU4_SLICE_CompareInit
 264:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CompareInit(SLICE1_PTR, &revolution_config);
 780              	 .loc 4 264 0
 781 0022 5248     	 ldr r0,.L19+12
 782 0024 5249     	 ldr r1,.L19+16
 783 0026 FFF7FEFF 	 bl XMC_CCU4_SLICE_CompareInit
 265:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CompareInit(SLICE2_PTR, &tick_config);
 784              	 .loc 4 265 0
 785 002a 5248     	 ldr r0,.L19+20
 786 002c 5249     	 ldr r1,.L19+24
 787 002e FFF7FEFF 	 bl XMC_CCU4_SLICE_CompareInit
 266:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CaptureInit(SLICE3_PTR, &capture_config);
 788              	 .loc 4 266 0
 789 0032 5248     	 ldr r0,.L19+28
 790 0034 5249     	 ldr r1,.L19+32
 791 0036 FFF7FEFF 	 bl XMC_CCU4_SLICE_CaptureInit
 267:../sensor/Sensor_QuadratureDecoder.c **** 
 268:../sensor/Sensor_QuadratureDecoder.c **** 	/* Program the compare register */
 269:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE0_PTR,1000U);
 792              	 .loc 4 269 0
 793 003a 4A48     	 ldr r0,.L19+4
 794 003c 4FF47A71 	 mov r1,#1000
 795 0040 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 270:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE0_PTR, 3000U);
 796              	 .loc 4 270 0
 797 0044 4748     	 ldr r0,.L19+4
 798 0046 40F6B831 	 movw r1,#3000
 799 004a FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 271:../sensor/Sensor_QuadratureDecoder.c **** 
 272:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE1_PTR,1000U);
 800              	 .loc 4 272 0
 801 004e 4748     	 ldr r0,.L19+12
 802 0050 4FF47A71 	 mov r1,#1000
 803 0054 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 273:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE1_PTR, 2000U);
 804              	 .loc 4 273 0
 805 0058 4448     	 ldr r0,.L19+12
 806 005a 4FF4FA61 	 mov r1,#2000
 807 005e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 274:../sensor/Sensor_QuadratureDecoder.c **** 
 275:../sensor/Sensor_QuadratureDecoder.c **** 	/* This defined the trigger for the capture. In this example,
 276:../sensor/Sensor_QuadratureDecoder.c **** 	 * a captured event is taken for every 5 ticks of period clock.  */
 277:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetTimerCompareMatch(SLICE2_PTR,5U);
 808              	 .loc 4 277 0
 809 0062 4448     	 ldr r0,.L19+20
 810 0064 0521     	 movs r1,#5
 811 0066 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 278:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetTimerPeriodMatch(SLICE2_PTR, 9U);
 812              	 .loc 4 278 0
 813 006a 4248     	 ldr r0,.L19+20
 814 006c 0921     	 movs r1,#9
 815 006e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 279:../sensor/Sensor_QuadratureDecoder.c **** 
 280:../sensor/Sensor_QuadratureDecoder.c **** 	/* Enable shadow transfer */
 281:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableShadowTransfer(CCU_PTR, \
 816              	 .loc 4 281 0
 817 0072 3B48     	 ldr r0,.L19
 818 0074 0521     	 movs r1,#5
 819 0076 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 282:../sensor/Sensor_QuadratureDecoder.c **** 			(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0| \
 283:../sensor/Sensor_QuadratureDecoder.c **** 					   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0));
 284:../sensor/Sensor_QuadratureDecoder.c **** 
 285:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableShadowTransfer(CCU_PTR, \
 820              	 .loc 4 285 0
 821 007a 3948     	 ldr r0,.L19
 822 007c 5021     	 movs r1,#80
 823 007e FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 286:../sensor/Sensor_QuadratureDecoder.c **** 			(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_1| \
 287:../sensor/Sensor_QuadratureDecoder.c **** 					   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1));
 288:../sensor/Sensor_QuadratureDecoder.c **** 
 289:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableShadowTransfer(CCU_PTR, \
 824              	 .loc 4 289 0
 825 0082 3748     	 ldr r0,.L19
 826 0084 4FF4A061 	 mov r1,#1280
 827 0088 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 290:../sensor/Sensor_QuadratureDecoder.c **** 			(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_2| \
 291:../sensor/Sensor_QuadratureDecoder.c **** 					   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2));
 292:../sensor/Sensor_QuadratureDecoder.c **** 
 293:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableShadowTransfer(CCU_PTR, \
 828              	 .loc 4 293 0
 829 008c 3448     	 ldr r0,.L19
 830 008e 4FF4A041 	 mov r1,#20480
 831 0092 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 294:../sensor/Sensor_QuadratureDecoder.c **** 				(uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_3| \
 295:../sensor/Sensor_QuadratureDecoder.c **** 						 XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3));
 296:../sensor/Sensor_QuadratureDecoder.c **** 
 297:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC40 event0 - Count on rising edge of Quadrature Clock (POSIF0.OUT0) */
 298:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CountConfig(SLICE0_PTR, XMC_CCU4_SLICE_EVENT_0);
 832              	 .loc 4 298 0
 833 0096 3348     	 ldr r0,.L19+4
 834 0098 0121     	 movs r1,#1
 835 009a FFF7FEFF 	 bl XMC_CCU4_SLICE_CountConfig
 299:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE0_PTR, XMC_CCU4_SLICE_EVENT_0, &position_event0_config);
 836              	 .loc 4 299 0
 837 009e 3148     	 ldr r0,.L19+4
 838 00a0 0121     	 movs r1,#1
 839 00a2 384A     	 ldr r2,.L19+36
 840 00a4 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 300:../sensor/Sensor_QuadratureDecoder.c **** 
 301:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC40 event1 - Set up count direction on (POSIF0.OUT1) */
 302:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_DirectionConfig(SLICE0_PTR, XMC_CCU4_SLICE_EVENT_1);
 841              	 .loc 4 302 0
 842 00a8 2E48     	 ldr r0,.L19+4
 843 00aa 0221     	 movs r1,#2
 844 00ac FFF7FEFF 	 bl XMC_CCU4_SLICE_DirectionConfig
 303:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE0_PTR, XMC_CCU4_SLICE_EVENT_1, &position_event1_config);
 845              	 .loc 4 303 0
 846 00b0 2C48     	 ldr r0,.L19+4
 847 00b2 0221     	 movs r1,#2
 848 00b4 344A     	 ldr r2,.L19+40
 849 00b6 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 304:../sensor/Sensor_QuadratureDecoder.c **** 
 305:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC41 event0 - Count on rising edge of POSIF index signal */
 306:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CountConfig(SLICE1_PTR, XMC_CCU4_SLICE_EVENT_0);
 850              	 .loc 4 306 0
 851 00ba 2C48     	 ldr r0,.L19+12
 852 00bc 0121     	 movs r1,#1
 853 00be FFF7FEFF 	 bl XMC_CCU4_SLICE_CountConfig
 307:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE1_PTR, XMC_CCU4_SLICE_EVENT_0, &revolution_event0_config);
 854              	 .loc 4 307 0
 855 00c2 2A48     	 ldr r0,.L19+12
 856 00c4 0121     	 movs r1,#1
 857 00c6 314A     	 ldr r2,.L19+44
 858 00c8 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 308:../sensor/Sensor_QuadratureDecoder.c **** 
 309:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC41 event1 - Set up count direction on (POSIF0.OUT1) */
 310:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_DirectionConfig(SLICE1_PTR, XMC_CCU4_SLICE_EVENT_1);
 859              	 .loc 4 310 0
 860 00cc 2748     	 ldr r0,.L19+12
 861 00ce 0221     	 movs r1,#2
 862 00d0 FFF7FEFF 	 bl XMC_CCU4_SLICE_DirectionConfig
 311:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE1_PTR, XMC_CCU4_SLICE_EVENT_1, &revolution_event1_config);
 863              	 .loc 4 311 0
 864 00d4 2548     	 ldr r0,.L19+12
 865 00d6 0221     	 movs r1,#2
 866 00d8 2D4A     	 ldr r2,.L19+48
 867 00da FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 312:../sensor/Sensor_QuadratureDecoder.c **** 
 313:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC42 event0 - Count on rising edge of Period Clock (POSIF0.OUT2) */
 314:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_CountConfig(SLICE2_PTR, XMC_CCU4_SLICE_EVENT_0);
 868              	 .loc 4 314 0
 869 00de 2548     	 ldr r0,.L19+20
 870 00e0 0121     	 movs r1,#1
 871 00e2 FFF7FEFF 	 bl XMC_CCU4_SLICE_CountConfig
 315:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE2_PTR, XMC_CCU4_SLICE_EVENT_0, &tick_event0_config);
 872              	 .loc 4 315 0
 873 00e6 2348     	 ldr r0,.L19+20
 874 00e8 0121     	 movs r1,#1
 875 00ea 2A4A     	 ldr r2,.L19+52
 876 00ec FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 316:../sensor/Sensor_QuadratureDecoder.c **** 
 317:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC42 event1 - Set up external flush and start on POSIF index signal */
 318:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_StartConfig(SLICE2_PTR, XMC_CCU4_SLICE_EVENT_1, XMC_CCU4_SLICE_START_MODE_TIMER_STA
 877              	 .loc 4 318 0
 878 00f0 2048     	 ldr r0,.L19+20
 879 00f2 0221     	 movs r1,#2
 880 00f4 0122     	 movs r2,#1
 881 00f6 FFF7FEFF 	 bl XMC_CCU4_SLICE_StartConfig
 319:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE2_PTR, XMC_CCU4_SLICE_EVENT_1, &tick_event1_config);
 882              	 .loc 4 319 0
 883 00fa 1E48     	 ldr r0,.L19+20
 884 00fc 0221     	 movs r1,#2
 885 00fe 264A     	 ldr r2,.L19+56
 886 0100 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 320:../sensor/Sensor_QuadratureDecoder.c **** 
 321:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC43 event0 - Set up external start on POSIF0.OUT5 (Sync Start) */
 322:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_StartConfig(SLICE3_PTR, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIMER_STA
 887              	 .loc 4 322 0
 888 0104 1D48     	 ldr r0,.L19+28
 889 0106 0121     	 movs r1,#1
 890 0108 0122     	 movs r2,#1
 891 010a FFF7FEFF 	 bl XMC_CCU4_SLICE_StartConfig
 323:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE3_PTR, XMC_CCU4_SLICE_EVENT_0, &capture_event0_config);
 892              	 .loc 4 323 0
 893 010e 1B48     	 ldr r0,.L19+28
 894 0110 0121     	 movs r1,#1
 895 0112 224A     	 ldr r2,.L19+60
 896 0114 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 324:../sensor/Sensor_QuadratureDecoder.c **** 
 325:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC43 event1 - Set up capture event on rising edge of CCU40.ST2/RISING */
 326:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_Capture0Config(SLICE3_PTR, XMC_CCU4_SLICE_EVENT_1);
 897              	 .loc 4 326 0
 898 0118 1848     	 ldr r0,.L19+28
 899 011a 0221     	 movs r1,#2
 900 011c FFF7FEFF 	 bl XMC_CCU4_SLICE_Capture0Config
 327:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE3_PTR, XMC_CCU4_SLICE_EVENT_1, &capture_event1_config);
 901              	 .loc 4 327 0
 902 0120 1648     	 ldr r0,.L19+28
 903 0122 0221     	 movs r1,#2
 904 0124 1E4A     	 ldr r2,.L19+64
 905 0126 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 328:../sensor/Sensor_QuadratureDecoder.c **** 
 329:../sensor/Sensor_QuadratureDecoder.c **** 	/* Configure CC43 event1 - Set up capture event on rising edge of CCU40.ST2/FALLING */
 330:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_Capture1Config(SLICE3_PTR, XMC_CCU4_SLICE_EVENT_2);
 906              	 .loc 4 330 0
 907 012a 1448     	 ldr r0,.L19+28
 908 012c 0321     	 movs r1,#3
 909 012e FFF7FEFF 	 bl XMC_CCU4_SLICE_Capture1Config
 331:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ConfigureEvent(SLICE3_PTR, XMC_CCU4_SLICE_EVENT_2, &capture_event2_config);
 910              	 .loc 4 331 0
 911 0132 1248     	 ldr r0,.L19+28
 912 0134 0321     	 movs r1,#3
 913 0136 1B4A     	 ldr r2,.L19+68
 914 0138 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 332:../sensor/Sensor_QuadratureDecoder.c **** 
 333:../sensor/Sensor_QuadratureDecoder.c **** 	/* Enable CC43 event  */
 334:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_EnableEvent(SLICE3_PTR, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 915              	 .loc 4 334 0
 916 013c 0F48     	 ldr r0,.L19+28
 917 013e 0A21     	 movs r1,#10
 918 0140 FFF7FEFF 	 bl XMC_CCU4_SLICE_EnableEvent
 335:../sensor/Sensor_QuadratureDecoder.c **** 
 336:../sensor/Sensor_QuadratureDecoder.c **** 	/* Connect capture on CC43 event 2 to SR0 */
 337:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_SetInterruptNode(SLICE3_PTR, XMC_CCU4_SLICE_IRQ_ID_EVENT2, XMC_CCU4_SLICE_SR_ID_0);
 919              	 .loc 4 337 0
 920 0144 0D48     	 ldr r0,.L19+28
 921 0146 0A21     	 movs r1,#10
 922 0148 0022     	 movs r2,#0
 923 014a FFF7FEFF 	 bl XMC_CCU4_SLICE_SetInterruptNode
 338:../sensor/Sensor_QuadratureDecoder.c **** 
 339:../sensor/Sensor_QuadratureDecoder.c **** 	/* Set NVIC priority */
 340:../sensor/Sensor_QuadratureDecoder.c **** 	NVIC_SetPriority(CCU41_0_IRQn, 3U);
 924              	 .loc 4 340 0
 925 014e 3020     	 movs r0,#48
 926 0150 0321     	 movs r1,#3
 927 0152 FFF7FEFF 	 bl NVIC_SetPriority
 341:../sensor/Sensor_QuadratureDecoder.c **** 
 342:../sensor/Sensor_QuadratureDecoder.c **** 	/* Enable IRQ */
 343:../sensor/Sensor_QuadratureDecoder.c **** 	NVIC_EnableIRQ(CCU41_0_IRQn);
 928              	 .loc 4 343 0
 929 0156 3020     	 movs r0,#48
 930 0158 FFF7FEFF 	 bl NVIC_EnableIRQ
 344:../sensor/Sensor_QuadratureDecoder.c **** }
 931              	 .loc 4 344 0
 932 015c 80BD     	 pop {r7,pc}
 933              	.L20:
 934 015e 00BF     	 .align 2
 935              	.L19:
 936 0160 00C00040 	 .word 1073790976
 937 0164 00010140 	 .word 1073807616
 938 0168 00000000 	 .word position_config
 939 016c 00020140 	 .word 1073807872
 940 0170 00000000 	 .word revolution_config
 941 0174 00030140 	 .word 1073808128
 942 0178 00000000 	 .word tick_config
 943 017c 00040140 	 .word 1073808384
 944 0180 00000000 	 .word capture_config
 945 0184 00000000 	 .word position_event0_config
 946 0188 00000000 	 .word position_event1_config
 947 018c 00000000 	 .word revolution_event0_config
 948 0190 00000000 	 .word revolution_event1_config
 949 0194 00000000 	 .word tick_event0_config
 950 0198 00000000 	 .word tick_event1_config
 951 019c 00000000 	 .word capture_event0_config
 952 01a0 00000000 	 .word capture_event1_config
 953 01a4 00000000 	 .word capture_event2_config
 954              	 .cfi_endproc
 955              	.LFE241:
 957              	 .section .text.Sensor_QD_InitPosif,"ax",%progbits
 958              	 .align 2
 959              	 .global Sensor_QD_InitPosif
 960              	 .thumb
 961              	 .thumb_func
 963              	Sensor_QD_InitPosif:
 964              	.LFB242:
 345:../sensor/Sensor_QuadratureDecoder.c **** 
 346:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_InitPosif()
 347:../sensor/Sensor_QuadratureDecoder.c **** {
 965              	 .loc 4 347 0
 966              	 .cfi_startproc
 967              	 
 968              	 
 969 0000 80B5     	 push {r7,lr}
 970              	.LCFI68:
 971              	 .cfi_def_cfa_offset 8
 972              	 .cfi_offset 7,-8
 973              	 .cfi_offset 14,-4
 974 0002 00AF     	 add r7,sp,#0
 975              	.LCFI69:
 976              	 .cfi_def_cfa_register 7
 348:../sensor/Sensor_QuadratureDecoder.c **** 	/* POSIF Initialization */
 349:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_POSIF_Init(POSIF_PTR, &posif_config);
 977              	 .loc 4 349 0
 978 0004 1348     	 ldr r0,.L22
 979 0006 1449     	 ldr r1,.L22+4
 980 0008 FFF7FEFF 	 bl XMC_POSIF_Init
 350:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_POSIF_QD_Init(POSIF_PTR, &posif_qd_config);
 981              	 .loc 4 350 0
 982 000c 1148     	 ldr r0,.L22
 983 000e 1349     	 ldr r1,.L22+8
 984 0010 FFF7FEFF 	 bl XMC_POSIF_QD_Init
 351:../sensor/Sensor_QuadratureDecoder.c **** 
 352:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_GPIO_Init(QD_A, &posif_encoder_inputport_config); /* A */
 985              	 .loc 4 352 0
 986 0014 1248     	 ldr r0,.L22+12
 987 0016 0A21     	 movs r1,#10
 988 0018 124A     	 ldr r2,.L22+16
 989 001a FFF7FEFF 	 bl XMC_GPIO_Init
 353:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_GPIO_Init(QD_B, &posif_encoder_inputport_config); /* B */
 990              	 .loc 4 353 0
 991 001e 1048     	 ldr r0,.L22+12
 992 0020 0921     	 movs r1,#9
 993 0022 104A     	 ldr r2,.L22+16
 994 0024 FFF7FEFF 	 bl XMC_GPIO_Init
 354:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_GPIO_Init(QD_INDEX, &posif_encoder_inputport_config); /* index */
 995              	 .loc 4 354 0
 996 0028 0D48     	 ldr r0,.L22+12
 997 002a 0821     	 movs r1,#8
 998 002c 0D4A     	 ldr r2,.L22+16
 999 002e FFF7FEFF 	 bl XMC_GPIO_Init
 355:../sensor/Sensor_QuadratureDecoder.c **** 
 356:../sensor/Sensor_QuadratureDecoder.c **** 	/* Get the CCU4 slice out of idle mode */
 357:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableClock(CCU_PTR, SLICE0_NUMBER);
 1000              	 .loc 4 357 0
 1001 0032 0D48     	 ldr r0,.L22+20
 1002 0034 0021     	 movs r1,#0
 1003 0036 FFF7FEFF 	 bl XMC_CCU4_EnableClock
 358:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableClock(CCU_PTR, SLICE1_NUMBER);
 1004              	 .loc 4 358 0
 1005 003a 0B48     	 ldr r0,.L22+20
 1006 003c 0121     	 movs r1,#1
 1007 003e FFF7FEFF 	 bl XMC_CCU4_EnableClock
 359:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableClock(CCU_PTR, SLICE2_NUMBER);
 1008              	 .loc 4 359 0
 1009 0042 0948     	 ldr r0,.L22+20
 1010 0044 0221     	 movs r1,#2
 1011 0046 FFF7FEFF 	 bl XMC_CCU4_EnableClock
 360:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_EnableClock(CCU_PTR, SLICE3_NUMBER);
 1012              	 .loc 4 360 0
 1013 004a 0748     	 ldr r0,.L22+20
 1014 004c 0321     	 movs r1,#3
 1015 004e FFF7FEFF 	 bl XMC_CCU4_EnableClock
 361:../sensor/Sensor_QuadratureDecoder.c **** }
 1016              	 .loc 4 361 0
 1017 0052 80BD     	 pop {r7,pc}
 1018              	.L23:
 1019              	 .align 2
 1020              	.L22:
 1021 0054 00C00240 	 .word 1073922048
 1022 0058 00000000 	 .word posif_config
 1023 005c 00000000 	 .word posif_qd_config
 1024 0060 00830248 	 .word 1208124160
 1025 0064 00000000 	 .word posif_encoder_inputport_config
 1026 0068 00C00040 	 .word 1073790976
 1027              	 .cfi_endproc
 1028              	.LFE242:
 1030              	 .section .text.CCU41_0_IRQHandler,"ax",%progbits
 1031              	 .align 2
 1032              	 .global CCU41_0_IRQHandler
 1033              	 .thumb
 1034              	 .thumb_func
 1036              	CCU41_0_IRQHandler:
 1037              	.LFB243:
 362:../sensor/Sensor_QuadratureDecoder.c **** 
 363:../sensor/Sensor_QuadratureDecoder.c **** void CCU41_0_IRQHandler(void)
 364:../sensor/Sensor_QuadratureDecoder.c **** {
 1038              	 .loc 4 364 0
 1039              	 .cfi_startproc
 1040              	 
 1041              	 
 1042 0000 80B5     	 push {r7,lr}
 1043              	.LCFI70:
 1044              	 .cfi_def_cfa_offset 8
 1045              	 .cfi_offset 7,-8
 1046              	 .cfi_offset 14,-4
 1047 0002 82B0     	 sub sp,sp,#8
 1048              	.LCFI71:
 1049              	 .cfi_def_cfa_offset 16
 1050 0004 00AF     	 add r7,sp,#0
 1051              	.LCFI72:
 1052              	 .cfi_def_cfa_register 7
 365:../sensor/Sensor_QuadratureDecoder.c **** 	uint16_t capturedvalue0;
 366:../sensor/Sensor_QuadratureDecoder.c **** 	uint16_t capturedvalue1;
 367:../sensor/Sensor_QuadratureDecoder.c **** 
 368:../sensor/Sensor_QuadratureDecoder.c **** 	/* Clear pending interrupt */
 369:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_ClearEvent(SLICE3_PTR, XMC_CCU4_SLICE_IRQ_ID_EVENT2);
 1053              	 .loc 4 369 0
 1054 0006 0948     	 ldr r0,.L25
 1055 0008 0A21     	 movs r1,#10
 1056 000a FFF7FEFF 	 bl XMC_CCU4_SLICE_ClearEvent
 370:../sensor/Sensor_QuadratureDecoder.c **** 
 371:../sensor/Sensor_QuadratureDecoder.c **** 	capturedvalue0 = XMC_CCU4_SLICE_GetCaptureRegisterValue(SLICE3_PTR,1U);
 1057              	 .loc 4 371 0
 1058 000e 0748     	 ldr r0,.L25
 1059 0010 0121     	 movs r1,#1
 1060 0012 FFF7FEFF 	 bl XMC_CCU4_SLICE_GetCaptureRegisterValue
 1061 0016 0346     	 mov r3,r0
 1062 0018 FB80     	 strh r3,[r7,#6]
 372:../sensor/Sensor_QuadratureDecoder.c **** 	capturedvalue1 = XMC_CCU4_SLICE_GetCaptureRegisterValue(SLICE3_PTR,3U);
 1063              	 .loc 4 372 0
 1064 001a 0448     	 ldr r0,.L25
 1065 001c 0321     	 movs r1,#3
 1066 001e FFF7FEFF 	 bl XMC_CCU4_SLICE_GetCaptureRegisterValue
 1067 0022 0346     	 mov r3,r0
 1068 0024 BB80     	 strh r3,[r7,#4]
 373:../sensor/Sensor_QuadratureDecoder.c **** }
 1069              	 .loc 4 373 0
 1070 0026 0837     	 adds r7,r7,#8
 1071              	.LCFI73:
 1072              	 .cfi_def_cfa_offset 8
 1073 0028 BD46     	 mov sp,r7
 1074              	.LCFI74:
 1075              	 .cfi_def_cfa_register 13
 1076              	 
 1077 002a 80BD     	 pop {r7,pc}
 1078              	.L26:
 1079              	 .align 2
 1080              	.L25:
 1081 002c 00040140 	 .word 1073808384
 1082              	 .cfi_endproc
 1083              	.LFE243:
 1085              	 .section .text.Sensor_QD_Init,"ax",%progbits
 1086              	 .align 2
 1087              	 .global Sensor_QD_Init
 1088              	 .thumb
 1089              	 .thumb_func
 1091              	Sensor_QD_Init:
 1092              	.LFB244:
 374:../sensor/Sensor_QuadratureDecoder.c **** 
 375:../sensor/Sensor_QuadratureDecoder.c **** /*********************************************************************************
 376:../sensor/Sensor_QuadratureDecoder.c ****  * Global function definitions
 377:../sensor/Sensor_QuadratureDecoder.c ****  *********************************************************************************/
 378:../sensor/Sensor_QuadratureDecoder.c **** 
 379:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_Init()
 380:../sensor/Sensor_QuadratureDecoder.c **** {
 1093              	 .loc 4 380 0
 1094              	 .cfi_startproc
 1095              	 
 1096              	 
 1097 0000 80B5     	 push {r7,lr}
 1098              	.LCFI75:
 1099              	 .cfi_def_cfa_offset 8
 1100              	 .cfi_offset 7,-8
 1101              	 .cfi_offset 14,-4
 1102 0002 00AF     	 add r7,sp,#0
 1103              	.LCFI76:
 1104              	 .cfi_def_cfa_register 7
 381:../sensor/Sensor_QuadratureDecoder.c **** 	Sensor_QD_InitCCU();
 1105              	 .loc 4 381 0
 1106 0004 FFF7FEFF 	 bl Sensor_QD_InitCCU
 382:../sensor/Sensor_QuadratureDecoder.c **** 	Sensor_QD_InitPosif();
 1107              	 .loc 4 382 0
 1108 0008 FFF7FEFF 	 bl Sensor_QD_InitPosif
 383:../sensor/Sensor_QuadratureDecoder.c **** }
 1109              	 .loc 4 383 0
 1110 000c 80BD     	 pop {r7,pc}
 1111              	 .cfi_endproc
 1112              	.LFE244:
 1114 000e 00BF     	 .section .text.Sensor_QD_Start,"ax",%progbits
 1115              	 .align 2
 1116              	 .global Sensor_QD_Start
 1117              	 .thumb
 1118              	 .thumb_func
 1120              	Sensor_QD_Start:
 1121              	.LFB245:
 384:../sensor/Sensor_QuadratureDecoder.c **** 
 385:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_Start()
 386:../sensor/Sensor_QuadratureDecoder.c **** {
 1122              	 .loc 4 386 0
 1123              	 .cfi_startproc
 1124              	 
 1125              	 
 1126 0000 80B5     	 push {r7,lr}
 1127              	.LCFI77:
 1128              	 .cfi_def_cfa_offset 8
 1129              	 .cfi_offset 7,-8
 1130              	 .cfi_offset 14,-4
 1131 0002 00AF     	 add r7,sp,#0
 1132              	.LCFI78:
 1133              	 .cfi_def_cfa_register 7
 387:../sensor/Sensor_QuadratureDecoder.c **** 	/* Start the CCU4 Timer */
 388:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_StartTimer(SLICE0_PTR);
 1134              	 .loc 4 388 0
 1135 0004 0648     	 ldr r0,.L29
 1136 0006 FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 389:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_StartTimer(SLICE1_PTR);
 1137              	 .loc 4 389 0
 1138 000a 0648     	 ldr r0,.L29+4
 1139 000c FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 390:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_CCU4_SLICE_StartTimer(SLICE2_PTR);
 1140              	 .loc 4 390 0
 1141 0010 0548     	 ldr r0,.L29+8
 1142 0012 FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 391:../sensor/Sensor_QuadratureDecoder.c **** 
 392:../sensor/Sensor_QuadratureDecoder.c **** 	/* Start the Encoder */
 393:../sensor/Sensor_QuadratureDecoder.c **** 	XMC_POSIF_Start(POSIF0);
 1143              	 .loc 4 393 0
 1144 0016 0548     	 ldr r0,.L29+12
 1145 0018 FFF7FEFF 	 bl XMC_POSIF_Start
 394:../sensor/Sensor_QuadratureDecoder.c **** }
 1146              	 .loc 4 394 0
 1147 001c 80BD     	 pop {r7,pc}
 1148              	.L30:
 1149 001e 00BF     	 .align 2
 1150              	.L29:
 1151 0020 00010140 	 .word 1073807616
 1152 0024 00020140 	 .word 1073807872
 1153 0028 00030140 	 .word 1073808128
 1154 002c 00800240 	 .word 1073905664
 1155              	 .cfi_endproc
 1156              	.LFE245:
 1158              	 .section .text.Sensor_QD_Stop,"ax",%progbits
 1159              	 .align 2
 1160              	 .global Sensor_QD_Stop
 1161              	 .thumb
 1162              	 .thumb_func
 1164              	Sensor_QD_Stop:
 1165              	.LFB246:
 395:../sensor/Sensor_QuadratureDecoder.c **** 
 396:../sensor/Sensor_QuadratureDecoder.c **** void Sensor_QD_Stop()
 397:../sensor/Sensor_QuadratureDecoder.c **** {
 1166              	 .loc 4 397 0
 1167              	 .cfi_startproc
 1168              	 
 1169              	 
 1170              	 
 1171 0000 80B4     	 push {r7}
 1172              	.LCFI79:
 1173              	 .cfi_def_cfa_offset 4
 1174              	 .cfi_offset 7,-4
 1175 0002 00AF     	 add r7,sp,#0
 1176              	.LCFI80:
 1177              	 .cfi_def_cfa_register 7
 398:../sensor/Sensor_QuadratureDecoder.c **** 
 399:../sensor/Sensor_QuadratureDecoder.c **** }
 1178              	 .loc 4 399 0
 1179 0004 BD46     	 mov sp,r7
 1180              	.LCFI81:
 1181              	 .cfi_def_cfa_register 13
 1182              	 
 1183 0006 5DF8047B 	 ldr r7,[sp],#4
 1184              	.LCFI82:
 1185              	 .cfi_restore 7
 1186              	 .cfi_def_cfa_offset 0
 1187 000a 7047     	 bx lr
 1188              	 .cfi_endproc
 1189              	.LFE246:
 1191              	 .text
 1192              	.Letext0:
 1193              	 .file 5 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1194              	 .file 6 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1195              	 .file 7 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 1196              	 .file 8 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_gpio.h"
 1197              	 .file 9 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc4_gpio.h"
 1198              	 .file 10 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Sensor_QuadratureDecoder.c
    {standard input}:20     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:24     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:69     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:74     .text.NVIC_SetPriority:00000000 $t
    {standard input}:78     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:141    .text.NVIC_SetPriority:0000004c $d
    {standard input}:147    .text.XMC_POSIF_Start:00000000 $t
    {standard input}:151    .text.XMC_POSIF_Start:00000000 XMC_POSIF_Start
    {standard input}:191    .text.XMC_CCU4_StartPrescaler:00000000 $t
    {standard input}:195    .text.XMC_CCU4_StartPrescaler:00000000 XMC_CCU4_StartPrescaler
    {standard input}:237    .text.XMC_CCU4_EnableClock:00000000 $t
    {standard input}:241    .text.XMC_CCU4_EnableClock:00000000 XMC_CCU4_EnableClock
    {standard input}:287    .text.XMC_CCU4_SLICE_StartTimer:00000000 $t
    {standard input}:291    .text.XMC_CCU4_SLICE_StartTimer:00000000 XMC_CCU4_SLICE_StartTimer
    {standard input}:330    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:334    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU4_SLICE_SetTimerPeriodMatch
    {standard input}:375    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:379    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 XMC_CCU4_SLICE_SetTimerCompareMatch
    {standard input}:420    .text.XMC_CCU4_EnableShadowTransfer:00000000 $t
    {standard input}:424    .text.XMC_CCU4_EnableShadowTransfer:00000000 XMC_CCU4_EnableShadowTransfer
    {standard input}:464    .text.XMC_CCU4_SLICE_EnableEvent:00000000 $t
    {standard input}:468    .text.XMC_CCU4_SLICE_EnableEvent:00000000 XMC_CCU4_SLICE_EnableEvent
    {standard input}:514    .text.XMC_CCU4_SLICE_ClearEvent:00000000 $t
    {standard input}:518    .text.XMC_CCU4_SLICE_ClearEvent:00000000 XMC_CCU4_SLICE_ClearEvent
    {standard input}:568    .data.position_config:00000000 position_config
    {standard input}:565    .data.position_config:00000000 $d
    {standard input}:581    .data.position_event0_config:00000000 position_event0_config
    {standard input}:578    .data.position_event0_config:00000000 $d
    {standard input}:591    .data.position_event1_config:00000000 position_event1_config
    {standard input}:588    .data.position_event1_config:00000000 $d
    {standard input}:601    .data.revolution_config:00000000 revolution_config
    {standard input}:598    .data.revolution_config:00000000 $d
    {standard input}:614    .data.revolution_event0_config:00000000 revolution_event0_config
    {standard input}:611    .data.revolution_event0_config:00000000 $d
    {standard input}:624    .data.revolution_event1_config:00000000 revolution_event1_config
    {standard input}:621    .data.revolution_event1_config:00000000 $d
    {standard input}:634    .data.tick_config:00000000 tick_config
    {standard input}:631    .data.tick_config:00000000 $d
    {standard input}:647    .data.tick_event0_config:00000000 tick_event0_config
    {standard input}:644    .data.tick_event0_config:00000000 $d
    {standard input}:657    .data.tick_event1_config:00000000 tick_event1_config
    {standard input}:654    .data.tick_event1_config:00000000 $d
    {standard input}:667    .data.capture_config:00000000 capture_config
    {standard input}:664    .data.capture_config:00000000 $d
    {standard input}:680    .data.capture_event0_config:00000000 capture_event0_config
    {standard input}:677    .data.capture_event0_config:00000000 $d
    {standard input}:690    .data.capture_event1_config:00000000 capture_event1_config
    {standard input}:687    .data.capture_event1_config:00000000 $d
    {standard input}:700    .data.capture_event2_config:00000000 capture_event2_config
    {standard input}:697    .data.capture_event2_config:00000000 $d
    {standard input}:710    .data.posif_config:00000000 posif_config
    {standard input}:707    .data.posif_config:00000000 $d
    {standard input}:720    .bss.posif_qd_config:00000000 posif_qd_config
    {standard input}:717    .bss.posif_qd_config:00000000 $d
    {standard input}:727    .data.posif_encoder_port_config:00000000 posif_encoder_port_config
    {standard input}:724    .data.posif_encoder_port_config:00000000 $d
    {standard input}:738    .data.posif_encoder_inputport_config:00000000 posif_encoder_inputport_config
    {standard input}:735    .data.posif_encoder_inputport_config:00000000 $d
    {standard input}:745    .text.Sensor_QD_InitCCU:00000000 $t
    {standard input}:750    .text.Sensor_QD_InitCCU:00000000 Sensor_QD_InitCCU
    {standard input}:936    .text.Sensor_QD_InitCCU:00000160 $d
    {standard input}:958    .text.Sensor_QD_InitPosif:00000000 $t
    {standard input}:963    .text.Sensor_QD_InitPosif:00000000 Sensor_QD_InitPosif
    {standard input}:1021   .text.Sensor_QD_InitPosif:00000054 $d
    {standard input}:1031   .text.CCU41_0_IRQHandler:00000000 $t
    {standard input}:1036   .text.CCU41_0_IRQHandler:00000000 CCU41_0_IRQHandler
    {standard input}:1081   .text.CCU41_0_IRQHandler:0000002c $d
    {standard input}:1086   .text.Sensor_QD_Init:00000000 $t
    {standard input}:1091   .text.Sensor_QD_Init:00000000 Sensor_QD_Init
    {standard input}:1115   .text.Sensor_QD_Start:00000000 $t
    {standard input}:1120   .text.Sensor_QD_Start:00000000 Sensor_QD_Start
    {standard input}:1151   .text.Sensor_QD_Start:00000020 $d
    {standard input}:1159   .text.Sensor_QD_Stop:00000000 $t
    {standard input}:1164   .text.Sensor_QD_Stop:00000000 Sensor_QD_Stop
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_CCU4_Init
XMC_CCU4_SetModuleClock
XMC_CCU4_SLICE_CompareInit
XMC_CCU4_SLICE_CaptureInit
XMC_CCU4_SLICE_CountConfig
XMC_CCU4_SLICE_ConfigureEvent
XMC_CCU4_SLICE_DirectionConfig
XMC_CCU4_SLICE_StartConfig
XMC_CCU4_SLICE_Capture0Config
XMC_CCU4_SLICE_Capture1Config
XMC_CCU4_SLICE_SetInterruptNode
XMC_POSIF_Init
XMC_POSIF_QD_Init
XMC_GPIO_Init
XMC_CCU4_SLICE_GetCaptureRegisterValue
