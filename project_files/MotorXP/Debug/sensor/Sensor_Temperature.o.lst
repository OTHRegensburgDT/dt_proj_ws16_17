   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "Sensor_Temperature.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.NVIC_GetPriorityGrouping,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	NVIC_GetPriorityGrouping:
  25              	.LFB107:
  26              	 .file 1 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Include/core_cm4.h"
   1:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**************************************************************************//**
   2:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @file     core_cm4.h
   3:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @version  V4.30
   5:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @date     20. October 2015
   6:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
   7:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
   9:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    All rights reserved.
  10:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      to endorse or promote products derived from this software without
  19:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      specific prior written permission.
  20:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    *
  21:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  34:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  35:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __ICCARM__ )
  36:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
  40:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  41:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  44:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include <stdint.h>
  45:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  46:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
  47:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
  48:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
  49:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  50:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
  51:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  54:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  57:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Unions are used for effective representation of core registers.
  59:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  60:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
  63:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  64:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  65:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
  66:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                 CMSIS definitions
  67:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
  68:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
  69:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup Cortex_M4
  70:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
  71:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
  72:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  73:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*  CMSIS CM4 definitions */
  74:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  79:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  81:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  82:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __CC_ARM )
  83:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  87:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  92:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
  93:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  97:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
  98:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 102:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TMS470__ )
 103:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 106:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 107:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 111:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 112:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __packed
 113:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 117:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #else
 118:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #error Unknown compiler
 119:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 120:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 121:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 124:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if defined ( __CC_ARM )
 125:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 128:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 129:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 131:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 132:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 133:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 134:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 135:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 136:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 140:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 141:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 143:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 144:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 145:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 146:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 147:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 148:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
 149:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 152:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 153:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 155:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 156:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 157:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 158:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 159:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 160:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
 161:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARMVFP__
 162:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 164:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 165:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 167:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 168:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 169:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 170:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 171:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 172:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TMS470__ )
 173:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 176:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 177:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 179:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 180:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 181:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 182:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 183:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 184:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 185:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __FPU_VFP__
 186:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 188:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 189:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 191:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 192:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 193:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 194:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 195:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 196:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 197:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 200:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 201:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 203:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 204:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 205:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 206:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 207:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 208:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 209:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 210:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 214:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 215:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 216:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 217:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 218:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 220:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 222:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 225:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 226:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
 227:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 228:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 229:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* check device defines and use defaults */
 230:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __CM4_REV
 232:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __CM4_REV               0x0000U
 233:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 235:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 236:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __FPU_PRESENT
 237:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_PRESENT             0U
 238:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 240:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 241:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __MPU_PRESENT
 242:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __MPU_PRESENT             0U
 243:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 245:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 246:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 250:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 251:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 255:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 256:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 257:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 259:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \li to specify the access to peripheral variables.
 263:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 265:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 266:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #else
 268:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 270:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 273:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* following defines should be used for structure members */
 274:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 278:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group Cortex_M4 */
 279:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 280:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 281:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 282:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
 283:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                 Register Abstraction
 284:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   Core Register contain:
 285:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register
 286:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Register
 287:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SCB Register
 288:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Register
 289:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Register
 290:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core MPU Register
 291:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core FPU Register
 292:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
 293:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 294:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 297:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 298:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 299:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 300:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Core Register type definitions.
 302:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 303:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 304:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 305:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 306:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 308:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 309:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 310:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 311:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 312:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } APSR_Type;
 323:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 324:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* APSR Register Definitions */
 325:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 328:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 331:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 334:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 337:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 340:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 343:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 344:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 345:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 347:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 348:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 349:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 350:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 351:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } IPSR_Type;
 356:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 357:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* IPSR Register Definitions */
 358:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 361:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 362:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 363:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 365:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 366:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 367:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 368:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 369:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } xPSR_Type;
 383:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 384:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* xPSR Register Definitions */
 385:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 388:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 391:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 394:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 397:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 400:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 403:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 406:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 409:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 412:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 413:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 414:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 416:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 417:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 418:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 419:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 420:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } CONTROL_Type;
 427:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 428:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* CONTROL Register Definitions */
 429:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 432:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 435:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 438:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 440:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 441:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 442:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 443:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 446:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 447:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 448:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 449:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 451:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 452:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 453:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[24U];
 455:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RSERVED1[24U];
 457:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[24U];
 459:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[24U];
 461:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[56U];
 463:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[644U];
 465:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }  NVIC_Type;
 467:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 468:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 472:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 474:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 475:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 476:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 477:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 480:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 481:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 482:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 483:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 485:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 486:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 487:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[5U];
 507:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SCB_Type;
 509:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 510:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB CPUID Register Definitions */
 511:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 514:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 517:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 520:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 523:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 526:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 530:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 533:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 536:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 539:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 542:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 545:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 548:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 551:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 554:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 557:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 561:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 565:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 568:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 571:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 574:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 577:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 580:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 583:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Control Register Definitions */
 584:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 587:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 590:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 593:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 597:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 600:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 603:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 606:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 609:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 612:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 616:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 619:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 622:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 625:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 628:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 631:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 634:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 637:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 640:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 643:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 646:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 649:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 652:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 655:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 659:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 662:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 665:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 669:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 672:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 675:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 679:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 682:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 685:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 688:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 691:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 693:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 694:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 695:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 696:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 699:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 700:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 701:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 702:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 704:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 705:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 706:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 707:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SCnSCB_Type;
 710:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 711:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 715:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 719:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 722:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 725:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 728:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 731:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 733:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 734:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 735:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 736:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 739:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 740:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 741:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 742:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 744:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 745:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 746:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SysTick_Type;
 751:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 752:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 756:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 759:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 762:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 765:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Reload Register Definitions */
 766:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 769:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Current Register Definitions */
 770:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 773:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 777:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 780:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 783:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 785:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 786:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 787:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 788:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 791:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 792:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 793:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 794:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 796:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 797:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 798:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  union
 799:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 800:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[864U];
 805:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[15U];
 807:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[15U];
 809:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[29U];
 811:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[43U];
 815:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[6U];
 818:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } ITM_Type;
 831:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 832:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 836:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 840:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 843:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 846:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 849:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 852:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 855:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 858:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 861:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 864:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 868:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 872:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 876:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 880:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 883:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 886:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 888:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 889:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 890:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 891:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 894:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 895:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 896:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 897:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 899:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 900:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 901:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 913:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[1U];
 917:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[1U];
 921:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } DWT_Type;
 925:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 926:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Control Register Definitions */
 927:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 930:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 933:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 936:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 939:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 942:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 945:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 948:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 951:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 954:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 957:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 960:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 963:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 966:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 969:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 972:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 975:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 978:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 981:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 985:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 989:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 993:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 997:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1001:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1005:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1009:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1012:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1015:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1018:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1021:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1024:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1027:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1030:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1033:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1035:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1036:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1037:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1038:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1041:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1042:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1043:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1044:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1046:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1047:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1048:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[2U];
1051:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[55U];
1053:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[131U];
1055:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[759U];
1059:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[1U];
1063:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[39U];
1067:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED7[8U];
1070:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } TPI_Type;
1073:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1074:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1078:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1082:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1086:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1089:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1092:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1095:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1099:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1102:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1106:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1110:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1113:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1116:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1119:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1122:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1125:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1128:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1132:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1136:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1139:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1142:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1145:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1148:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1151:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1154:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1158:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1162:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVID Register Definitions */
1163:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1166:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1169:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1172:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1175:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1178:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1181:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1185:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1188:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1190:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1191:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1193:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1194:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1197:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1198:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1199:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1200:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1202:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1203:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1204:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } MPU_Type;
1216:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1217:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Type Register Definitions */
1218:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1221:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1224:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1227:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Control Register Definitions */
1228:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1231:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1234:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1237:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Number Register Definitions */
1238:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1241:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1245:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1248:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1251:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1255:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1258:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1261:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1264:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1267:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1270:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1273:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1276:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1279:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1282:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1284:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1285:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1286:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1288:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1289:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1292:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1293:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1294:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1295:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1297:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1298:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1299:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
1300:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } FPU_Type;
1306:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1307:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1311:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1314:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1317:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1320:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1323:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1326:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1329:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1332:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1335:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1339:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1343:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1346:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1349:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1352:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1356:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1359:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1362:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1365:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1368:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1371:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1374:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1377:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1381:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1384:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1387:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1390:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1392:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1393:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1394:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1395:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1396:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1399:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1400:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1401:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1402:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1404:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1405:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1406:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } CoreDebug_Type;
1411:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1412:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1416:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1419:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1422:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1425:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1428:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1431:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1434:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1437:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1440:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1443:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1446:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1449:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1453:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1456:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1460:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1463:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1466:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1469:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1472:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1475:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1478:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1481:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1484:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1487:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1490:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1493:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1496:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1498:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1499:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1500:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1501:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1504:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1505:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1506:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1507:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of the bit field.
1510:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted value.
1511:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1512:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1514:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1515:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of register.
1518:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted bit field value.
1519:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1520:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1522:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1524:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1525:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1526:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1527:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1530:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1531:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1532:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1542:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1551:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1555:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1556:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1560:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1561:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} */
1562:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1563:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1564:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1565:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
1566:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                Hardware Abstraction Layer
1567:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   Core Function Interface contains:
1568:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Functions
1569:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Functions
1570:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Functions
1571:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register Access Functions
1572:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
1573:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1574:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1576:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1577:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1578:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1579:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1581:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1585:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1586:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1587:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1588:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Priority Grouping
1589:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            Only values from 0..7 are used.
1592:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            In case of a conflict between priority grouping and available
1593:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1596:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1598:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t reg_value;
1599:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1601:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1608:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1609:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1610:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1611:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Priority Grouping
1612:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1615:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
  27              	 .loc 1 1616 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
1617:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  39              	 .loc 1 1617 0
  40 0004 044B     	 ldr r3,.L3
  41 0006 DB68     	 ldr r3,[r3,#12]
  42 0008 03F4E063 	 and r3,r3,#1792
  43 000c 1B0A     	 lsrs r3,r3,#8
1618:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
  44              	 .loc 1 1618 0
  45 000e 1846     	 mov r0,r3
  46 0010 BD46     	 mov sp,r7
  47              	.LCFI2:
  48              	 .cfi_def_cfa_register 13
  49              	 
  50 0012 5DF8047B 	 ldr r7,[sp],#4
  51              	.LCFI3:
  52              	 .cfi_restore 7
  53              	 .cfi_def_cfa_offset 0
  54 0016 7047     	 bx lr
  55              	.L4:
  56              	 .align 2
  57              	.L3:
  58 0018 00ED00E0 	 .word -536810240
  59              	 .cfi_endproc
  60              	.LFE107:
  62              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  63              	 .align 2
  64              	 .thumb
  65              	 .thumb_func
  67              	NVIC_EnableIRQ:
  68              	.LFB108:
1619:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1620:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1621:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1622:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Enable External Interrupt
1623:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1626:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
  69              	 .loc 1 1627 0
  70              	 .cfi_startproc
  71              	 
  72              	 
  73              	 
  74 0000 80B4     	 push {r7}
  75              	.LCFI4:
  76              	 .cfi_def_cfa_offset 4
  77              	 .cfi_offset 7,-4
  78 0002 83B0     	 sub sp,sp,#12
  79              	.LCFI5:
  80              	 .cfi_def_cfa_offset 16
  81 0004 00AF     	 add r7,sp,#0
  82              	.LCFI6:
  83              	 .cfi_def_cfa_register 7
  84 0006 0346     	 mov r3,r0
  85 0008 FB71     	 strb r3,[r7,#7]
1628:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  86              	 .loc 1 1628 0
  87 000a 0849     	 ldr r1,.L6
  88 000c 97F90730 	 ldrsb r3,[r7,#7]
  89 0010 5B09     	 lsrs r3,r3,#5
  90 0012 FA79     	 ldrb r2,[r7,#7]
  91 0014 02F01F02 	 and r2,r2,#31
  92 0018 0120     	 movs r0,#1
  93 001a 00FA02F2 	 lsl r2,r0,r2
  94 001e 41F82320 	 str r2,[r1,r3,lsl#2]
1629:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
  95              	 .loc 1 1629 0
  96 0022 0C37     	 adds r7,r7,#12
  97              	.LCFI7:
  98              	 .cfi_def_cfa_offset 4
  99 0024 BD46     	 mov sp,r7
 100              	.LCFI8:
 101              	 .cfi_def_cfa_register 13
 102              	 
 103 0026 5DF8047B 	 ldr r7,[sp],#4
 104              	.LCFI9:
 105              	 .cfi_restore 7
 106              	 .cfi_def_cfa_offset 0
 107 002a 7047     	 bx lr
 108              	.L7:
 109              	 .align 2
 110              	.L6:
 111 002c 00E100E0 	 .word -536813312
 112              	 .cfi_endproc
 113              	.LFE108:
 115              	 .section .text.NVIC_SetPriority,"ax",%progbits
 116              	 .align 2
 117              	 .thumb
 118              	 .thumb_func
 120              	NVIC_SetPriority:
 121              	.LFB114:
1630:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1631:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1632:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1633:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Disable External Interrupt
1634:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1637:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1639:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1641:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1642:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1643:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1644:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Pending Interrupt
1645:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is pending.
1649:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1650:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1652:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1654:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1655:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1656:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1657:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Pending Interrupt
1658:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1661:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1663:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1665:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1666:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1667:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1668:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Clear Pending Interrupt
1669:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1672:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1674:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1676:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1677:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1678:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1679:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Active Interrupt
1680:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not active.
1683:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is active.
1684:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1685:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1687:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1689:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1690:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1691:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1692:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Interrupt Priority
1693:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority of an interrupt.
1694:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]  priority  Priority to set.
1697:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1698:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 122              	 .loc 1 1699 0
 123              	 .cfi_startproc
 124              	 
 125              	 
 126              	 
 127 0000 80B4     	 push {r7}
 128              	.LCFI10:
 129              	 .cfi_def_cfa_offset 4
 130              	 .cfi_offset 7,-4
 131 0002 83B0     	 sub sp,sp,#12
 132              	.LCFI11:
 133              	 .cfi_def_cfa_offset 16
 134 0004 00AF     	 add r7,sp,#0
 135              	.LCFI12:
 136              	 .cfi_def_cfa_register 7
 137 0006 0346     	 mov r3,r0
 138 0008 3960     	 str r1,[r7]
 139 000a FB71     	 strb r3,[r7,#7]
1700:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) < 0)
 140              	 .loc 1 1700 0
 141 000c 97F90730 	 ldrsb r3,[r7,#7]
 142 0010 002B     	 cmp r3,#0
 143 0012 0BDA     	 bge .L9
1701:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1702:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 144              	 .loc 1 1702 0
 145 0014 0D49     	 ldr r1,.L11
 146 0016 FB79     	 ldrb r3,[r7,#7]
 147 0018 03F00F03 	 and r3,r3,#15
 148 001c 043B     	 subs r3,r3,#4
 149 001e 3A68     	 ldr r2,[r7]
 150 0020 D2B2     	 uxtb r2,r2
 151 0022 9200     	 lsls r2,r2,#2
 152 0024 D2B2     	 uxtb r2,r2
 153 0026 0B44     	 add r3,r3,r1
 154 0028 1A76     	 strb r2,[r3,#24]
 155 002a 09E0     	 b .L8
 156              	.L9:
1703:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1704:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   else
1705:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1706:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 157              	 .loc 1 1706 0
 158 002c 0849     	 ldr r1,.L11+4
 159 002e 97F90730 	 ldrsb r3,[r7,#7]
 160 0032 3A68     	 ldr r2,[r7]
 161 0034 D2B2     	 uxtb r2,r2
 162 0036 9200     	 lsls r2,r2,#2
 163 0038 D2B2     	 uxtb r2,r2
 164 003a 0B44     	 add r3,r3,r1
 165 003c 83F80023 	 strb r2,[r3,#768]
 166              	.L8:
1707:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1708:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 167              	 .loc 1 1708 0
 168 0040 0C37     	 adds r7,r7,#12
 169              	.LCFI13:
 170              	 .cfi_def_cfa_offset 4
 171 0042 BD46     	 mov sp,r7
 172              	.LCFI14:
 173              	 .cfi_def_cfa_register 13
 174              	 
 175 0044 5DF8047B 	 ldr r7,[sp],#4
 176              	.LCFI15:
 177              	 .cfi_restore 7
 178              	 .cfi_def_cfa_offset 0
 179 0048 7047     	 bx lr
 180              	.L12:
 181 004a 00BF     	 .align 2
 182              	.L11:
 183 004c 00ED00E0 	 .word -536810240
 184 0050 00E100E0 	 .word -536813312
 185              	 .cfi_endproc
 186              	.LFE114:
 188              	 .section .text.NVIC_EncodePriority,"ax",%progbits
 189              	 .align 2
 190              	 .thumb
 191              	 .thumb_func
 193              	NVIC_EncodePriority:
 194              	.LFB116:
1709:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1710:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1711:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1712:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Interrupt Priority
1713:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the priority of an interrupt.
1714:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
1715:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            or negative to specify an internal (core) interrupt.
1716:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]   IRQn  Interrupt number.
1717:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             Interrupt Priority.
1718:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                       Value is aligned automatically to the implemented priority bits of the microc
1719:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1720:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1721:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1722:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1723:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) < 0)
1724:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1725:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     return(((uint32_t)SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS))
1726:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1727:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   else
1728:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1729:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS))
1730:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1731:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1732:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1733:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1734:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1735:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Encode Priority
1736:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Encodes the priority for an interrupt with the given priority group,
1737:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            preemptive priority value, and subpriority value.
1738:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            In case of a conflict between priority grouping and available
1739:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1740:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]     PriorityGroup  Used priority group.
1741:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1742:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
1743:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
1744:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1745:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1746:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 195              	 .loc 1 1746 0
 196              	 .cfi_startproc
 197              	 
 198              	 
 199              	 
 200 0000 80B4     	 push {r7}
 201              	.LCFI16:
 202              	 .cfi_def_cfa_offset 4
 203              	 .cfi_offset 7,-4
 204 0002 89B0     	 sub sp,sp,#36
 205              	.LCFI17:
 206              	 .cfi_def_cfa_offset 40
 207 0004 00AF     	 add r7,sp,#0
 208              	.LCFI18:
 209              	 .cfi_def_cfa_register 7
 210 0006 F860     	 str r0,[r7,#12]
 211 0008 B960     	 str r1,[r7,#8]
 212 000a 7A60     	 str r2,[r7,#4]
1747:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 213              	 .loc 1 1747 0
 214 000c FB68     	 ldr r3,[r7,#12]
 215 000e 03F00703 	 and r3,r3,#7
 216 0012 FB61     	 str r3,[r7,#28]
1748:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PreemptPriorityBits;
1749:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t SubPriorityBits;
1750:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1751:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 217              	 .loc 1 1751 0
 218 0014 FB69     	 ldr r3,[r7,#28]
 219 0016 C3F10703 	 rsb r3,r3,#7
 220 001a 062B     	 cmp r3,#6
 221 001c 28BF     	 it cs
 222 001e 0623     	 movcs r3,#6
 223 0020 BB61     	 str r3,[r7,#24]
1752:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 224              	 .loc 1 1752 0
 225 0022 FB69     	 ldr r3,[r7,#28]
 226 0024 0633     	 adds r3,r3,#6
 227 0026 062B     	 cmp r3,#6
 228 0028 02D9     	 bls .L14
 229              	 .loc 1 1752 0 is_stmt 0 discriminator 1
 230 002a FB69     	 ldr r3,[r7,#28]
 231 002c 013B     	 subs r3,r3,#1
 232 002e 00E0     	 b .L15
 233              	.L14:
 234              	 .loc 1 1752 0 discriminator 2
 235 0030 0023     	 movs r3,#0
 236              	.L15:
 237              	 .loc 1 1752 0 discriminator 4
 238 0032 7B61     	 str r3,[r7,#20]
1753:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1754:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return (
1755:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 239              	 .loc 1 1755 0 is_stmt 1 discriminator 4
 240 0034 BB69     	 ldr r3,[r7,#24]
 241 0036 0122     	 movs r2,#1
 242 0038 02FA03F3 	 lsl r3,r2,r3
 243 003c 5A1E     	 subs r2,r3,#1
 244 003e BB68     	 ldr r3,[r7,#8]
 245 0040 1A40     	 ands r2,r2,r3
 246 0042 7B69     	 ldr r3,[r7,#20]
 247 0044 9A40     	 lsls r2,r2,r3
1756:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 248              	 .loc 1 1756 0 discriminator 4
 249 0046 7B69     	 ldr r3,[r7,#20]
 250 0048 0121     	 movs r1,#1
 251 004a 01FA03F3 	 lsl r3,r1,r3
 252 004e 591E     	 subs r1,r3,#1
 253 0050 7B68     	 ldr r3,[r7,#4]
 254 0052 0B40     	 ands r3,r3,r1
1754:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 255              	 .loc 1 1754 0 discriminator 4
 256 0054 1343     	 orrs r3,r3,r2
1757:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****          );
1758:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 257              	 .loc 1 1758 0 discriminator 4
 258 0056 1846     	 mov r0,r3
 259 0058 2437     	 adds r7,r7,#36
 260              	.LCFI19:
 261              	 .cfi_def_cfa_offset 4
 262 005a BD46     	 mov sp,r7
 263              	.LCFI20:
 264              	 .cfi_def_cfa_register 13
 265              	 
 266 005c 5DF8047B 	 ldr r7,[sp],#4
 267              	.LCFI21:
 268              	 .cfi_restore 7
 269              	 .cfi_def_cfa_offset 0
 270 0060 7047     	 bx lr
 271              	 .cfi_endproc
 272              	.LFE116:
 274 0062 00BF     	 .section .text.XMC_VADC_GLOBAL_DisablePostCalibration,"ax",%progbits
 275              	 .align 2
 276              	 .thumb
 277              	 .thumb_func
 279              	XMC_VADC_GLOBAL_DisablePostCalibration:
 280              	.LFB173:
 281              	 .file 2 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_vadc.h"
   1:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
   2:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @date 2016-06-17
   4:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   5:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @cond
   6:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** ***************************************************************************************************
   7:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
   9:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * All rights reserved.                        
  11:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                             
  12:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * following conditions are met:   
  14:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  15:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer.                        
  17:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  18:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 
  21:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  24:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                                                                              
  32:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
  35:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  36:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Change History
  37:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * --------------
  38:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  39:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-15:
  40:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Initial <br>
  41:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *      
  42:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-02-20:
  43:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   
  45:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-04-27:
  46:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  51:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-20:
  52:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-06-25:
  54:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  56:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-07-28:
  57:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  61:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  70:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  71:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Added:
  72:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  74:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed:
  75:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  80:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2015-12-01:
  81:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs Created.
  82:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  87:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-09:
  88:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  90:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-03-18:
  91:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
  94:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * 2016-06-17:
  95:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New macros added XMC_VADC_SHS_FULL_SET_REG, XMC_VADC_RESULT_PRIORITY_AVAILABLE
  96:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New Enum added XMC_VADC_SHS_GAIN_LEVEL_t and XMC_VADC_SYNCTR_EVAL_t
  97:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     - New APIs added are:
  98:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncSlaveReadySignal
  99:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetAssertedEvents
 100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAssertedResultEvents
 101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultRegPriority
 102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetSyncReadySignal
 103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetSyncReadySignal
 104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetResultRegPriority
 105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @endcond 
 106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #ifndef XMC_VADC_H
 110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_H
 111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * HEADER FILES
 114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_common.h>
 116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_scu.h>
 117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @addtogroup VADC
 126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to discrete digital values.
 131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC1
 132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter.
 134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * which together build separate groups.
 144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \if XMC4
 146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \else
 148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \endif
 150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
 165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <UL>
 167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * </UL><BR>
 177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @{
 178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * MACROS
 182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE           (1U) /*  Defines the availability of group resource in a
 186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE           (1U) /*  Defines the availability of scan request resour
 187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE           (1U) /*  Defines the availability of queue request resou
 188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE            (1U) /*  Defines the availability of external multiplexe
 189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE        (1U) /*  Defines the availability of boundary check supp
 191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS      (1U) /*  Defines the availability of synchronous request
 192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS        (2U) /*  Defines the maximum number of groups available 
 193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT      (1U) /*  Defines the availability of boundary flags in a
 194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE         (1U) /*  Defines the external multiplexer channel select
 195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE             (0U) /* Defines the availability of sample and hold modu
 197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG          (0U) /* Defines the availability of sample and hold modu
 198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE    (1U) /* Define the availability of a source specific res
 199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (1U) /* Defines the availability of sample and hold module
 252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (1U) /* Define the availability of a priority for result
 254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     device*/
 262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 devices */
 268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     operation for a particular device*/
 272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_SHS_FULL_SET_REG        (0U) /* Defines the availability of sample and hold module
 274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_RESULT_PRIORITY_AVAILABLE (0U) /* Define the availability of a priority for result
 276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * ENUMS
 287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC type*/
 291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                              type to VADC Group type*/
 295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   
 374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   
 401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  this enumeration.
 441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          awaiting conversion */
 466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          previous set */
 468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * enumeration.
 542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
 549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  enumeration.
 572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                           request sources */
 587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** * Defines channel alias.
 685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** */
 687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
 703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Defines the ready signal selection
 754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef enum XMC_VADC_SYNCTR_EVAL
 756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_1 = VADC_G_SYNCTR_EVALR1_Msk, /**<Mask to set the EVAL1 bits of SYNCTR */
 758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_2 = VADC_G_SYNCTR_EVALR2_Msk, /**<Mask to set the EVAL2 bits of SYNCTR */
 760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_SYNCTR_EVAL_3 = VADC_G_SYNCTR_EVALR3_Msk  /**<Mask to set the EVAL3 bits of SYNCTR */
 761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_SYNCTR_EVAL_t;
 763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
 765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * DATA STRUCTURES
 766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
 767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
 769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma push
 770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma anon_unions
 771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
 772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning 586
 773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       activated or not.*/
 809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asctrl;
 812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 2;
 818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 26;
 824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t asmr;
 826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                  structure for background Request S
 832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 2;
 845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 4;
 855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                            : 6;
 860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t chctr;
 865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 8;
 871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 4;
 884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 12;
 897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bfl;
 899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****          uint32_t                           : 16;
 914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t bflc;
 916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                    : 24;
 938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qinr0;
 941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
 962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
 964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
 965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 1;
 971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 8;
 974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 3;
 976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qctrl0;
 978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
 981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
 982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
 983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 2;
 984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                   : 29;
 986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
 987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t qmr0;
 988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
 989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
 992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
 993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
 995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
 996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
 999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
1009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 16;
1017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globiclass;
1020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
1022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
1026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
1028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
1035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 2;
1036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
1037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 5;
1039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 17;
1040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globcfg;
1042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globbound;
1062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       result register until the previous value is r
1077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 6;
1078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t globrcr;
1081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 2;
1088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                             : 28;
1090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t clc;
1092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  conversion Mode.
1099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 3;
1115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                                 : 5;
1118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_iclass0;
1120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 13;
1137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 5;
1142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 1;
1151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                           : 2;
1153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t            : 4;
1177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_bound;
1179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 4;
1185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 1;
1187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                          : 24;
1190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     union
1202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        struct
1204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        {
1205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 16;
1206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       For normal operation select
1209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 2;
1212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t                         : 4;
1215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        };
1217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****        uint32_t g_rcr;
1218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t stepcfg;
1259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :6;
1273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  */
1275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t                          :20;
1276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t shscfg;
1278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Detailed result structure
1287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   union
1291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   {
1292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     struct
1293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     {
1294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     };
1303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     uint32_t res;
1304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   };
1305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
1307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if defined(__CC_ARM)
1310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma pop
1311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #elif defined(__TASKING__)
1312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   #pragma warning restore
1313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * static inline functions
1316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
1324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**************************************************************************************************
1329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * API Prototypes
1330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  **************************************************************************************************
1331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #ifdef __cplusplus
1333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** extern "C" {
1334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param None
1355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the configurations later in the program.
1382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * register to enable.
1397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  
1543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * calibration feature at runtime.
1573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 282              	 .loc 2 1607 0
 283              	 .cfi_startproc
 284              	 
 285              	 
 286              	 
 287 0000 80B4     	 push {r7}
 288              	.LCFI22:
 289              	 .cfi_def_cfa_offset 4
 290              	 .cfi_offset 7,-4
 291 0002 83B0     	 sub sp,sp,#12
 292              	.LCFI23:
 293              	 .cfi_def_cfa_offset 16
 294 0004 00AF     	 add r7,sp,#0
 295              	.LCFI24:
 296              	 .cfi_def_cfa_register 7
 297 0006 7860     	 str r0,[r7,#4]
 298 0008 3960     	 str r1,[r7]
1608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
 299              	 .loc 2 1610 0
 300 000a 7B68     	 ldr r3,[r7,#4]
 301 000c D3F88020 	 ldr r2,[r3,#128]
 302 0010 3B68     	 ldr r3,[r7]
 303 0012 1033     	 adds r3,r3,#16
 304 0014 1946     	 mov r1,r3
 305 0016 0123     	 movs r3,#1
 306 0018 8B40     	 lsls r3,r3,r1
 307 001a 1A43     	 orrs r2,r2,r3
 308 001c 7B68     	 ldr r3,[r7,#4]
 309 001e C3F88020 	 str r2,[r3,#128]
1611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
 310              	 .loc 2 1611 0
 311 0022 0C37     	 adds r7,r7,#12
 312              	.LCFI25:
 313              	 .cfi_def_cfa_offset 4
 314 0024 BD46     	 mov sp,r7
 315              	.LCFI26:
 316              	 .cfi_def_cfa_register 13
 317              	 
 318 0026 5DF8047B 	 ldr r7,[sp],#4
 319              	.LCFI27:
 320              	 .cfi_restore 7
 321              	 .cfi_def_cfa_offset 0
 322 002a 7047     	 bx lr
 323              	 .cfi_endproc
 324              	.LFE173:
 326              	 .section .text.XMC_VADC_GLOBAL_BackgroundTriggerConversion,"ax",%progbits
 327              	 .align 2
 328              	 .thumb
 329              	 .thumb_func
 331              	XMC_VADC_GLOBAL_BackgroundTriggerConversion:
 332              	.LFB206:
1612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
1672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b emuxif.
1696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \a event_type.
1792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
1820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
1829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * corresponding \a sr line.
1857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return None
1886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  /**
1908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   *
1917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * None.
1919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   */
1920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  {
1922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  }
1926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
1928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint8_t sst_value);
1981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
1982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
1983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
1984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
1988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the Sample and hold converter.
1993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
1994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
1996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
1997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
1999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
2000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
2002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
2003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
2005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
2006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_value gain value possible
2011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
2012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
2014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
2018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
2019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t gain_value,
2025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
2026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                        uint8_t ch_num);
2027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if(XMC_VADC_SHS_FULL_SET_REG == 1U)
2029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
2032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
2033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
2037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
2038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
2039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                            uint8_t ch_num);
2143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  program.
2208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * converter must be turned on.
2274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * in these channels.
2332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group waiting for ready signal
2341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_waiting_group  The VADC Group which expects a ready signal to start it's conversion.
2342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_origin_group  The VADC Group from which the eval_waiting_group will expect a ready s
2343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the ready signal in the eval_waiting_group .<BR>\n
2347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion all the slaves participating need to configure the ready signal.
2348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A slave group will also need to configure the ready signals coming from the other slave groups.
2349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync.slave's EVAL Bits (GxSYNCTR.EVALy).
2350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlaveReadySignal(XMC_VADC_GROUP_t *const group_ptr,
2355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_waiting_group,
2356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                             uint32_t eval_origin_group);
2357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *         uint32_t EVAL bits for the group
2363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Get the Eval bits of the group.<BR>\n
2366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in 
2368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr)
2373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return( group_ptr->SYNCTR & eval_mask);
2383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the VADC Group
2387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param eval_mask  mask to configure the eval bits
2388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Use XMC_VADC_SYNCTR_EVAL_t to create the mask.
2389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Set the Eval bits of the group.<BR>\n
2393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * For Synchronized conversion the master's ready signal configuration must be copied onto the slav
2394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).
2395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR>
2398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_SetSyncReadySignal(XMC_VADC_GROUP_t *const group_ptr, uint32_t 
2400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t eval_mask;
2402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncReadySignal:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
2403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
2405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk | VADC_G_SYNCTR_EVALR2_Msk | VADC_G_SYNCTR_EVALR3_Msk;
2406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #else
2407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   eval_mask = VADC_G_SYNCTR_EVALR1_Msk;
2408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR &= ~(eval_mask);
2410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SYNCTR |= mask;
2411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * of the slaves.
2426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sampling + converting.
2456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * capability to a compare value.
2498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
2539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   uint32_t   emux_config;
2544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
2548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
2549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
2551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
2552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
2553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
2554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
2559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param node    Service Request node Id
2568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   {
2627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   }
2629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return (input_value);
2631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
2633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return None
2639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
2674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
2695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
2798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
2881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return  <BR>
2962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
2980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
2981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
2988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
2990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
2991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
2993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
2996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
2997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
2998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
3004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
3006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
3009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
3011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
3013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
3014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
3025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
3026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
3031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
3033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
3034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr    Service Request Id
3039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
3044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
3045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
3046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
3047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
3052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
3060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
3061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
3062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
3063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
3066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
3070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
3072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
3081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
3082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
3083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
3084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
3085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
3088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
3090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
3094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
3099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
3104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
3105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
3106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
3107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
3112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the scan request source event .<BR>
3120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the scan request source.
3121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableEvent(XMC_VADC_GROUP_t *const group_ptr)
3128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
3130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR |= ((uint32_t)VADC_G_ASMR_ENSI_Msk);
3132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the scan request source event .<BR>
3141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the scan request source.
3142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENSI.
3144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableEvent(),<BR> XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()<BR>
3147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableEvent(XMC_VADC_GROUP_t *const group_ptr)
3149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
3151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENSI_Msk);
3153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                  conversion request from background request source
3177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
3195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     from background request source
3200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
3217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
3219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 333              	 .loc 2 3368 0
 334              	 .cfi_startproc
 335              	 
 336              	 
 337              	 
 338 0000 80B4     	 push {r7}
 339              	.LCFI28:
 340              	 .cfi_def_cfa_offset 4
 341              	 .cfi_offset 7,-4
 342 0002 83B0     	 sub sp,sp,#12
 343              	.LCFI29:
 344              	 .cfi_def_cfa_offset 16
 345 0004 00AF     	 add r7,sp,#0
 346              	.LCFI30:
 347              	 .cfi_def_cfa_register 7
 348 0006 7860     	 str r0,[r7,#4]
3369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 349              	 .loc 2 3370 0
 350 0008 7B68     	 ldr r3,[r7,#4]
 351 000a D3F80432 	 ldr r3,[r3,#516]
 352 000e 43F40072 	 orr r2,r3,#512
 353 0012 7B68     	 ldr r3,[r7,#4]
 354 0014 C3F80422 	 str r2,[r3,#516]
3371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
 355              	 .loc 2 3371 0
 356 0018 0C37     	 adds r7,r7,#12
 357              	.LCFI31:
 358              	 .cfi_def_cfa_offset 4
 359 001a BD46     	 mov sp,r7
 360              	.LCFI32:
 361              	 .cfi_def_cfa_register 13
 362              	 
 363 001c 5DF8047B 	 ldr r7,[sp],#4
 364              	.LCFI33:
 365              	 .cfi_restore 7
 366              	 .cfi_def_cfa_offset 0
 367 0020 7047     	 bx lr
 368              	 .cfi_endproc
 369              	.LFE206:
 371 0022 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundAddChannelToSequence,"ax",%progbits
 372              	 .align 2
 373              	 .thumb
 374              	 .thumb_func
 376              	XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:
 377              	.LFB207:
3372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * current scan sequence.
3385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Request source
3395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 378              	 .loc 2 3412 0
 379              	 .cfi_startproc
 380              	 
 381              	 
 382              	 
 383 0000 80B4     	 push {r7}
 384              	.LCFI34:
 385              	 .cfi_def_cfa_offset 4
 386              	 .cfi_offset 7,-4
 387 0002 85B0     	 sub sp,sp,#20
 388              	.LCFI35:
 389              	 .cfi_def_cfa_offset 24
 390 0004 00AF     	 add r7,sp,#0
 391              	.LCFI36:
 392              	 .cfi_def_cfa_register 7
 393 0006 F860     	 str r0,[r7,#12]
 394 0008 B960     	 str r1,[r7,#8]
 395 000a 7A60     	 str r2,[r7,#4]
3413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 396              	 .loc 2 3418 0
 397 000c FB68     	 ldr r3,[r7,#12]
 398 000e BA68     	 ldr r2,[r7,#8]
 399 0010 6032     	 adds r2,r2,#96
 400 0012 53F82220 	 ldr r2,[r3,r2,lsl#2]
 401 0016 7B68     	 ldr r3,[r7,#4]
 402 0018 0121     	 movs r1,#1
 403 001a 01FA03F3 	 lsl r3,r1,r3
 404 001e 42EA0301 	 orr r1,r2,r3
 405 0022 FB68     	 ldr r3,[r7,#12]
 406 0024 BA68     	 ldr r2,[r7,#8]
 407 0026 6032     	 adds r2,r2,#96
 408 0028 43F82210 	 str r1,[r3,r2,lsl#2]
3419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
 409              	 .loc 2 3419 0
 410 002c 1437     	 adds r7,r7,#20
 411              	.LCFI37:
 412              	 .cfi_def_cfa_offset 4
 413 002e BD46     	 mov sp,r7
 414              	.LCFI38:
 415              	 .cfi_def_cfa_register 13
 416              	 
 417 0030 5DF8047B 	 ldr r7,[sp],#4
 418              	.LCFI39:
 419              	 .cfi_restore 7
 420              	 .cfi_def_cfa_offset 0
 421 0034 7047     	 bx lr
 422              	 .cfi_endproc
 423              	.LFE207:
 425 0036 00BF     	 .section .text.XMC_VADC_GROUP_ResultInit,"ax",%progbits
 426              	 .align 2
 427              	 .thumb
 428              	 .thumb_func
 430              	XMC_VADC_GROUP_ResultInit:
 431              	.LFB233:
3420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * @return  <BR>
3483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
3511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Module Pointer", (global_ptr ==
3575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Module Pointer", (global_ptr =
3597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the background scan request source event .<BR>
3608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be activated for the background scan request sou
3609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptN
3614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong Module Pointer", (global_ptr == VADC))
3618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR |= ((uint32_t)VADC_BRSMR_ENSI_Msk);
3620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param global_ptr     Pointer to the VADC module
3624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the background scan request source event .<BR>
3629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the request source event will be deactivated for the background scan request s
3630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Other configurations w.r.t service node pointer are not done in this API.
3631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENSI.
3632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableEvent(),<BR> XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNo
3635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableEvent(XMC_VADC_GLOBAL_t *const global_ptr)
3637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong Module Pointer", (global_ptr == VADC))
3639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENSI_Msk);
3641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * source.
3659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
3685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
3706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Set the new gating mode */
3812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <ul>
3832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * </ul>
3835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to determine the queue length.
3858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the queue sequence.
3875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
3900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
3902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   {
3903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   }
3905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Clears the next valid channel in the queue buffer.<BR>\n
3915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A queue entry lined up for conversion can be removed and replaced by its successor. The call to 
3916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * first check if a valid queue entry is present in the queue backup register if present would clea
3917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid queue entries are present in the backup then the first channel
3918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * present in the queue buffer would be cleared.
3919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to clear a
3920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * channel from the queue.
3921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr);
3926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param entry      Details of the node being added
3931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Inserts a queue entry to the tail of the queue buffer.<BR>\n
3936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will insert a new channel into the queue buffer. The Queue will start conversion of
3937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channels from the head of the buffer. This Insert will place the entry after the last valid 
3938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If no valid entries are present then this API will place the Queue entry at the head of the buff
3939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Then the successive call to the insert will place the new entry after the last entry.
3940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register GxQINR0 for a single queue entry.
3941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
3944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
3946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                        const XMC_VADC_QUEUE_ENTRY_t entry)
3947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
3948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   /* Insert the channel physically and get the length of the queue*/
3950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QINR0 = entry.qinr0;
3951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
3952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there are no channels for conversion
3957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the next valid channel for conversion.
3958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the next entry in the queue request source for conversion.<BR>\n
3962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel in the queue lined up for conversion next.
3963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * API will return a valid queue entry from the queue buffer. First checks for the valid channel en
3964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the backup register and returns if present. If the valid entry has not been found in the back
3965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * then the queue buffer is searched for a valid entry. A call to this API would access the registe
3966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxQBUR0 to determine the next channel.
3967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueInsertChannel()<BR>
3970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr);
3972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *     int32_t Returns -1 if there is no channel that have been interrupted.
3977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *             Else would return the channel that is interrupted.
3978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Identifies the channel whose conversion was suspended.<BR>\n
3982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When using cancel inject repeat mode the canceled conversion will be placed in the backup regist
3983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will return the valid queue channel number from the backup register. This happens when 
3984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * there is a high priority conversion interrupts the conversion of queue request source. This forc
3985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to goto the backup register. A call to this API would access the register GxQBUR0 to determine t
3986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupted channel.
3987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
3990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
3991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr);
3992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
3993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
3994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
3995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
3996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
3997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
3998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
4000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will set the request source event for queue. This will trigger a interrupt if the
4001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
4002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV0.
4003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueClearReqSrcEvent()<BR>
4006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
4010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFLAG |= 1U;
4011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges the conversion complete request source event.<BR>\n
4020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
4021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFCLR.SEV0.
4022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
4025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
4027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
4029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->SEFCLR = (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
4030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
4036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
4037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
4040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will get the status of the queue request source event. Will return a true
4041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the event has occurred for queue. A call to this API would acces the register bit field  GxSE
4042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
4047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetReqSrcEventStatus:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV0_Msk);
4051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
4055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr     The service request line (Common SR lines, Group specific SR lines)
4056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Connects the event to the SR line of VADC.<BR>\n
4061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a queue request source event. Hence to get a
4062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node. A call to this API would configur
4063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxSEVNP.SEVNP0.
4064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
4069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables the trigger for queue request source.<BR>\n
4077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the queue request source. The trigger signal
4078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * edge will be selected from the QCTRL register. The Selection of a input will be done by
4079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectTrigger(). A call to this API would configure the register bit field G
4080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueDisableExternalTrigger()<BR>
4083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
4087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_ENTR_Msk;
4089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disables the trigger for queue request source.<BR>
4098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the queue request source.
4099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the queue request source. If any configuration was
4100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to select the trigger input in GxQCTRL0 will be not be effected.  A call to this API would confi
4101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * register bit field GxQMR0.ENTR
4102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
4105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
4107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
4109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->QMR0 &= ~((uint32_t)VADC_G_QMR0_ENTR_Msk);
4111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #endif
4113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
4115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
4117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  The channel being initialized
4118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config  Pointer to initialization data
4120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes the ADC channel for conversion.<BR>\n
4125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will do the channel related initializations. This includes configuration of the CHCTR s
4126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * and boundary flag settings. This must be called in the application in order to enable the conver
4127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * a channel. After a request source has been initialized this API has to be called for each channe
4128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * has to be converted.  A call to this API would configure the registers GxCHCTR GxBFL GxALIAS GxC
4129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * GxBFLC(depending on device) in order to configure the channel.
4130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
4135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config);
4136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param src_ch_num   Channel which will be converted by \b alias_ch_num, when called by the reque
4140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0 to 0x7]
4141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param alias_ch_num This is the alias channel (Ch-0 or Ch-1)
4142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range:[0x0, 0x1]
4143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sets the Alias channel(\b alias_ch_num) to convert from the source channel(\b src_ch_num).<BR>\n
4148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a alias configuration takes place the request source(queue/scan/background) will not call c
4149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Request sources will call the channel \b alias_ch_num , this would invoke the conversion of
4150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the pin associated with \b src_ch_num. The configuration of the alias channel (\b alias_ch_num) 
4151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * for the conversion.\n
4152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When an alias channel (Ch-0 or Ch-1) receives a trigger, it converts the aliased channel (\b src
4153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The properties of Ch-0 or Ch-1 (as indicated in \b alias_ch_num ) apply when \b src_ch_num is co
4154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  A call to this API would configure the register GxALIAS.
4155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Alias Channel (\b alias_ch_num) and the source channel (\b src_ch_num) cannot be the same.
4158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * If they are, that alias feature is not used for the conversion. In order to Reset the alias
4159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * feature that was previously selected this method can be used.
4160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  None.
4163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
4165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const uint32_t src_ch_num,
4166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                     const uint32_t alias_ch_num);
4167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input was converted
4171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *   bool  Returns true if there was violation w.r.t the specified boundaries.
4174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Determines if the result of the channel confines with the specified boundaries.<BR>\n
4177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * An application may not necessarily always need to know the exact value of the converted result, 
4178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * an indication if the generated result is within stipulated boundaries. Generation of Channel eve
4179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * to channel event generation criteria (Generate always, Never generate, Generate if result is out
4180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Generate if result is within bounds). When interrupts are not enabled, this API can be used to d
4181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * nature of the result.  A call to this API would access the registers GxCHCTR and GxCEFLAG in ord
4182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if a violation has occured.
4183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None
4186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
4188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr    Constant pointer to the VADC group
4191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num  Channel whose input is to be converted
4192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ref     Reference voltage
4194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the reference voltage for conversion.<BR>\n
4199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * An internal voltage reference (VARef) or an external voltage reference fed to Ch-0 can serve as 
4200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * for conversions.  A call to this API would configure the register bit field GxCHCTR.REFSEL.
4201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
4206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_REF_t ref);
4207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose i/p is to be converted
4211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param result_reg_num  Result Register associated with this channel
4213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the target result register.<BR>\n
4218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * There are upto 16 result registers which a channel can choose from to store the results of conve
4219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This selects only the group related result registers. A call to this API would configure the reg
4220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
4226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                              const uint32_t ch_num,
4227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                              const uint32_t result_reg_num);
4228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose conversion class is to be configured
4232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param conversion_class  conversion property to be associated with this channel
4234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Selects the conversion class registers.<BR>\n
4239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * It configures the channel to have a particular conversion class properties like sampling
4240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * time and resolution.  A call to this API would configure the register
4241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.ICLSEL.
4242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelGetInputClass().
4245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
4247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num,
4248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class); 
4249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_LEFT if the result are aligned to the left
4256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_ALIGN_RIGHT if the result are aligned to the right
4257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel result alignment.<BR>\n
4260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The results are aligned either to the left or to the right. A left aligned 10bit resolution has 
4261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * at bit2 where as a left aligned 8bit resolution starts at bit4. A call to this API would return 
4262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * configured alignment value.
4263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_ALIGN_t XMC_VADC_GROUP_ChannelGetResultAlignment(XMC_VADC_GROUP_t *
4269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num) 
4270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
4272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong Channel Number",
4273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_ALIGN_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESPOS_Msk) 
4276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 		  (uint32_t)VADC_G_CHCTR_RESPOS_Pos) );
4277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose result alignment is to be returned
4283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_CHANNEL_CONV_t Returns the configured input class for the \b ch_num
4286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the channel's input class for conversion for the required channel.<BR>\n
4289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The sampling time and resolution can be taken from any of the 4 possible Input class registers.
4290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would return the input class register that is taken up by \b ch_num for conversion.
4291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxCHCTR.RESPOS.
4292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetIclass().
4295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_CHANNEL_CONV_t XMC_VADC_GROUP_ChannelGetInputClass(XMC_VADC_GROUP_t *const
4297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                      const uint32_t ch_num) 
4298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
4300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetInputClass:Wrong Channel Number",
4301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
4302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_CHANNEL_CONV_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_ICLSEL_Msk) 
4304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 		  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos) );
4305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose associated result register is to be found
4311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  uint8_t  returns the Group result register to which it is linked to.
4314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *           <BR>Range: [0x0 to 0xF]
4315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Returns the result register associated with this channel.<br>\n
4318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  There are upto 16 result registers which a channel can choose from to store the results of conv
4319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  This returns only the group related result registers.  A call to this API would access the regi
4320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit field GxCHCTR.RESREG.
4321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
4326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be asserted
4330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Manually asserts a Channel event.<BR>\n
4336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * It is merely the channel event which is asserted. For this asserted event to lead to an interrup
4337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * have been bound to an SR and that SR must have been enabled. It can potentially lead to an inter
4338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * SR line is connected to an NVIC node.  A call to this API would configure the register bit field
4339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num);
4344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *      uint32_t returns the asserted channel events
4349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the Channel event flag register.<BR>\n
4352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The return is merely the channel events which are asserted.
4353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would read the register bit fields of GxCEFLAG.
4354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelClearEvent().
4357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_ChannelGetAssertedEvents(XMC_VADC_GROUP_t *const group_ptr)
4359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetAssertedEvents:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
4361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->CEFLAG);
4362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be acknowledged
4367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Acknowledges a Channel event.<BR>\n
4373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a channel event is raised after the conversion of that channel, it has to be cleared. This 
4374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the Channel event of a particular channel if it has occurred.  A call to this API would configur
4375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * bit fields of GxCEFCLR.
4376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent().
4379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ChannelClearEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelClearEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHAN
4385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->CEFCLR = (uint32_t)((uint32_t)1 << ch_num);
4386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is to be connected to a service request line
4391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param sr       The service request line to which the channel event is to be connected
4393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Binds a channel event to a requested Service Request line.<BR>\n
4398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event is connected to a service request line. For an event to result in an interrupt
4399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * request line must be enabled in VADC and the NVIC node which this service request line is connec
4400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * interrupt generation enabled.  A call to this API would configure the register bit fields of GxC
4401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()
4404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
4406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const uint32_t ch_num,
4407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const XMC_VADC_SR_t sr);
4408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param criteria The condition under which the channel may assert its channel event
4414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Defines the conditions under which a channel may assert its channel event.<BR>\n
4419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries.  A call to this API would configure the register bit field GxCHCTR.CHEVMO
4421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelTriggerEvent()<BR> XMC_VADC_GROUP_ChannelClearEvent()<BR>
4424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ChannelSetEventInterruptNode()<BR>
4425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria(XMC_VADC_GROUP_t *const group_ptr,
4427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    const uint32_t ch_num,
4428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria);
4429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param ch_num   Channel whose channel event is being configured
4434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range: [0x0 to 0x7]
4435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param boundary_sel Select the upper/lower boundary configuration .
4436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_sel.
4437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Configure the boundary selection for the given channel<BR>\n
4442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The channel event can be generated under the following conditions - Always, Never, Result Out of
4443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * inside the boundaries. The boundary values to which results are compared can be selected from se
4444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxCHCTR.BNDSELL or GxCHCTR.BNDSELU  .
4445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
4450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  const uint32_t ch_num,
4451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
4452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection);
4453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group
4456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg_num  Result register which is intended to be initialized
4457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0xF]
4458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param config       Pointer to initialization data
4459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Initializes a Group Result Register.<BR>
4464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Various options needed for the working of the result result will be configured with this API.
4465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would determine the result handling of the group registers. This API must be called after
4466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the channel Init (XMC_VADC_GROUP_ChannelInit())to initialize the result register that is selecte
4467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API would also determine if the result register that is being configured has to a part of a
4468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * In this API one can also configure the various result handling options line FIR/IIR filters and 
4469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Also configures the Data reduction to accumulate 2/3/4 results need to be done. This API will al
4470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * the result event generation.  A call to this API would configure the register GxRCR with the \b 
4471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_Disab
4474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
4476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                const uint32_t res_reg_num,
4477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                const XMC_VADC_RESULT_CONFIG_t *config)
4478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 432              	 .loc 2 4478 0
 433              	 .cfi_startproc
 434              	 
 435              	 
 436              	 
 437 0000 80B4     	 push {r7}
 438              	.LCFI40:
 439              	 .cfi_def_cfa_offset 4
 440              	 .cfi_offset 7,-4
 441 0002 85B0     	 sub sp,sp,#20
 442              	.LCFI41:
 443              	 .cfi_def_cfa_offset 24
 444 0004 00AF     	 add r7,sp,#0
 445              	.LCFI42:
 446              	 .cfi_def_cfa_register 7
 447 0006 F860     	 str r0,[r7,#12]
 448 0008 B960     	 str r1,[r7,#8]
 449 000a 7A60     	 str r2,[r7,#4]
4479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg_num] = config->g_rcr;
 450              	 .loc 2 4480 0
 451 000c 7B68     	 ldr r3,[r7,#4]
 452 000e 1968     	 ldr r1,[r3]
 453 0010 FB68     	 ldr r3,[r7,#12]
 454 0012 BA68     	 ldr r2,[r7,#8]
 455 0014 A032     	 adds r2,r2,#160
 456 0016 43F82210 	 str r1,[r3,r2,lsl#2]
4481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
 457              	 .loc 2 4482 0
 458 001a 1437     	 adds r7,r7,#20
 459              	.LCFI43:
 460              	 .cfi_def_cfa_offset 4
 461 001c BD46     	 mov sp,r7
 462              	.LCFI44:
 463              	 .cfi_def_cfa_register 13
 464              	 
 465 001e 5DF8047B 	 ldr r7,[sp],#4
 466              	.LCFI45:
 467              	 .cfi_restore 7
 468              	 .cfi_def_cfa_offset 0
 469 0022 7047     	 bx lr
 470              	 .cfi_endproc
 471              	.LFE233:
 473              	 .section .text.XMC_VADC_GROUP_GetResult,"ax",%progbits
 474              	 .align 2
 475              	 .thumb
 476              	 .thumb_func
 478              	XMC_VADC_GROUP_GetResult:
 479              	.LFB237:
4483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Register which is required to be a part of results FIFO
4488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *  Adds result register to Result FIFO.<BR>\n
4494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Sometimes, the rate of consumption of results by application software may not match the rate at 
4495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * results are produced. A Result FIFO thus helps a slow consumer to read out results without loss 
4496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * When a result register is added to fifo, it is in fact chained to its higher numbered neighbor. 
4497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Result Register-5 is to be added to FIFO, it gets chained to Result Register-6. Results are writ
4498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * while the same can be read out of Register-5 leisurely by software.
4499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.FEN.
4500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
4502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The FIFO is always read by the software with the lowest numbered result register.
4503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The hardware will write the results from the highest numbered result register.
4504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * None.
4507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg);
4509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be enabled
4513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Enables result event generation.<BR>\n
4519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Once the results of conversion are available, the result event (which is being enabled in this f
4520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if connected to a service request line(Group or Shared service request) can lead to an interrupt
4521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * not only necessary to enable the event, but also to connect it to a service request line. The
4522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * service request generation capability must also be enabled and so should the corresponding NVIC 
4523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetResultInterruptNode().
4527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_EnableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uint
4529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_EnableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] |= (uint32_t)VADC_G_RCR_SRGEN_Msk;
4534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register for which event generation is to be disabled
4539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    None
4542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Disable result event generation.<BR>\n
4545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This would just disable the event. It would not alter anything w.r.t the SR line if it was confi
4546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxRCR.SRGEN.
4547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableResultEvent().
4550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_DisableResultEvent(XMC_VADC_GROUP_t *const group_ptr, const uin
4552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
4554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_DisableResultEvent:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_R
4555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   group_ptr->RCR[res_reg] &= ~((uint32_t)VADC_G_RCR_SRGEN_Msk);
4556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    uint32_t  returns the complete result register GxRESy.
4564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result register completely (result of conversion as well as other info).<BR>\n
4567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * The Result register will have information regarding the channel that is requesting the conversio
4568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * if the result is valid, if the fast compare bit, Data Reduction Counter, and the request source 
4569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * All these information will be returned back. And if the user is polling for the result he can us
4570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * result if the valid bit is set. A call to this API would return the complete register GxRES.
4571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetResult().
4574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetDetailedResult(XMC_VADC_GROUP_t *const group_ptr, const 
4576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
4577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
4578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
4579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return(group_ptr->RES[res_reg]);
4580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
4581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** /**
4583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
4584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @param res_reg  Result Register from which the result of conversion is to be read out
4585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                 <BR>Range: [0x0 to 0xF]
4586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * @return
4587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *    XMC_VADC_RESULT_SIZE_t Result register values.
4588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *                <BR>Range:[ 0x0 to 0xFFF] (Result of single conversion. Accumulated results not c
4589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
4591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * Returns the result of the conversion.<BR>\n
4592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * This API will only return the result of the conversion and will strip out the other information 
4593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * in the result register. A call to this API would access the register bit field GxRES.RESULT.
4594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  *
4595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
4596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  * XMC_VADC_GROUP_GetDetailedResult().
4597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****  */
4598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
4599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****                                                                 const uint32_t res_reg)
4600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** {
 480              	 .loc 2 4600 0
 481              	 .cfi_startproc
 482              	 
 483              	 
 484              	 
 485 0000 80B4     	 push {r7}
 486              	.LCFI46:
 487              	 .cfi_def_cfa_offset 4
 488              	 .cfi_offset 7,-4
 489 0002 83B0     	 sub sp,sp,#12
 490              	.LCFI47:
 491              	 .cfi_def_cfa_offset 16
 492 0004 00AF     	 add r7,sp,#0
 493              	.LCFI48:
 494              	 .cfi_def_cfa_register 7
 495 0006 7860     	 str r0,[r7,#4]
 496 0008 3960     	 str r1,[r7]
4601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
4602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REG
4603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** 
4604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 497              	 .loc 2 4604 0
 498 000a 7B68     	 ldr r3,[r7,#4]
 499 000c 3A68     	 ldr r2,[r7]
 500 000e C032     	 adds r2,r2,#192
 501 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 502 0014 9BB2     	 uxth r3,r3
4605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_vadc.h **** }
 503              	 .loc 2 4605 0
 504 0016 1846     	 mov r0,r3
 505 0018 0C37     	 adds r7,r7,#12
 506              	.LCFI49:
 507              	 .cfi_def_cfa_offset 4
 508 001a BD46     	 mov sp,r7
 509              	.LCFI50:
 510              	 .cfi_def_cfa_register 13
 511              	 
 512 001c 5DF8047B 	 ldr r7,[sp],#4
 513              	.LCFI51:
 514              	 .cfi_restore 7
 515              	 .cfi_def_cfa_offset 0
 516 0020 7047     	 bx lr
 517              	 .cfi_endproc
 518              	.LFE237:
 520              	 .global global_config
 521 0022 00BF     	 .section .rodata.global_config,"a",%progbits
 522              	 .align 2
 525              	global_config:
 526 0000 00       	 .byte 0
 527 0001 00       	 .byte 0
 528 0002 00       	 .byte 0
 529 0003 00       	 .byte 0
 530 0004 04       	 .byte 4
 531 0005 00       	 .byte 0
 532 0006 0000     	 .space 2
 533 0008 00       	 .byte 0
 534 0009 00       	 .byte 0
 535 000a 00       	 .byte 0
 536 000b 00       	 .byte 0
 537 000c 00       	 .byte 0
 538 000d 00       	 .byte 0
 539 000e 00       	 .byte 0
 540 000f 00       	 .byte 0
 541 0010 0000     	 .space 2
 542 0012 00       	 .byte 0
 543 0013 00       	 .byte 0
 544 0014 00       	 .byte 0
 545 0015 000000   	 .space 3
 546              	 .global group_init_handle0
 547              	 .section .rodata.group_init_handle0,"a",%progbits
 548              	 .align 2
 551              	group_init_handle0:
 552 0000 00000000 	 .space 20
 552      00000000 
 552      00000000 
 552      00000000 
 552      00000000 
 553              	 .global global_iclass_config
 554              	 .section .rodata.global_iclass_config,"a",%progbits
 555              	 .align 2
 558              	global_iclass_config:
 559 0000 00000000 	 .space 4
 560              	 .global Channel_A_ch_config
 561              	 .section .data.Channel_A_ch_config,"aw",%progbits
 562              	 .align 2
 565              	Channel_A_ch_config:
 566 0000 02       	 .byte 2
 567 0001 00       	 .byte 0
 568 0002 2F       	 .byte 47
 569 0003 00       	 .byte 0
 570 0004 00000000 	 .word 0
 571 0008 00000000 	 .space 4
 572 000c 00       	 .byte 0
 573 000d 01       	 .byte 1
 574 000e 0000     	 .space 2
 575              	 .global Channel_A_res_config
 576              	 .section .bss.Channel_A_res_config,"aw",%nobits
 577              	 .align 2
 580              	Channel_A_res_config:
 581 0000 00000000 	 .space 4
 582              	 .global backgnd_rs_intr_handle
 583              	 .section .rodata.backgnd_rs_intr_handle,"a",%progbits
 584              	 .align 2
 587              	backgnd_rs_intr_handle:
 588 0000 10000000 	 .word 16
 589 0004 3F000000 	 .word 63
 590 0008 00000000 	 .word 0
 591              	 .global backgnd_config
 592              	 .section .rodata.backgnd_config,"a",%progbits
 593              	 .align 2
 596              	backgnd_config:
 597 0000 05       	 .byte 5
 598 0001 000000   	 .space 3
 599 0004 00       	 .space 1
 600 0005 00       	 .byte 0
 601 0006 00       	 .byte 0
 602 0007 00       	 .byte 0
 603 0008 08       	 .byte 8
 604 0009 000000   	 .space 3
 605              	 .global ADC_TEMPERATURE
 606              	 .section .data.ADC_TEMPERATURE,"aw",%progbits
 607              	 .align 2
 610              	ADC_TEMPERATURE:
 611 0000 00000000 	 .word backgnd_config
 612 0004 00000000 	 .word global_iclass_config
 613 0008 00000000 	 .word backgnd_rs_intr_handle
 614 000c 00000000 	 .space 4
 615 0010 06       	 .byte 6
 616 0011 01       	 .byte 1
 617 0012 0000     	 .space 2
 618              	 .global Temperature_Sensors
 619              	 .section .data.Temperature_Sensors,"aw",%progbits
 620              	 .align 2
 623              	Temperature_Sensors:
 624 0000 00000000 	 .word Channel_A_ch_config
 625 0004 00000000 	 .word Channel_A_res_config
 626 0008 00440040 	 .word 1073759232
 627 000c 008E0248 	 .word 1208126976
 628 0010 01       	 .byte 1
 629 0011 00       	 .byte 0
 630 0012 01       	 .byte 1
 631 0013 00       	 .space 1
 632              	 .global TemperatureLookupTable
 633              	 .section .data.TemperatureLookupTable,"aw",%progbits
 634              	 .align 2
 637              	TemperatureLookupTable:
 638 0000 D8FFFFFF 	 .word -40
 639 0004 5CE80200 	 .word 190556
 640 0008 D9FFFFFF 	 .word -39
 641 000c 75CC0200 	 .word 183413
 642 0010 DAFFFFFF 	 .word -38
 643 0014 3AAE0200 	 .word 175674
 644 0018 DBFFFFFF 	 .word -37
 645 001c DE8E0200 	 .word 167646
 646 0020 DCFFFFFF 	 .word -36
 647 0024 4C6F0200 	 .word 159564
 648 0028 DDFFFFFF 	 .word -35
 649 002c 2D500200 	 .word 151597
 650 0030 DEFFFFFF 	 .word -34
 651 0034 F6310200 	 .word 143862
 652 0038 DFFFFFFF 	 .word -33
 653 003c F4140200 	 .word 136436
 654 0040 E0FFFFFF 	 .word -32
 655 0044 54F90100 	 .word 129364
 656 0048 E1FFFFFF 	 .word -31
 657 004c 2BDF0100 	 .word 122667
 658 0050 E2FFFFFF 	 .word -30
 659 0054 7FC60100 	 .word 116351
 660 0058 E3FFFFFF 	 .word -29
 661 005c 49AF0100 	 .word 110409
 662 0060 E4FFFFFF 	 .word -28
 663 0064 7B990100 	 .word 104827
 664 0068 E5FFFFFF 	 .word -27
 665 006c 00850100 	 .word 99584
 666 0070 E6FFFFFF 	 .word -26
 667 0074 C4710100 	 .word 94660
 668 0078 E7FFFFFF 	 .word -25
 669 007c B05F0100 	 .word 90032
 670 0080 E8FFFFFF 	 .word -24
 671 0084 AD4E0100 	 .word 85677
 672 0088 E9FFFFFF 	 .word -23
 673 008c A63E0100 	 .word 81574
 674 0090 EAFFFFFF 	 .word -22
 675 0094 872F0100 	 .word 77703
 676 0098 EBFFFFFF 	 .word -21
 677 009c 3C210100 	 .word 74044
 678 00a0 ECFFFFFF 	 .word -20
 679 00a4 B5130100 	 .word 70581
 680 00a8 EDFFFFFF 	 .word -19
 681 00ac E2060100 	 .word 67298
 682 00b0 EEFFFFFF 	 .word -18
 683 00b4 B7FA0000 	 .word 64183
 684 00b8 EFFFFFFF 	 .word -17
 685 00bc 27EF0000 	 .word 61223
 686 00c0 F0FFFFFF 	 .word -16
 687 00c4 28E40000 	 .word 58408
 688 00c8 F1FFFFFF 	 .word -15
 689 00cc B0D90000 	 .word 55728
 690 00d0 F2FFFFFF 	 .word -14
 691 00d4 B8CF0000 	 .word 53176
 692 00d8 F3FFFFFF 	 .word -13
 693 00dc 39C60000 	 .word 50745
 694 00e0 F4FFFFFF 	 .word -12
 695 00e4 2DBD0000 	 .word 48429
 696 00e8 F5FFFFFF 	 .word -11
 697 00ec 8EB40000 	 .word 46222
 698 00f0 F6FFFFFF 	 .word -10
 699 00f4 58AC0000 	 .word 44120
 700 00f8 F7FFFFFF 	 .word -9
 701 00fc 86A40000 	 .word 42118
 702 0100 F8FFFFFF 	 .word -8
 703 0104 149D0000 	 .word 40212
 704 0108 F9FFFFFF 	 .word -7
 705 010c FE950000 	 .word 38398
 706 0110 FAFFFFFF 	 .word -6
 707 0114 428F0000 	 .word 36674
 708 0118 FBFFFFFF 	 .word -5
 709 011c DC880000 	 .word 35036
 710 0120 FCFFFFFF 	 .word -4
 711 0124 C8820000 	 .word 33480
 712 0128 FDFFFFFF 	 .word -3
 713 012c 037D0000 	 .word 32003
 714 0130 FEFFFFFF 	 .word -2
 715 0134 8A770000 	 .word 30602
 716 0138 FFFFFFFF 	 .word -1
 717 013c 5B720000 	 .word 29275
 718 0140 00000000 	 .word 0
 719 0144 716D0000 	 .word 28017
 720 0148 01000000 	 .word 1
 721 014c C9680000 	 .word 26825
 722 0150 02000000 	 .word 2
 723 0154 61640000 	 .word 25697
 724 0158 03000000 	 .word 3
 725 015c 35600000 	 .word 24629
 726 0160 04000000 	 .word 4
 727 0164 415C0000 	 .word 23617
 728 0168 05000000 	 .word 5
 729 016c 83580000 	 .word 22659
 730 0170 06000000 	 .word 6
 731 0174 F8540000 	 .word 21752
 732 0178 07000000 	 .word 7
 733 017c 9B510000 	 .word 20891
 734 0180 08000000 	 .word 8
 735 0184 6A4E0000 	 .word 20074
 736 0188 09000000 	 .word 9
 737 018c 624B0000 	 .word 19298
 738 0190 0A000000 	 .word 10
 739 0194 80480000 	 .word 18560
 740 0198 0B000000 	 .word 11
 741 019c 31480000 	 .word 18481
 742 01a0 0C000000 	 .word 12
 743 01a4 E4460000 	 .word 18148
 744 01a8 0D000000 	 .word 13
 745 01ac DF440000 	 .word 17631
 746 01b0 0E000000 	 .word 14
 747 01b4 5F420000 	 .word 16991
 748 01b8 0F000000 	 .word 15
 749 01bc 973F0000 	 .word 16279
 750 01c0 10000000 	 .word 16
 751 01c4 AF3C0000 	 .word 15535
 752 01c8 11000000 	 .word 17
 753 01cc C2390000 	 .word 14786
 754 01d0 12000000 	 .word 18
 755 01d4 E7360000 	 .word 14055
 756 01d8 13000000 	 .word 19
 757 01dc 29340000 	 .word 13353
 758 01e0 14000000 	 .word 20
 759 01e4 92310000 	 .word 12690
 760 01e8 15000000 	 .word 21
 761 01ec 242F0000 	 .word 12068
 762 01f0 16000000 	 .word 22
 763 01f4 E22C0000 	 .word 11490
 764 01f8 17000000 	 .word 23
 765 01fc C92A0000 	 .word 10953
 766 0200 18000000 	 .word 24
 767 0204 DA280000 	 .word 10458
 768 0208 19000000 	 .word 25
 769 020c 10270000 	 .word 10000
 770 0210 1A000000 	 .word 26
 771 0214 68250000 	 .word 9576
 772 0218 1B000000 	 .word 27
 773 021c DF230000 	 .word 9183
 774 0220 1C000000 	 .word 28
 775 0224 72220000 	 .word 8818
 776 0228 1D000000 	 .word 29
 777 022c 1E210000 	 .word 8478
 778 0230 1E000000 	 .word 30
 779 0234 E01F0000 	 .word 8160
 780 0238 1F000000 	 .word 31
 781 023c B41E0000 	 .word 7860
 782 0240 20000000 	 .word 32
 783 0244 9A1D0000 	 .word 7578
 784 0248 21000000 	 .word 33
 785 024c 8E1C0000 	 .word 7310
 786 0250 22000000 	 .word 34
 787 0254 901B0000 	 .word 7056
 788 0258 23000000 	 .word 35
 789 025c 9D1A0000 	 .word 6813
 790 0260 24000000 	 .word 36
 791 0264 B4190000 	 .word 6580
 792 0268 25000000 	 .word 37
 793 026c D5180000 	 .word 6357
 794 0270 26000000 	 .word 38
 795 0274 FD170000 	 .word 6141
 796 0278 27000000 	 .word 39
 797 027c 2E170000 	 .word 5934
 798 0280 28000000 	 .word 40
 799 0284 66160000 	 .word 5734
 800 0288 29000000 	 .word 41
 801 028c A4150000 	 .word 5540
 802 0290 2A000000 	 .word 42
 803 0294 E9140000 	 .word 5353
 804 0298 2B000000 	 .word 43
 805 029c 34140000 	 .word 5172
 806 02a0 2C000000 	 .word 44
 807 02a4 85130000 	 .word 4997
 808 02a8 2D000000 	 .word 45
 809 02ac DC120000 	 .word 4828
 810 02b0 2E000000 	 .word 46
 811 02b4 39120000 	 .word 4665
 812 02b8 2F000000 	 .word 47
 813 02bc 9B110000 	 .word 4507
 814 02c0 30000000 	 .word 48
 815 02c4 02110000 	 .word 4354
 816 02c8 31000000 	 .word 49
 817 02cc 6F100000 	 .word 4207
 818 02d0 32000000 	 .word 50
 819 02d4 E10F0000 	 .word 4065
 820 02d8 33000000 	 .word 51
 821 02dc 570F0000 	 .word 3927
 822 02e0 34000000 	 .word 52
 823 02e4 D10E0000 	 .word 3793
 824 02e8 35000000 	 .word 53
 825 02ec 4F0E0000 	 .word 3663
 826 02f0 36000000 	 .word 54
 827 02f4 D10D0000 	 .word 3537
 828 02f8 37000000 	 .word 55
 829 02fc 560D0000 	 .word 3414
 830 0300 38000000 	 .word 56
 831 0304 DD0C0000 	 .word 3293
 832 0308 39000000 	 .word 57
 833 030c 670C0000 	 .word 3175
 834 0310 3A000000 	 .word 58
 835 0314 F10B0000 	 .word 3057
 836 0318 3B000000 	 .word 59
 837 031c 7D0B0000 	 .word 2941
 838 0320 3C000000 	 .word 60
 839 0324 090B0000 	 .word 2825
 840 0328 3D000000 	 .word 61
 841 032c D80A0000 	 .word 2776
 842 0330 3E000000 	 .word 62
 843 0334 9D0A0000 	 .word 2717
 844 0338 3F000000 	 .word 63
 845 033c 5C0A0000 	 .word 2652
 846 0340 40000000 	 .word 64
 847 0344 150A0000 	 .word 2581
 848 0348 41000000 	 .word 65
 849 034c CB090000 	 .word 2507
 850 0350 42000000 	 .word 66
 851 0354 7F090000 	 .word 2431
 852 0358 43000000 	 .word 67
 853 035c 33090000 	 .word 2355
 854 0360 44000000 	 .word 68
 855 0364 E8080000 	 .word 2280
 856 0368 45000000 	 .word 69
 857 036c 9E080000 	 .word 2206
 858 0370 46000000 	 .word 70
 859 0374 57080000 	 .word 2135
 860 0378 47000000 	 .word 71
 861 037c 12080000 	 .word 2066
 862 0380 48000000 	 .word 72
 863 0384 D0070000 	 .word 2000
 864 0388 49000000 	 .word 73
 865 038c 91070000 	 .word 1937
 866 0390 4A000000 	 .word 74
 867 0394 56070000 	 .word 1878
 868 0398 4B000000 	 .word 75
 869 039c 1E070000 	 .word 1822
 870 03a0 4C000000 	 .word 76
 871 03a4 E9060000 	 .word 1769
 872 03a8 4D000000 	 .word 77
 873 03ac B7060000 	 .word 1719
 874 03b0 4E000000 	 .word 78
 875 03b4 88060000 	 .word 1672
 876 03b8 4F000000 	 .word 79
 877 03bc 5C060000 	 .word 1628
 878 03c0 50000000 	 .word 80
 879 03c4 32060000 	 .word 1586
 880 03c8 51000000 	 .word 81
 881 03cc 09060000 	 .word 1545
 882 03d0 52000000 	 .word 82
 883 03d4 E3050000 	 .word 1507
 884 03d8 53000000 	 .word 83
 885 03dc BE050000 	 .word 1470
 886 03e0 54000000 	 .word 84
 887 03e4 9B050000 	 .word 1435
 888 03e8 55000000 	 .word 85
 889 03ec 78050000 	 .word 1400
 890 03f0 56000000 	 .word 86
 891 03f4 56050000 	 .word 1366
 892 03f8 57000000 	 .word 87
 893 03fc 35050000 	 .word 1333
 894 0400 58000000 	 .word 88
 895 0404 14050000 	 .word 1300
 896 0408 59000000 	 .word 89
 897 040c F4040000 	 .word 1268
 898 0410 5A000000 	 .word 90
 899 0414 D4040000 	 .word 1236
 900 0418 5B000000 	 .word 91
 901 041c B3040000 	 .word 1203
 902 0420 5C000000 	 .word 92
 903 0424 93040000 	 .word 1171
 904 0428 5D000000 	 .word 93
 905 042c 73040000 	 .word 1139
 906 0430 5E000000 	 .word 94
 907 0434 52040000 	 .word 1106
 908 0438 5F000000 	 .word 95
 909 043c 32040000 	 .word 1074
 910 0440 60000000 	 .word 96
 911 0444 12040000 	 .word 1042
 912 0448 61000000 	 .word 97
 913 044c F2030000 	 .word 1010
 914 0450 62000000 	 .word 98
 915 0454 D2030000 	 .word 978
 916 0458 63000000 	 .word 99
 917 045c B4030000 	 .word 948
 918 0460 64000000 	 .word 100
 919 0464 96030000 	 .word 918
 920 0468 65000000 	 .word 101
 921 046c 78030000 	 .word 888
 922 0470 66000000 	 .word 102
 923 0474 5D030000 	 .word 861
 924 0478 67000000 	 .word 103
 925 047c 42030000 	 .word 834
 926 0480 68000000 	 .word 104
 927 0484 29030000 	 .word 809
 928 0488 69000000 	 .word 105
 929 048c 13030000 	 .word 787
 930 0490 6A000000 	 .word 106
 931 0494 FE020000 	 .word 766
 932 0498 6B000000 	 .word 107
 933 049c EC020000 	 .word 748
 934 04a0 6C000000 	 .word 108
 935 04a4 DD020000 	 .word 733
 936 04a8 6D000000 	 .word 109
 937 04ac D1020000 	 .word 721
 938 04b0 6E000000 	 .word 110
 939 04b4 C9020000 	 .word 713
 940              	 .comm MeasurementRunning,1,1
 941              	 .comm SensorVoltages,2,4
 942              	 .section .text.Sensor_Temperature_ADC_InitGlobal,"ax",%progbits
 943              	 .align 2
 944              	 .global Sensor_Temperature_ADC_InitGlobal
 945              	 .thumb
 946              	 .thumb_func
 948              	Sensor_Temperature_ADC_InitGlobal:
 949              	.LFB252:
 950              	 .file 3 "../sensor/Sensor_Temperature.c"
   1:../sensor/Sensor_Temperature.c **** /*
   2:../sensor/Sensor_Temperature.c ****  * Sensor_Temperature.c
   3:../sensor/Sensor_Temperature.c ****  *
   4:../sensor/Sensor_Temperature.c ****  *  Created on: Nov 19, 2016
   5:../sensor/Sensor_Temperature.c ****  *      Author: Andreas Lackner
   6:../sensor/Sensor_Temperature.c ****  */
   7:../sensor/Sensor_Temperature.c **** 
   8:../sensor/Sensor_Temperature.c **** /*********************************************************************************
   9:../sensor/Sensor_Temperature.c ****  * Includes
  10:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
  11:../sensor/Sensor_Temperature.c **** #include "Sensor_Temperature.h"
  12:../sensor/Sensor_Temperature.c **** 
  13:../sensor/Sensor_Temperature.c **** #include <xmc_vadc.h>
  14:../sensor/Sensor_Temperature.c **** #include <xmc_gpio.h>
  15:../sensor/Sensor_Temperature.c **** 
  16:../sensor/Sensor_Temperature.c **** /*********************************************************************************
  17:../sensor/Sensor_Temperature.c ****  * Local macros
  18:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
  19:../sensor/Sensor_Temperature.c **** 
  20:../sensor/Sensor_Temperature.c **** #define ADC_MODULE (XMC_VADC_GLOBAL_t*)VADC
  21:../sensor/Sensor_Temperature.c **** #define Adc_Measurement_Handler IRQ_Hdlr_16
  22:../sensor/Sensor_Temperature.c **** 
  23:../sensor/Sensor_Temperature.c **** #define ADC_CHANNEL_COUNT (1U)
  24:../sensor/Sensor_Temperature.c **** #define ADC_MEASUREMENT_ICLASS_NUM (0U)
  25:../sensor/Sensor_Temperature.c **** 
  26:../sensor/Sensor_Temperature.c **** #define SENSOR_CFG_A &Temperature_Sensors[0]
  27:../sensor/Sensor_Temperature.c **** 
  28:../sensor/Sensor_Temperature.c **** #define SENSOR_REF_VOLTAGE 5
  29:../sensor/Sensor_Temperature.c **** #define ADC_RESOLUTION 0.00082
  30:../sensor/Sensor_Temperature.c **** #define R1 10000
  31:../sensor/Sensor_Temperature.c **** 
  32:../sensor/Sensor_Temperature.c **** #define NTC_LOOKUP_ENTRIES 151
  33:../sensor/Sensor_Temperature.c **** 
  34:../sensor/Sensor_Temperature.c **** /*********************************************************************************
  35:../sensor/Sensor_Temperature.c ****  * Local datatypes
  36:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
  37:../sensor/Sensor_Temperature.c **** 
  38:../sensor/Sensor_Temperature.c **** typedef struct ADC_MEASUREMENT_ISR
  39:../sensor/Sensor_Temperature.c **** {
  40:../sensor/Sensor_Temperature.c ****   uint32_t node_id; 		/**< This holds the Node ID of the NVIC.*/
  41:../sensor/Sensor_Temperature.c ****   uint32_t priority; 		/**< This holds the NVIC priority.*/
  42:../sensor/Sensor_Temperature.c ****   uint32_t sub_priority; 	/**< This holds the SubPriority of the NVIC. for Only XMC4x Devices*/
  43:../sensor/Sensor_Temperature.c **** } ADC_MEASUREMENT_ISR_t;
  44:../sensor/Sensor_Temperature.c **** 
  45:../sensor/Sensor_Temperature.c **** typedef struct ADC_MEASUREMENT
  46:../sensor/Sensor_Temperature.c **** {
  47:../sensor/Sensor_Temperature.c ****   const XMC_VADC_BACKGROUND_CONFIG_t *const backgnd_config_handle; /**< This holds the LLD Backgrou
  48:../sensor/Sensor_Temperature.c ****   const XMC_VADC_GLOBAL_CLASS_t *const iclass_config_handle;  /**< This holds the adc global ICLASS
  49:../sensor/Sensor_Temperature.c **** 
  50:../sensor/Sensor_Temperature.c ****   const ADC_MEASUREMENT_ISR_t *const req_src_intr_handle; 	 /**< This has the NVIC configuration st
  51:../sensor/Sensor_Temperature.c ****   const ADC_MEASUREMENT_ISR_t *const result_intr_handle; 	 /**< This has the NVIC configuration str
  52:../sensor/Sensor_Temperature.c **** 
  53:../sensor/Sensor_Temperature.c ****   const XMC_VADC_SR_t srv_req_node; 	  /**< Service Request Line selected*/
  54:../sensor/Sensor_Temperature.c ****   const bool start_conversion; 			  /**< This indicates whether to start at initialization of the A
  55:../sensor/Sensor_Temperature.c **** } ADC_MEASUREMENT_t;
  56:../sensor/Sensor_Temperature.c **** 
  57:../sensor/Sensor_Temperature.c **** typedef struct SensorAnalogPort{
  58:../sensor/Sensor_Temperature.c ****   XMC_VADC_CHANNEL_CONFIG_t *ch_handle; /**< This holds the VADC Channel LLD struct*/
  59:../sensor/Sensor_Temperature.c ****   XMC_VADC_RESULT_CONFIG_t *res_handle; /**< This hold the VADC LLD Result handler*/
  60:../sensor/Sensor_Temperature.c ****   XMC_VADC_GROUP_t *group_handle; 		/**< This holds the group to which the channel belongs*/
  61:../sensor/Sensor_Temperature.c **** 
  62:../sensor/Sensor_Temperature.c ****   XMC_GPIO_PORT_t *analog_port;         /**< Port number used */
  63:../sensor/Sensor_Temperature.c ****   uint8_t analog_pin;                   /**< Pin number used */
  64:../sensor/Sensor_Temperature.c **** 
  65:../sensor/Sensor_Temperature.c ****   uint8_t group_index; 					/**< This holds the group index*/
  66:../sensor/Sensor_Temperature.c ****   uint8_t ch_num;
  67:../sensor/Sensor_Temperature.c **** } SensorAnalogPort_t;
  68:../sensor/Sensor_Temperature.c **** 
  69:../sensor/Sensor_Temperature.c **** typedef struct NTCLookupEntry{
  70:../sensor/Sensor_Temperature.c **** 	int temperature;
  71:../sensor/Sensor_Temperature.c **** 	uint32_t resistence;
  72:../sensor/Sensor_Temperature.c **** }NTCLookupEntry_t;
  73:../sensor/Sensor_Temperature.c **** 
  74:../sensor/Sensor_Temperature.c **** /*********************************************************************************
  75:../sensor/Sensor_Temperature.c ****  * Local data
  76:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
  77:../sensor/Sensor_Temperature.c **** 
  78:../sensor/Sensor_Temperature.c **** /******************************* GLOBAL ADC CONFIG *******************************/
  79:../sensor/Sensor_Temperature.c **** 
  80:../sensor/Sensor_Temperature.c **** const XMC_VADC_GLOBAL_CONFIG_t global_config =
  81:../sensor/Sensor_Temperature.c **** {
  82:../sensor/Sensor_Temperature.c ****   .boundary0    = (uint32_t) 0, /* Lower boundary value for Normal comparison mode*/
  83:../sensor/Sensor_Temperature.c ****   .boundary1    = (uint32_t) 0, /* Upper boundary value for Normal comparison mode*/
  84:../sensor/Sensor_Temperature.c **** 
  85:../sensor/Sensor_Temperature.c ****   .clock_config = {
  86:../sensor/Sensor_Temperature.c **** 	                .analog_clock_divider  = (uint32_t) 4, /*Divider Factor for the Analog Internal Cl
  87:../sensor/Sensor_Temperature.c **** 	                .arbiter_clock_divider = (uint32_t) 0, /*Divider Factor for the Arbiter Clock*/
  88:../sensor/Sensor_Temperature.c **** 	                .msb_conversion_clock  = (uint32_t) 0, /*Double Clock for the MSB Conversion */
  89:../sensor/Sensor_Temperature.c **** 	              },
  90:../sensor/Sensor_Temperature.c **** 
  91:../sensor/Sensor_Temperature.c ****   .class0 = {
  92:../sensor/Sensor_Temperature.c ****      	      .sample_time_std_conv            = (uint32_t) 0,  		  /*The Sample time is (2*tadci)*/
  93:../sensor/Sensor_Temperature.c ****      	      .conversion_mode_standard        = XMC_VADC_CONVMODE_12BIT, /* 12bit conversion Selecte
  94:../sensor/Sensor_Temperature.c **** 
  95:../sensor/Sensor_Temperature.c ****      	      .sampling_phase_emux_channel     = (uint32_t) 0,			  /*The Sample time is (2*tadci)*/
  96:../sensor/Sensor_Temperature.c **** 			  .conversion_mode_emux            = XMC_VADC_CONVMODE_12BIT, /* 12bit conversion Selected*/
  97:../sensor/Sensor_Temperature.c **** 
  98:../sensor/Sensor_Temperature.c **** 		    },  /* !<ICLASS-0 */
  99:../sensor/Sensor_Temperature.c ****   .class1 = {
 100:../sensor/Sensor_Temperature.c ****      	      .sample_time_std_conv = (uint32_t) 0,			  /*The Sample time is (2*tadci)*/
 101:../sensor/Sensor_Temperature.c ****      	      .conversion_mode_standard        = XMC_VADC_CONVMODE_12BIT, /* 12bit conversion Selecte
 102:../sensor/Sensor_Temperature.c **** 
 103:../sensor/Sensor_Temperature.c ****      	      .sampling_phase_emux_channel     = (uint32_t) 0,			  /*The Sample time is (2*tadci)*/
 104:../sensor/Sensor_Temperature.c **** 			  .conversion_mode_emux            = XMC_VADC_CONVMODE_12BIT, /* 12bit conversion Selected*/
 105:../sensor/Sensor_Temperature.c **** 
 106:../sensor/Sensor_Temperature.c ****             }, /* !< ICLASS-1 */
 107:../sensor/Sensor_Temperature.c **** 
 108:../sensor/Sensor_Temperature.c ****   .data_reduction_control         = (uint32_t) 0, /* Data Reduction disabled*/
 109:../sensor/Sensor_Temperature.c ****   .wait_for_read_mode             = (uint32_t) 0, /* GLOBRES Register will not be overwriten untill
 110:../sensor/Sensor_Temperature.c ****   .event_gen_enable               = (uint32_t) 0, /* Result Event from GLOBRES is disabled*/
 111:../sensor/Sensor_Temperature.c ****   .disable_sleep_mode_control     = (uint32_t) 0  /* Sleep mode is enabled*/
 112:../sensor/Sensor_Temperature.c **** };
 113:../sensor/Sensor_Temperature.c **** 
 114:../sensor/Sensor_Temperature.c **** const XMC_VADC_GROUP_CONFIG_t group_init_handle0 =
 115:../sensor/Sensor_Temperature.c **** {
 116:../sensor/Sensor_Temperature.c ****   .emux_config	= {
 117:../sensor/Sensor_Temperature.c **** 					.stce_usage                = (uint32_t) 0, 					 /*Use STCE when the setting changes*/
 118:../sensor/Sensor_Temperature.c **** 					.emux_mode                 = XMC_VADC_GROUP_EMUXMODE_SWCTRL, /* Mode for Emux conversion*/
 119:../sensor/Sensor_Temperature.c **** 					.emux_coding               = XMC_VADC_GROUP_EMUXCODE_BINARY, /*Channel progression - binary fo
 120:../sensor/Sensor_Temperature.c **** 					.starting_external_channel = (uint32_t) 0,                   /* Channel starts at 0 for EMUX*/
 121:../sensor/Sensor_Temperature.c **** 					.connected_channel         = (uint32_t) 0                    /* Channel connected to EMUX*/
 122:../sensor/Sensor_Temperature.c **** 				   },
 123:../sensor/Sensor_Temperature.c ****   .class0 		= {
 124:../sensor/Sensor_Temperature.c ****              	    .sample_time_std_conv            = (uint32_t) 0,                /*The Sample time
 125:../sensor/Sensor_Temperature.c ****              	    .conversion_mode_standard        = XMC_VADC_CONVMODE_12BIT,     /* 12bit conversi
 126:../sensor/Sensor_Temperature.c ****              	    .sampling_phase_emux_channel     = (uint32_t) 0,                /*The Sample time
 127:../sensor/Sensor_Temperature.c **** 					.conversion_mode_emux            = XMC_VADC_CONVMODE_12BIT      /* 12bit conversion Selected*/
 128:../sensor/Sensor_Temperature.c **** 		    	  },  /* !<ICLASS-0 */
 129:../sensor/Sensor_Temperature.c ****   .class1   	= {
 130:../sensor/Sensor_Temperature.c ****              	    .sample_time_std_conv = (uint32_t) 0,                /*The Sample time is (2*tadc
 131:../sensor/Sensor_Temperature.c ****              	    .conversion_mode_standard        = XMC_VADC_CONVMODE_12BIT,     /* 12bit conversi
 132:../sensor/Sensor_Temperature.c ****              	    .sampling_phase_emux_channel     = (uint32_t) 0,                /*The Sample time
 133:../sensor/Sensor_Temperature.c **** 					.conversion_mode_emux            = XMC_VADC_CONVMODE_12BIT      /* 12bit conversion Selected*/
 134:../sensor/Sensor_Temperature.c ****              	  }, /* !< ICLASS-1 */
 135:../sensor/Sensor_Temperature.c ****   .boundary0    = (uint32_t) 0,  /* Lower boundary value for Normal comparison mode*/
 136:../sensor/Sensor_Temperature.c ****   .boundary1	= (uint32_t) 0,  /* Upper boundary value for Normal comparison mode*/
 137:../sensor/Sensor_Temperature.c ****   .arbitration_round_length = (uint32_t) 0,  /* 4 arbitration slots per round selected (tarb = 4*ta
 138:../sensor/Sensor_Temperature.c ****   .arbiter_mode             = (uint32_t) XMC_VADC_GROUP_ARBMODE_ALWAYS,	/*Determines when the arbit
 139:../sensor/Sensor_Temperature.c **** };
 140:../sensor/Sensor_Temperature.c **** 
 141:../sensor/Sensor_Temperature.c **** /******************************* CHANNEL CONFIG *******************************/
 142:../sensor/Sensor_Temperature.c **** 
 143:../sensor/Sensor_Temperature.c **** /* Global iclass0 configuration*/
 144:../sensor/Sensor_Temperature.c **** const XMC_VADC_GLOBAL_CLASS_t global_iclass_config =
 145:../sensor/Sensor_Temperature.c **** {
 146:../sensor/Sensor_Temperature.c ****   .conversion_mode_standard  = (uint32_t) XMC_VADC_CONVMODE_12BIT,
 147:../sensor/Sensor_Temperature.c ****   .sample_time_std_conv	     = (uint32_t) 0,
 148:../sensor/Sensor_Temperature.c **** };
 149:../sensor/Sensor_Temperature.c **** 
 150:../sensor/Sensor_Temperature.c **** /*********************** Channel_A Configurations ************************************/
 151:../sensor/Sensor_Temperature.c **** 
 152:../sensor/Sensor_Temperature.c **** 
 153:../sensor/Sensor_Temperature.c **** /*Channel_A ADC Channel configuration structure*/
 154:../sensor/Sensor_Temperature.c **** XMC_VADC_CHANNEL_CONFIG_t  Channel_A_ch_config =
 155:../sensor/Sensor_Temperature.c **** {
 156:../sensor/Sensor_Temperature.c ****   .input_class                = (uint32_t) XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,  /* Global ICLASS 0
 157:../sensor/Sensor_Temperature.c ****   .lower_boundary_select 	  = (uint32_t) XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0,
 158:../sensor/Sensor_Temperature.c ****   .upper_boundary_select 	  = (uint32_t) XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0,
 159:../sensor/Sensor_Temperature.c ****   .event_gen_criteria         = (uint32_t) XMC_VADC_CHANNEL_EVGEN_NEVER, /*Channel Event disabled *
 160:../sensor/Sensor_Temperature.c ****   .sync_conversion  		  = (uint32_t) 0,                            /* Sync feature disabled*/
 161:../sensor/Sensor_Temperature.c ****   .alternate_reference        = (uint32_t) XMC_VADC_CHANNEL_REF_INTREF,  /* Internal reference sele
 162:../sensor/Sensor_Temperature.c ****   .result_reg_number          = (uint32_t) 15,                           /* GxRES[15] selected */
 163:../sensor/Sensor_Temperature.c ****   .use_global_result          = (uint32_t) 0, 				             /* Use Group result register*/
 164:../sensor/Sensor_Temperature.c ****   .result_alignment           = (uint32_t) XMC_VADC_RESULT_ALIGN_RIGHT,  /* Result alignment - Righ
 165:../sensor/Sensor_Temperature.c ****   .broken_wire_detect_channel = (uint32_t) XMC_VADC_CHANNEL_BWDCH_VAGND, /* No Broken wire mode sel
 166:../sensor/Sensor_Temperature.c ****   .broken_wire_detect		  = (uint32_t) 0,    		                 /* No Broken wire detection*/
 167:../sensor/Sensor_Temperature.c ****   .bfl                        = (uint32_t) 0,                            /* No Boundary flag */
 168:../sensor/Sensor_Temperature.c ****   .channel_priority           = (uint32_t) 0,                   		 /* Lowest Priority 0 selected*/
 169:../sensor/Sensor_Temperature.c ****   .alias_channel              = (int8_t) 1  /* Channel is Aliased*/
 170:../sensor/Sensor_Temperature.c **** };
 171:../sensor/Sensor_Temperature.c **** 
 172:../sensor/Sensor_Temperature.c **** /*Channel_A Result configuration structure*/
 173:../sensor/Sensor_Temperature.c **** XMC_VADC_RESULT_CONFIG_t Channel_A_res_config =
 174:../sensor/Sensor_Temperature.c **** {
 175:../sensor/Sensor_Temperature.c ****   .data_reduction_control  = (uint8_t) 0,  /* No Accumulation */
 176:../sensor/Sensor_Temperature.c ****   .post_processing_mode    = (uint32_t) XMC_VADC_DMM_REDUCTION_MODE,
 177:../sensor/Sensor_Temperature.c ****   .wait_for_read_mode  	   = (uint32_t) 0,  /* Disabled */
 178:../sensor/Sensor_Temperature.c ****   .part_of_fifo       	   = (uint32_t) 0 , /* No FIFO */
 179:../sensor/Sensor_Temperature.c ****   .event_gen_enable   	   = (uint32_t) 0   /* Disable Result event */
 180:../sensor/Sensor_Temperature.c **** };
 181:../sensor/Sensor_Temperature.c **** 
 182:../sensor/Sensor_Temperature.c **** 
 183:../sensor/Sensor_Temperature.c **** /* Background request source interrupt handler : End of Measurement Interrupt configuration structu
 184:../sensor/Sensor_Temperature.c **** const ADC_MEASUREMENT_ISR_t backgnd_rs_intr_handle=
 185:../sensor/Sensor_Temperature.c **** {
 186:../sensor/Sensor_Temperature.c ****   .node_id      = 16U,
 187:../sensor/Sensor_Temperature.c ****   .priority    	= 63U,
 188:../sensor/Sensor_Temperature.c ****   .sub_priority = 0U,
 189:../sensor/Sensor_Temperature.c **** };
 190:../sensor/Sensor_Temperature.c **** 
 191:../sensor/Sensor_Temperature.c **** /* LLD Background Scan Init Structure */
 192:../sensor/Sensor_Temperature.c **** const XMC_VADC_BACKGROUND_CONFIG_t backgnd_config =
 193:../sensor/Sensor_Temperature.c **** {
 194:../sensor/Sensor_Temperature.c ****   .conv_start_mode   = (uint32_t) XMC_VADC_STARTMODE_CIR, 		/* Conversion start mode selected as ca
 195:../sensor/Sensor_Temperature.c ****   .req_src_priority  = (uint32_t) XMC_VADC_GROUP_RS_PRIORITY_1, /* Priority of the Background reque
 196:../sensor/Sensor_Temperature.c ****   .trigger_signal    = (uint32_t) XMC_VADC_REQ_TR_A,            /*If Trigger needed then this denot
 197:../sensor/Sensor_Temperature.c ****   .trigger_edge      = (uint32_t) XMC_VADC_TRIGGER_EDGE_NONE,   /*If Trigger needed then this denot
 198:../sensor/Sensor_Temperature.c ****   .gate_signal    	 = (uint32_t) XMC_VADC_REQ_GT_A,			 /*If Gating needed then this denotes the Gat
 199:../sensor/Sensor_Temperature.c ****   .timer_mode        = (uint32_t) 0,							 /*Timer Mode Disabled */
 200:../sensor/Sensor_Temperature.c ****   .external_trigger  = (uint32_t) 0,                               /*Trigger is Disabled*/
 201:../sensor/Sensor_Temperature.c ****   .req_src_interrupt = (uint32_t) 1,                              /*Background Request source inter
 202:../sensor/Sensor_Temperature.c ****   .enable_auto_scan  = (uint32_t) 0,
 203:../sensor/Sensor_Temperature.c ****   .load_mode         = (uint32_t) XMC_VADC_SCAN_LOAD_OVERWRITE
 204:../sensor/Sensor_Temperature.c **** };
 205:../sensor/Sensor_Temperature.c **** 
 206:../sensor/Sensor_Temperature.c **** ADC_MEASUREMENT_t ADC_TEMPERATURE =
 207:../sensor/Sensor_Temperature.c **** {
 208:../sensor/Sensor_Temperature.c ****   .backgnd_config_handle = (XMC_VADC_BACKGROUND_CONFIG_t*) &backgnd_config,
 209:../sensor/Sensor_Temperature.c ****   .req_src_intr_handle	 = (ADC_MEASUREMENT_ISR_t *) &backgnd_rs_intr_handle,
 210:../sensor/Sensor_Temperature.c ****   .iclass_config_handle  = ( XMC_VADC_GLOBAL_CLASS_t *) &global_iclass_config,
 211:../sensor/Sensor_Temperature.c ****   .srv_req_node          = XMC_VADC_SR_SHARED_SR2,
 212:../sensor/Sensor_Temperature.c ****   .start_conversion		 = (bool) true,
 213:../sensor/Sensor_Temperature.c **** };
 214:../sensor/Sensor_Temperature.c **** 
 215:../sensor/Sensor_Temperature.c **** SensorAnalogPort_t Temperature_Sensors[ADC_CHANNEL_COUNT] =
 216:../sensor/Sensor_Temperature.c **** {
 217:../sensor/Sensor_Temperature.c **** 	/* Temperature Sensor 1 */
 218:../sensor/Sensor_Temperature.c **** 	{
 219:../sensor/Sensor_Temperature.c **** 		.ch_num        	= (uint8_t) 1,
 220:../sensor/Sensor_Temperature.c **** 		.group_handle  	= (VADC_G_TypeDef*)(void*) VADC_G0,
 221:../sensor/Sensor_Temperature.c **** 		.group_index	= (uint8_t) 0,
 222:../sensor/Sensor_Temperature.c **** 		.ch_handle		= (XMC_VADC_CHANNEL_CONFIG_t*) &Channel_A_ch_config,
 223:../sensor/Sensor_Temperature.c **** 		.res_handle	 	= (XMC_VADC_RESULT_CONFIG_t*) &Channel_A_res_config,
 224:../sensor/Sensor_Temperature.c **** 		.analog_port 	= XMC_GPIO_PORT14,
 225:../sensor/Sensor_Temperature.c **** 		.analog_pin 	= 1U
 226:../sensor/Sensor_Temperature.c **** 	}
 227:../sensor/Sensor_Temperature.c **** };
 228:../sensor/Sensor_Temperature.c **** 
 229:../sensor/Sensor_Temperature.c **** NTCLookupEntry_t TemperatureLookupTable[NTC_LOOKUP_ENTRIES] =
 230:../sensor/Sensor_Temperature.c **** {
 231:../sensor/Sensor_Temperature.c **** 	{-40, 190556}, {-39, 183413}, {-38, 175674}, {-37, 167646}, {-36, 159564}, {-35, 151597}, {-34, 14
 232:../sensor/Sensor_Temperature.c **** 	{-29, 110409}, {-28, 104827}, {-27, 99584}, {-26, 94660}, {-25, 90032}, {-24, 85677}, {-23, 81574}
 233:../sensor/Sensor_Temperature.c **** 	{-18, 64183}, {-17, 61223}, {-16, 58408}, {-15, 55728}, {-14, 53176}, {-13, 50745}, {-12, 48429}, 
 234:../sensor/Sensor_Temperature.c **** 	{-7, 38398}, {-6, 36674}, {-5, 35036}, {-4, 33480}, {-3, 32003}, {-2, 30602}, {-1, 29275}, {0, 280
 235:../sensor/Sensor_Temperature.c **** 	{4, 23617},  {5, 22659},  {6, 21752},  {7, 20891},  {8, 20074},  {9, 19298},  {10, 18560}, {11, 18
 236:../sensor/Sensor_Temperature.c **** 	{15, 16279}, {16, 15535}, {17, 14786}, {18, 14055}, {19, 13353}, {20, 12690}, {21, 12068}, {22, 11
 237:../sensor/Sensor_Temperature.c **** 	{26, 9576}, {27, 9183}, {28, 8818}, {29, 8478}, {30, 8160}, {31, 7860}, {32, 7578}, {33, 7310}, {3
 238:../sensor/Sensor_Temperature.c **** 	{37, 6357}, {38, 6141}, {39, 5934}, {40, 5734}, {41, 5540}, {42, 5353}, {43, 5172}, {44, 4997}, {4
 239:../sensor/Sensor_Temperature.c **** 	{48, 4354}, {49, 4207}, {50, 4065}, {51, 3927}, {52, 3793}, {53, 3663}, {54, 3537}, {55, 3414}, {5
 240:../sensor/Sensor_Temperature.c **** 	{59, 2941}, {60, 2825}, {61, 2776}, {62, 2717}, {63, 2652}, {64, 2581}, {65, 2507}, {66, 2431}, {6
 241:../sensor/Sensor_Temperature.c **** 	{70, 2135}, {71, 2066}, {72, 2000}, {73, 1937}, {74, 1878}, {75, 1822}, {76, 1769}, {77, 1719}, {7
 242:../sensor/Sensor_Temperature.c **** 	{81, 1545}, {82, 1507}, {83, 1470}, {84, 1435}, {85, 1400}, {86, 1366}, {87, 1333}, {88, 1300}, {8
 243:../sensor/Sensor_Temperature.c **** 	{92, 1171}, {93, 1139}, {94, 1106}, {95, 1074}, {96, 1042}, {97, 1010}, {98, 978}, {99, 948}, {100
 244:../sensor/Sensor_Temperature.c **** 	{103, 834}, {104, 809}, {105, 787}, {106, 766}, {107, 748}, {108, 733}, {109, 721}, {110, 713}
 245:../sensor/Sensor_Temperature.c **** 
 246:../sensor/Sensor_Temperature.c **** };
 247:../sensor/Sensor_Temperature.c **** 
 248:../sensor/Sensor_Temperature.c **** uint8_t MeasurementRunning;
 249:../sensor/Sensor_Temperature.c **** uint16_t SensorVoltages[ADC_CHANNEL_COUNT];
 250:../sensor/Sensor_Temperature.c **** 
 251:../sensor/Sensor_Temperature.c **** /*********************************************************************************
 252:../sensor/Sensor_Temperature.c ****  * Local function prototypes
 253:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
 254:../sensor/Sensor_Temperature.c **** 
 255:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_ADC_InitGlobal(void);
 256:../sensor/Sensor_Temperature.c **** 
 257:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_ADC_InitMeasurements(void);
 258:../sensor/Sensor_Temperature.c **** 
 259:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_ADC_StartConversion(void);
 260:../sensor/Sensor_Temperature.c **** 
 261:../sensor/Sensor_Temperature.c **** uint16_t Sensor_Temperature_ADC_GetConversionResult(SensorAnalogPort_t* sensor_handle);
 262:../sensor/Sensor_Temperature.c **** 
 263:../sensor/Sensor_Temperature.c **** double Sensor_Temperature_ConvertToVoltage(uint16_t adcValue);
 264:../sensor/Sensor_Temperature.c **** 
 265:../sensor/Sensor_Temperature.c **** /*********************************************************************************
 266:../sensor/Sensor_Temperature.c ****  * Local function definitions
 267:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
 268:../sensor/Sensor_Temperature.c **** 
 269:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_ADC_InitGlobal(void)
 270:../sensor/Sensor_Temperature.c **** {
 951              	 .loc 3 270 0
 952              	 .cfi_startproc
 953              	 
 954              	 
 955 0000 80B5     	 push {r7,lr}
 956              	.LCFI52:
 957              	 .cfi_def_cfa_offset 8
 958              	 .cfi_offset 7,-8
 959              	 .cfi_offset 14,-4
 960 0002 00AF     	 add r7,sp,#0
 961              	.LCFI53:
 962              	 .cfi_def_cfa_register 7
 271:../sensor/Sensor_Temperature.c **** 	/* Initialize an instance of Global hardware */
 272:../sensor/Sensor_Temperature.c **** 	XMC_VADC_GLOBAL_Init(ADC_MODULE, &global_config);
 963              	 .loc 3 272 0
 964 0004 4FF04020 	 mov r0,#1073758208
 965 0008 0A49     	 ldr r1,.L24
 966 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_Init
 273:../sensor/Sensor_Temperature.c **** 
 274:../sensor/Sensor_Temperature.c **** 	/*Initialize Group 0*/
 275:../sensor/Sensor_Temperature.c **** 	{
 276:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GROUP_Init((XMC_VADC_GROUP_t *)VADC_G0, (XMC_VADC_GROUP_CONFIG_t *)&group_init_handle0);
 967              	 .loc 3 276 0
 968 000e 0A48     	 ldr r0,.L24+4
 969 0010 0A49     	 ldr r1,.L24+8
 970 0012 FFF7FEFF 	 bl XMC_VADC_GROUP_Init
 277:../sensor/Sensor_Temperature.c **** 
 278:../sensor/Sensor_Temperature.c **** 		/* Switch on the converter of the Group[group_index]*/
 279:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GROUP_SetPowerMode((XMC_VADC_GROUP_t *)VADC_G0, XMC_VADC_GROUP_POWERMODE_NORMAL);
 971              	 .loc 3 279 0
 972 0016 0848     	 ldr r0,.L24+4
 973 0018 0321     	 movs r1,#3
 974 001a FFF7FEFF 	 bl XMC_VADC_GROUP_SetPowerMode
 280:../sensor/Sensor_Temperature.c **** 
 281:../sensor/Sensor_Temperature.c **** 		/* Disable the post calibration option for the respective group*/
 282:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GLOBAL_DisablePostCalibration(ADC_MODULE, 0);
 975              	 .loc 3 282 0
 976 001e 4FF04020 	 mov r0,#1073758208
 977 0022 0021     	 movs r1,#0
 978 0024 FFF7FEFF 	 bl XMC_VADC_GLOBAL_DisablePostCalibration
 283:../sensor/Sensor_Temperature.c **** 	}
 284:../sensor/Sensor_Temperature.c **** 
 285:../sensor/Sensor_Temperature.c **** 	XMC_VADC_GLOBAL_StartupCalibration(ADC_MODULE);
 979              	 .loc 3 285 0
 980 0028 4FF04020 	 mov r0,#1073758208
 981 002c FFF7FEFF 	 bl XMC_VADC_GLOBAL_StartupCalibration
 286:../sensor/Sensor_Temperature.c **** }
 982              	 .loc 3 286 0
 983 0030 80BD     	 pop {r7,pc}
 984              	.L25:
 985 0032 00BF     	 .align 2
 986              	.L24:
 987 0034 00000000 	 .word global_config
 988 0038 00440040 	 .word 1073759232
 989 003c 00000000 	 .word group_init_handle0
 990              	 .cfi_endproc
 991              	.LFE252:
 993              	 .section .text.Sensor_Temperature_ADC_InitMeasurements,"ax",%progbits
 994              	 .align 2
 995              	 .global Sensor_Temperature_ADC_InitMeasurements
 996              	 .thumb
 997              	 .thumb_func
 999              	Sensor_Temperature_ADC_InitMeasurements:
 1000              	.LFB253:
 287:../sensor/Sensor_Temperature.c **** 
 288:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_ADC_InitMeasurements(void)
 289:../sensor/Sensor_Temperature.c **** {
 1001              	 .loc 3 289 0
 1002              	 .cfi_startproc
 1003              	 
 1004              	 
 1005 0000 90B5     	 push {r4,r7,lr}
 1006              	.LCFI54:
 1007              	 .cfi_def_cfa_offset 12
 1008              	 .cfi_offset 4,-12
 1009              	 .cfi_offset 7,-8
 1010              	 .cfi_offset 14,-4
 1011 0002 83B0     	 sub sp,sp,#12
 1012              	.LCFI55:
 1013              	 .cfi_def_cfa_offset 24
 1014 0004 00AF     	 add r7,sp,#0
 1015              	.LCFI56:
 1016              	 .cfi_def_cfa_register 7
 290:../sensor/Sensor_Temperature.c **** 	uint8_t j;
 291:../sensor/Sensor_Temperature.c **** 	SensorAnalogPort_t *indexed;
 292:../sensor/Sensor_Temperature.c **** 
 293:../sensor/Sensor_Temperature.c **** 	/*Initialize the Global Conversion class 0*/
 294:../sensor/Sensor_Temperature.c **** 	XMC_VADC_GLOBAL_InputClassInit(ADC_MODULE, (XMC_VADC_GLOBAL_CLASS_t)global_iclass_config,
 1017              	 .loc 3 294 0
 1018 0006 394B     	 ldr r3,.L29
 1019 0008 4FF04020 	 mov r0,#1073758208
 1020 000c 1968     	 ldr r1,[r3]
 1021 000e 0022     	 movs r2,#0
 1022 0010 0023     	 movs r3,#0
 1023 0012 FFF7FEFF 	 bl XMC_VADC_GLOBAL_InputClassInit
 295:../sensor/Sensor_Temperature.c **** 									  XMC_VADC_GROUP_CONV_STD, ADC_MEASUREMENT_ICLASS_NUM);
 296:../sensor/Sensor_Temperature.c **** 
 297:../sensor/Sensor_Temperature.c **** 	/* Initialize the Background Scan hardware */
 298:../sensor/Sensor_Temperature.c **** 	XMC_VADC_GLOBAL_BackgroundInit(ADC_MODULE, (XMC_VADC_BACKGROUND_CONFIG_t*) &backgnd_config);
 1024              	 .loc 3 298 0
 1025 0016 4FF04020 	 mov r0,#1073758208
 1026 001a 3549     	 ldr r1,.L29+4
 1027 001c FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundInit
 299:../sensor/Sensor_Temperature.c **** 
 300:../sensor/Sensor_Temperature.c **** 	/* Initialize Channels */
 301:../sensor/Sensor_Temperature.c **** 	for (j = 0; j < ADC_CHANNEL_COUNT; j++)
 1028              	 .loc 3 301 0
 1029 0020 0023     	 movs r3,#0
 1030 0022 FB71     	 strb r3,[r7,#7]
 1031 0024 3EE0     	 b .L27
 1032              	.L28:
 302:../sensor/Sensor_Temperature.c **** 	{
 303:../sensor/Sensor_Temperature.c **** 		indexed = &Temperature_Sensors[j];
 1033              	 .loc 3 303 0 discriminator 3
 1034 0026 FA79     	 ldrb r2,[r7,#7]
 1035 0028 1346     	 mov r3,r2
 1036 002a 9B00     	 lsls r3,r3,#2
 1037 002c 1344     	 add r3,r3,r2
 1038 002e 9B00     	 lsls r3,r3,#2
 1039 0030 304A     	 ldr r2,.L29+8
 1040 0032 1344     	 add r3,r3,r2
 1041 0034 3B60     	 str r3,[r7]
 304:../sensor/Sensor_Temperature.c **** 
 305:../sensor/Sensor_Temperature.c **** 		/* Initialize for configured channels*/
 306:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 1042              	 .loc 3 306 0 discriminator 3
 1043 0036 3B68     	 ldr r3,[r7]
 1044 0038 9A68     	 ldr r2,[r3,#8]
 1045 003a 3B68     	 ldr r3,[r7]
 1046 003c 9B7C     	 ldrb r3,[r3,#18]
 1047 003e 1946     	 mov r1,r3
 1048 0040 3B68     	 ldr r3,[r7]
 1049 0042 1B68     	 ldr r3,[r3]
 1050 0044 1046     	 mov r0,r2
 1051 0046 1A46     	 mov r2,r3
 1052 0048 FFF7FEFF 	 bl XMC_VADC_GROUP_ChannelInit
 307:../sensor/Sensor_Temperature.c **** 
 308:../sensor/Sensor_Temperature.c **** 		/* Set reference voltage*/
 309:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GROUP_ChannelSetInputReference(indexed->group_handle, (uint32_t)indexed->ch_num,
 1053              	 .loc 3 309 0 discriminator 3
 1054 004c 3B68     	 ldr r3,[r7]
 1055 004e 9A68     	 ldr r2,[r3,#8]
 1056 0050 3B68     	 ldr r3,[r7]
 1057 0052 9B7C     	 ldrb r3,[r3,#18]
 1058 0054 1946     	 mov r1,r3
 310:../sensor/Sensor_Temperature.c **** 				(uint32_t)indexed->ch_handle->alternate_reference);
 1059              	 .loc 3 310 0 discriminator 3
 1060 0056 3B68     	 ldr r3,[r7]
 1061 0058 1B68     	 ldr r3,[r3]
 1062 005a 5B78     	 ldrb r3,[r3,#1]
 1063 005c C3F3C003 	 ubfx r3,r3,#3,#1
 1064 0060 DBB2     	 uxtb r3,r3
 309:../sensor/Sensor_Temperature.c **** 				(uint32_t)indexed->ch_handle->alternate_reference);
 1065              	 .loc 3 309 0 discriminator 3
 1066 0062 1046     	 mov r0,r2
 1067 0064 1A46     	 mov r2,r3
 1068 0066 FFF7FEFF 	 bl XMC_VADC_GROUP_ChannelSetInputReference
 311:../sensor/Sensor_Temperature.c **** 
 312:../sensor/Sensor_Temperature.c **** 		/* Initialize for configured result registers */
 313:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 1069              	 .loc 3 313 0 discriminator 3
 1070 006a 3B68     	 ldr r3,[r7]
 1071 006c 9A68     	 ldr r2,[r3,#8]
 1072 006e 3B68     	 ldr r3,[r7]
 1073 0070 1B68     	 ldr r3,[r3]
 1074 0072 9B78     	 ldrb r3,[r3,#2]
 1075 0074 C3F30303 	 ubfx r3,r3,#0,#4
 1076 0078 DBB2     	 uxtb r3,r3
 1077 007a 1946     	 mov r1,r3
 314:../sensor/Sensor_Temperature.c **** 								  indexed->res_handle);
 1078              	 .loc 3 314 0 discriminator 3
 1079 007c 3B68     	 ldr r3,[r7]
 1080 007e 5B68     	 ldr r3,[r3,#4]
 313:../sensor/Sensor_Temperature.c **** 								  indexed->res_handle);
 1081              	 .loc 3 313 0 discriminator 3
 1082 0080 1046     	 mov r0,r2
 1083 0082 1A46     	 mov r2,r3
 1084 0084 FFF7FEFF 	 bl XMC_VADC_GROUP_ResultInit
 315:../sensor/Sensor_Temperature.c **** 
 316:../sensor/Sensor_Temperature.c **** 		/* Add all channels into the Background Request Source Channel Select Register */
 317:../sensor/Sensor_Temperature.c **** 		XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(ADC_MODULE,
 318:../sensor/Sensor_Temperature.c **** 													   (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 1085              	 .loc 3 318 0 discriminator 3
 1086 0088 3B68     	 ldr r3,[r7]
 1087 008a 5B7C     	 ldrb r3,[r3,#17]
 317:../sensor/Sensor_Temperature.c **** 													   (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 1088              	 .loc 3 317 0 discriminator 3
 1089 008c 1A46     	 mov r2,r3
 1090              	 .loc 3 318 0 discriminator 3
 1091 008e 3B68     	 ldr r3,[r7]
 1092 0090 9B7C     	 ldrb r3,[r3,#18]
 317:../sensor/Sensor_Temperature.c **** 													   (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 1093              	 .loc 3 317 0 discriminator 3
 1094 0092 4FF04020 	 mov r0,#1073758208
 1095 0096 1146     	 mov r1,r2
 1096 0098 1A46     	 mov r2,r3
 1097 009a FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundAddChannelToSequence
 301:../sensor/Sensor_Temperature.c **** 	{
 1098              	 .loc 3 301 0 discriminator 3
 1099 009e FB79     	 ldrb r3,[r7,#7]
 1100 00a0 0133     	 adds r3,r3,#1
 1101 00a2 FB71     	 strb r3,[r7,#7]
 1102              	.L27:
 301:../sensor/Sensor_Temperature.c **** 	{
 1103              	 .loc 3 301 0 is_stmt 0 discriminator 1
 1104 00a4 FB79     	 ldrb r3,[r7,#7]
 1105 00a6 002B     	 cmp r3,#0
 1106 00a8 BDD0     	 beq .L28
 319:../sensor/Sensor_Temperature.c **** 
 320:../sensor/Sensor_Temperature.c **** 	}
 321:../sensor/Sensor_Temperature.c **** 
 322:../sensor/Sensor_Temperature.c **** 	/* Enable Interrupt */
 323:../sensor/Sensor_Temperature.c **** 	NVIC_SetPriority((IRQn_Type)backgnd_rs_intr_handle.node_id,
 1107              	 .loc 3 323 0 is_stmt 1
 1108 00aa 1023     	 movs r3,#16
 1109 00ac DCB2     	 uxtb r4,r3
 1110 00ae FFF7FEFF 	 bl NVIC_GetPriorityGrouping
 1111 00b2 0146     	 mov r1,r0
 1112 00b4 3F22     	 movs r2,#63
 1113 00b6 0023     	 movs r3,#0
 1114 00b8 0846     	 mov r0,r1
 1115 00ba 1146     	 mov r1,r2
 1116 00bc 1A46     	 mov r2,r3
 1117 00be FFF7FEFF 	 bl NVIC_EncodePriority
 1118 00c2 0246     	 mov r2,r0
 1119 00c4 63B2     	 sxtb r3,r4
 1120 00c6 1846     	 mov r0,r3
 1121 00c8 1146     	 mov r1,r2
 1122 00ca FFF7FEFF 	 bl NVIC_SetPriority
 324:../sensor/Sensor_Temperature.c **** 						NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 325:../sensor/Sensor_Temperature.c **** 						backgnd_rs_intr_handle.priority, backgnd_rs_intr_handle.sub_priority));
 326:../sensor/Sensor_Temperature.c **** 
 327:../sensor/Sensor_Temperature.c **** 	/* Connect background Request Source Event to NVIC node */
 328:../sensor/Sensor_Temperature.c **** 	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(ADC_MODULE,
 1123              	 .loc 3 328 0
 1124 00ce 4FF04020 	 mov r0,#1073758208
 1125 00d2 0621     	 movs r1,#6
 1126 00d4 FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 329:../sensor/Sensor_Temperature.c **** 												 (XMC_VADC_SR_t) XMC_VADC_SR_SHARED_SR2);
 330:../sensor/Sensor_Temperature.c **** 
 331:../sensor/Sensor_Temperature.c **** 	/* Enable Background Scan Request source IRQ */
 332:../sensor/Sensor_Temperature.c **** 	NVIC_EnableIRQ((IRQn_Type)backgnd_rs_intr_handle.node_id);
 1127              	 .loc 3 332 0
 1128 00d8 1023     	 movs r3,#16
 1129 00da DBB2     	 uxtb r3,r3
 1130 00dc 5BB2     	 sxtb r3,r3
 1131 00de 1846     	 mov r0,r3
 1132 00e0 FFF7FEFF 	 bl NVIC_EnableIRQ
 333:../sensor/Sensor_Temperature.c **** }
 1133              	 .loc 3 333 0
 1134 00e4 0C37     	 adds r7,r7,#12
 1135              	.LCFI57:
 1136              	 .cfi_def_cfa_offset 12
 1137 00e6 BD46     	 mov sp,r7
 1138              	.LCFI58:
 1139              	 .cfi_def_cfa_register 13
 1140              	 
 1141 00e8 90BD     	 pop {r4,r7,pc}
 1142              	.L30:
 1143 00ea 00BF     	 .align 2
 1144              	.L29:
 1145 00ec 00000000 	 .word global_iclass_config
 1146 00f0 00000000 	 .word backgnd_config
 1147 00f4 00000000 	 .word Temperature_Sensors
 1148              	 .cfi_endproc
 1149              	.LFE253:
 1151              	 .section .text.Sensor_Temperature_ADC_StartConversion,"ax",%progbits
 1152              	 .align 2
 1153              	 .global Sensor_Temperature_ADC_StartConversion
 1154              	 .thumb
 1155              	 .thumb_func
 1157              	Sensor_Temperature_ADC_StartConversion:
 1158              	.LFB254:
 334:../sensor/Sensor_Temperature.c **** 
 335:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_ADC_StartConversion(void)
 336:../sensor/Sensor_Temperature.c **** {
 1159              	 .loc 3 336 0
 1160              	 .cfi_startproc
 1161              	 
 1162              	 
 1163 0000 80B5     	 push {r7,lr}
 1164              	.LCFI59:
 1165              	 .cfi_def_cfa_offset 8
 1166              	 .cfi_offset 7,-8
 1167              	 .cfi_offset 14,-4
 1168 0002 00AF     	 add r7,sp,#0
 1169              	.LCFI60:
 1170              	 .cfi_def_cfa_register 7
 337:../sensor/Sensor_Temperature.c **** 	XMC_VADC_GLOBAL_BackgroundTriggerConversion(ADC_MODULE);
 1171              	 .loc 3 337 0
 1172 0004 4FF04020 	 mov r0,#1073758208
 1173 0008 FFF7FEFF 	 bl XMC_VADC_GLOBAL_BackgroundTriggerConversion
 338:../sensor/Sensor_Temperature.c **** }
 1174              	 .loc 3 338 0
 1175 000c 80BD     	 pop {r7,pc}
 1176              	 .cfi_endproc
 1177              	.LFE254:
 1179 000e 00BF     	 .section .text.Sensor_Temperature_ADC_GetConversionResult,"ax",%progbits
 1180              	 .align 2
 1181              	 .global Sensor_Temperature_ADC_GetConversionResult
 1182              	 .thumb
 1183              	 .thumb_func
 1185              	Sensor_Temperature_ADC_GetConversionResult:
 1186              	.LFB255:
 339:../sensor/Sensor_Temperature.c **** 
 340:../sensor/Sensor_Temperature.c **** uint16_t Sensor_Temperature_ADC_GetConversionResult(SensorAnalogPort_t* sensor_handle)
 341:../sensor/Sensor_Temperature.c **** {
 1187              	 .loc 3 341 0
 1188              	 .cfi_startproc
 1189              	 
 1190              	 
 1191 0000 80B5     	 push {r7,lr}
 1192              	.LCFI61:
 1193              	 .cfi_def_cfa_offset 8
 1194              	 .cfi_offset 7,-8
 1195              	 .cfi_offset 14,-4
 1196 0002 82B0     	 sub sp,sp,#8
 1197              	.LCFI62:
 1198              	 .cfi_def_cfa_offset 16
 1199 0004 00AF     	 add r7,sp,#0
 1200              	.LCFI63:
 1201              	 .cfi_def_cfa_register 7
 1202 0006 7860     	 str r0,[r7,#4]
 342:../sensor/Sensor_Temperature.c **** 	return XMC_VADC_GROUP_GetResult(sensor_handle->group_handle, sensor_handle->ch_handle->result_reg_
 1203              	 .loc 3 342 0
 1204 0008 7B68     	 ldr r3,[r7,#4]
 1205 000a 9A68     	 ldr r2,[r3,#8]
 1206 000c 7B68     	 ldr r3,[r7,#4]
 1207 000e 1B68     	 ldr r3,[r3]
 1208 0010 9B78     	 ldrb r3,[r3,#2]
 1209 0012 C3F30303 	 ubfx r3,r3,#0,#4
 1210 0016 DBB2     	 uxtb r3,r3
 1211 0018 1046     	 mov r0,r2
 1212 001a 1946     	 mov r1,r3
 1213 001c FFF7FEFF 	 bl XMC_VADC_GROUP_GetResult
 1214 0020 0346     	 mov r3,r0
 343:../sensor/Sensor_Temperature.c **** }
 1215              	 .loc 3 343 0
 1216 0022 1846     	 mov r0,r3
 1217 0024 0837     	 adds r7,r7,#8
 1218              	.LCFI64:
 1219              	 .cfi_def_cfa_offset 8
 1220 0026 BD46     	 mov sp,r7
 1221              	.LCFI65:
 1222              	 .cfi_def_cfa_register 13
 1223              	 
 1224 0028 80BD     	 pop {r7,pc}
 1225              	 .cfi_endproc
 1226              	.LFE255:
 1228              	 .global __aeabi_i2d
 1229              	 .global __aeabi_dmul
 1230 002a 00BF     	 .section .text.Sensor_Temperature_ConvertToVoltage,"ax",%progbits
 1231              	 .align 2
 1232              	 .global Sensor_Temperature_ConvertToVoltage
 1233              	 .thumb
 1234              	 .thumb_func
 1236              	Sensor_Temperature_ConvertToVoltage:
 1237              	.LFB256:
 344:../sensor/Sensor_Temperature.c **** 
 345:../sensor/Sensor_Temperature.c **** double Sensor_Temperature_ConvertToVoltage(uint16_t adcValue)
 346:../sensor/Sensor_Temperature.c **** {
 1238              	 .loc 3 346 0
 1239              	 .cfi_startproc
 1240              	 
 1241              	 
 1242 0000 80B5     	 push {r7,lr}
 1243              	.LCFI66:
 1244              	 .cfi_def_cfa_offset 8
 1245              	 .cfi_offset 7,-8
 1246              	 .cfi_offset 14,-4
 1247 0002 82B0     	 sub sp,sp,#8
 1248              	.LCFI67:
 1249              	 .cfi_def_cfa_offset 16
 1250 0004 00AF     	 add r7,sp,#0
 1251              	.LCFI68:
 1252              	 .cfi_def_cfa_register 7
 1253 0006 0346     	 mov r3,r0
 1254 0008 FB80     	 strh r3,[r7,#6]
 347:../sensor/Sensor_Temperature.c **** 	return adcValue * ADC_RESOLUTION;
 1255              	 .loc 3 347 0
 1256 000a FB88     	 ldrh r3,[r7,#6]
 1257 000c 1846     	 mov r0,r3
 1258 000e FFF7FEFF 	 bl __aeabi_i2d
 1259 0012 0246     	 mov r2,r0
 1260 0014 0B46     	 mov r3,r1
 1261 0016 1046     	 mov r0,r2
 1262 0018 1946     	 mov r1,r3
 1263 001a 07A3     	 adr r3,.L36
 1264 001c D3E90023 	 ldrd r2,[r3]
 1265 0020 FFF7FEFF 	 bl __aeabi_dmul
 1266 0024 0246     	 mov r2,r0
 1267 0026 0B46     	 mov r3,r1
 348:../sensor/Sensor_Temperature.c **** }
 1268              	 .loc 3 348 0
 1269 0028 1046     	 mov r0,r2
 1270 002a 1946     	 mov r1,r3
 1271 002c 0837     	 adds r7,r7,#8
 1272              	.LCFI69:
 1273              	 .cfi_def_cfa_offset 8
 1274 002e BD46     	 mov sp,r7
 1275              	.LCFI70:
 1276              	 .cfi_def_cfa_register 13
 1277              	 
 1278 0030 80BD     	 pop {r7,pc}
 1279              	.L37:
 1280 0032 00BFAFF3 	 .align 3
 1280      0080
 1281              	.L36:
 1282 0038 745E6397 	 .word -1755095436
 1283 003c A8DE4A3F 	 .word 1061871272
 1284              	 .cfi_endproc
 1285              	.LFE256:
 1287              	 .section .text.VADC0_C0_2_IRQHandler,"ax",%progbits
 1288              	 .align 2
 1289              	 .global VADC0_C0_2_IRQHandler
 1290              	 .thumb
 1291              	 .thumb_func
 1293              	VADC0_C0_2_IRQHandler:
 1294              	.LFB257:
 349:../sensor/Sensor_Temperature.c **** 
 350:../sensor/Sensor_Temperature.c **** void Adc_Measurement_Handler()
 351:../sensor/Sensor_Temperature.c **** {
 1295              	 .loc 3 351 0
 1296              	 .cfi_startproc
 1297              	 
 1298              	 
 1299 0000 80B5     	 push {r7,lr}
 1300              	.LCFI71:
 1301              	 .cfi_def_cfa_offset 8
 1302              	 .cfi_offset 7,-8
 1303              	 .cfi_offset 14,-4
 1304 0002 00AF     	 add r7,sp,#0
 1305              	.LCFI72:
 1306              	 .cfi_def_cfa_register 7
 352:../sensor/Sensor_Temperature.c **** 	SensorVoltages[TEMPERATURE_SENSOR_A] = Sensor_Temperature_ADC_GetConversionResult(SENSOR_CFG_A);
 1307              	 .loc 3 352 0
 1308 0004 0548     	 ldr r0,.L39
 1309 0006 FFF7FEFF 	 bl Sensor_Temperature_ADC_GetConversionResult
 1310 000a 0346     	 mov r3,r0
 1311 000c 1A46     	 mov r2,r3
 1312 000e 044B     	 ldr r3,.L39+4
 1313 0010 1A80     	 strh r2,[r3]
 353:../sensor/Sensor_Temperature.c **** 
 354:../sensor/Sensor_Temperature.c **** 	MeasurementRunning = 0;
 1314              	 .loc 3 354 0
 1315 0012 044B     	 ldr r3,.L39+8
 1316 0014 0022     	 movs r2,#0
 1317 0016 1A70     	 strb r2,[r3]
 355:../sensor/Sensor_Temperature.c **** }
 1318              	 .loc 3 355 0
 1319 0018 80BD     	 pop {r7,pc}
 1320              	.L40:
 1321 001a 00BF     	 .align 2
 1322              	.L39:
 1323 001c 00000000 	 .word Temperature_Sensors
 1324 0020 00000000 	 .word SensorVoltages
 1325 0024 00000000 	 .word MeasurementRunning
 1326              	 .cfi_endproc
 1327              	.LFE257:
 1329              	 .section .text.Sensor_Temperature_Init,"ax",%progbits
 1330              	 .align 2
 1331              	 .global Sensor_Temperature_Init
 1332              	 .thumb
 1333              	 .thumb_func
 1335              	Sensor_Temperature_Init:
 1336              	.LFB258:
 356:../sensor/Sensor_Temperature.c **** 
 357:../sensor/Sensor_Temperature.c **** /*********************************************************************************
 358:../sensor/Sensor_Temperature.c ****  * Global function definitions
 359:../sensor/Sensor_Temperature.c ****  *********************************************************************************/
 360:../sensor/Sensor_Temperature.c **** 
 361:../sensor/Sensor_Temperature.c **** void Sensor_Temperature_Init(void)
 362:../sensor/Sensor_Temperature.c **** {
 1337              	 .loc 3 362 0
 1338              	 .cfi_startproc
 1339              	 
 1340              	 
 1341 0000 80B5     	 push {r7,lr}
 1342              	.LCFI73:
 1343              	 .cfi_def_cfa_offset 8
 1344              	 .cfi_offset 7,-8
 1345              	 .cfi_offset 14,-4
 1346 0002 00AF     	 add r7,sp,#0
 1347              	.LCFI74:
 1348              	 .cfi_def_cfa_register 7
 363:../sensor/Sensor_Temperature.c **** 	Sensor_Temperature_ADC_InitGlobal();
 1349              	 .loc 3 363 0
 1350 0004 FFF7FEFF 	 bl Sensor_Temperature_ADC_InitGlobal
 364:../sensor/Sensor_Temperature.c **** 	Sensor_Temperature_ADC_InitMeasurements();
 1351              	 .loc 3 364 0
 1352 0008 FFF7FEFF 	 bl Sensor_Temperature_ADC_InitMeasurements
 365:../sensor/Sensor_Temperature.c **** }
 1353              	 .loc 3 365 0
 1354 000c 80BD     	 pop {r7,pc}
 1355              	 .cfi_endproc
 1356              	.LFE258:
 1358              	 .global __aeabi_dsub
 1359              	 .global __aeabi_ddiv
 1360              	 .global __aeabi_ui2d
 1361              	 .global __aeabi_dcmpgt
 1362 000e 00BF     	 .section .text.Sensor_Temperature_Calculate,"ax",%progbits
 1363              	 .align 2
 1364              	 .global Sensor_Temperature_Calculate
 1365              	 .thumb
 1366              	 .thumb_func
 1368              	Sensor_Temperature_Calculate:
 1369              	.LFB259:
 366:../sensor/Sensor_Temperature.c **** 
 367:../sensor/Sensor_Temperature.c **** int Sensor_Temperature_Calculate(Sensor_TemperatureType sensor)
 368:../sensor/Sensor_Temperature.c **** {
 1370              	 .loc 3 368 0
 1371              	 .cfi_startproc
 1372              	 
 1373              	 
 1374 0000 B0B5     	 push {r4,r5,r7,lr}
 1375              	.LCFI75:
 1376              	 .cfi_def_cfa_offset 16
 1377              	 .cfi_offset 4,-16
 1378              	 .cfi_offset 5,-12
 1379              	 .cfi_offset 7,-8
 1380              	 .cfi_offset 14,-4
 1381 0002 88B0     	 sub sp,sp,#32
 1382              	.LCFI76:
 1383              	 .cfi_def_cfa_offset 48
 1384 0004 00AF     	 add r7,sp,#0
 1385              	.LCFI77:
 1386              	 .cfi_def_cfa_register 7
 1387 0006 0346     	 mov r3,r0
 1388 0008 FB71     	 strb r3,[r7,#7]
 369:../sensor/Sensor_Temperature.c **** 	int i = 0;
 1389              	 .loc 3 369 0
 1390 000a 0023     	 movs r3,#0
 1391 000c FB61     	 str r3,[r7,#28]
 370:../sensor/Sensor_Temperature.c **** 	double adcVoltage = 0;
 1392              	 .loc 3 370 0
 1393 000e 4FF00002 	 mov r2,#0
 1394 0012 4FF00003 	 mov r3,#0
 1395 0016 C7E90423 	 strd r2,[r7,#16]
 371:../sensor/Sensor_Temperature.c **** 	double res = 0;
 1396              	 .loc 3 371 0
 1397 001a 4FF00002 	 mov r2,#0
 1398 001e 4FF00003 	 mov r3,#0
 1399 0022 C7E90223 	 strd r2,[r7,#8]
 372:../sensor/Sensor_Temperature.c **** 
 373:../sensor/Sensor_Temperature.c **** 	/* Start measurement */
 374:../sensor/Sensor_Temperature.c **** 	MeasurementRunning = 1;
 1400              	 .loc 3 374 0
 1401 0026 2A4B     	 ldr r3,.L49+8
 1402 0028 0122     	 movs r2,#1
 1403 002a 1A70     	 strb r2,[r3]
 375:../sensor/Sensor_Temperature.c **** 	Sensor_Temperature_ADC_StartConversion();
 1404              	 .loc 3 375 0
 1405 002c FFF7FEFF 	 bl Sensor_Temperature_ADC_StartConversion
 376:../sensor/Sensor_Temperature.c **** 
 377:../sensor/Sensor_Temperature.c **** 	/* Wait for measurement to finish*/
 378:../sensor/Sensor_Temperature.c **** 	while(MeasurementRunning == 1);
 1406              	 .loc 3 378 0
 1407 0030 00BF     	 nop
 1408              	.L43:
 1409              	 .loc 3 378 0 is_stmt 0 discriminator 1
 1410 0032 274B     	 ldr r3,.L49+8
 1411 0034 1B78     	 ldrb r3,[r3]
 1412 0036 012B     	 cmp r3,#1
 1413 0038 FBD0     	 beq .L43
 379:../sensor/Sensor_Temperature.c **** 
 380:../sensor/Sensor_Temperature.c **** 	/* Calculate temperature */
 381:../sensor/Sensor_Temperature.c **** 	adcVoltage = Sensor_Temperature_ConvertToVoltage(SensorVoltages[sensor]);
 1414              	 .loc 3 381 0 is_stmt 1
 1415 003a FB79     	 ldrb r3,[r7,#7]
 1416 003c 254A     	 ldr r2,.L49+12
 1417 003e 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1418 0042 1846     	 mov r0,r3
 1419 0044 FFF7FEFF 	 bl Sensor_Temperature_ConvertToVoltage
 1420 0048 C7E90401 	 strd r0,[r7,#16]
 382:../sensor/Sensor_Temperature.c **** 	res = (adcVoltage * R1) / (SENSOR_REF_VOLTAGE - adcVoltage);
 1421              	 .loc 3 382 0
 1422 004c D7E90401 	 ldrd r0,[r7,#16]
 1423 0050 1DA3     	 adr r3,.L49
 1424 0052 D3E90023 	 ldrd r2,[r3]
 1425 0056 FFF7FEFF 	 bl __aeabi_dmul
 1426 005a 0246     	 mov r2,r0
 1427 005c 0B46     	 mov r3,r1
 1428 005e 1446     	 mov r4,r2
 1429 0060 1D46     	 mov r5,r3
 1430 0062 4FF00000 	 mov r0,#0
 1431 0066 1C49     	 ldr r1,.L49+16
 1432 0068 D7E90423 	 ldrd r2,[r7,#16]
 1433 006c FFF7FEFF 	 bl __aeabi_dsub
 1434 0070 0246     	 mov r2,r0
 1435 0072 0B46     	 mov r3,r1
 1436 0074 2046     	 mov r0,r4
 1437 0076 2946     	 mov r1,r5
 1438 0078 FFF7FEFF 	 bl __aeabi_ddiv
 1439 007c 0246     	 mov r2,r0
 1440 007e 0B46     	 mov r3,r1
 1441 0080 C7E90223 	 strd r2,[r7,#8]
 383:../sensor/Sensor_Temperature.c **** 
 384:../sensor/Sensor_Temperature.c **** 	while(TemperatureLookupTable[i++].resistence > res && i < NTC_LOOKUP_ENTRIES);
 1442              	 .loc 3 384 0
 1443 0084 00BF     	 nop
 1444              	.L46:
 1445              	 .loc 3 384 0 is_stmt 0 discriminator 2
 1446 0086 FB69     	 ldr r3,[r7,#28]
 1447 0088 5A1C     	 adds r2,r3,#1
 1448 008a FA61     	 str r2,[r7,#28]
 1449 008c 134A     	 ldr r2,.L49+20
 1450 008e DB00     	 lsls r3,r3,#3
 1451 0090 1344     	 add r3,r3,r2
 1452 0092 5B68     	 ldr r3,[r3,#4]
 1453 0094 1846     	 mov r0,r3
 1454 0096 FFF7FEFF 	 bl __aeabi_ui2d
 1455 009a 0246     	 mov r2,r0
 1456 009c 0B46     	 mov r3,r1
 1457 009e 1046     	 mov r0,r2
 1458 00a0 1946     	 mov r1,r3
 1459 00a2 D7E90223 	 ldrd r2,[r7,#8]
 1460 00a6 FFF7FEFF 	 bl __aeabi_dcmpgt
 1461 00aa 0346     	 mov r3,r0
 1462 00ac 002B     	 cmp r3,#0
 1463 00ae 02D0     	 beq .L44
 1464              	 .loc 3 384 0 discriminator 1
 1465 00b0 FB69     	 ldr r3,[r7,#28]
 1466 00b2 962B     	 cmp r3,#150
 1467 00b4 E7DD     	 ble .L46
 1468              	.L44:
 385:../sensor/Sensor_Temperature.c **** 
 386:../sensor/Sensor_Temperature.c **** 	return TemperatureLookupTable[i].temperature;
 1469              	 .loc 3 386 0 is_stmt 1
 1470 00b6 094A     	 ldr r2,.L49+20
 1471 00b8 FB69     	 ldr r3,[r7,#28]
 1472 00ba 52F83330 	 ldr r3,[r2,r3,lsl#3]
 387:../sensor/Sensor_Temperature.c **** }
 1473              	 .loc 3 387 0
 1474 00be 1846     	 mov r0,r3
 1475 00c0 2037     	 adds r7,r7,#32
 1476              	.LCFI78:
 1477              	 .cfi_def_cfa_offset 16
 1478 00c2 BD46     	 mov sp,r7
 1479              	.LCFI79:
 1480              	 .cfi_def_cfa_register 13
 1481              	 
 1482 00c4 B0BD     	 pop {r4,r5,r7,pc}
 1483              	.L50:
 1484 00c6 00BF     	 .align 3
 1485              	.L49:
 1486 00c8 00000000 	 .word 0
 1487 00cc 0088C340 	 .word 1086556160
 1488 00d0 00000000 	 .word MeasurementRunning
 1489 00d4 00000000 	 .word SensorVoltages
 1490 00d8 00001440 	 .word 1075052544
 1491 00dc 00000000 	 .word TemperatureLookupTable
 1492              	 .cfi_endproc
 1493              	.LFE259:
 1495              	 .text
 1496              	.Letext0:
 1497              	 .file 4 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1498              	 .file 5 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1499              	 .file 6 "../sensor/Sensor_Types.h"
 1500              	 .file 7 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 1501              	 .file 8 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc4_gpio.h"
 1502              	 .file 9 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Sensor_Temperature.c
    {standard input}:20     .text.NVIC_GetPriorityGrouping:00000000 $t
    {standard input}:24     .text.NVIC_GetPriorityGrouping:00000000 NVIC_GetPriorityGrouping
    {standard input}:58     .text.NVIC_GetPriorityGrouping:00000018 $d
    {standard input}:63     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:67     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:111    .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:116    .text.NVIC_SetPriority:00000000 $t
    {standard input}:120    .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:183    .text.NVIC_SetPriority:0000004c $d
    {standard input}:189    .text.NVIC_EncodePriority:00000000 $t
    {standard input}:193    .text.NVIC_EncodePriority:00000000 NVIC_EncodePriority
    {standard input}:275    .text.XMC_VADC_GLOBAL_DisablePostCalibration:00000000 $t
    {standard input}:279    .text.XMC_VADC_GLOBAL_DisablePostCalibration:00000000 XMC_VADC_GLOBAL_DisablePostCalibration
    {standard input}:327    .text.XMC_VADC_GLOBAL_BackgroundTriggerConversion:00000000 $t
    {standard input}:331    .text.XMC_VADC_GLOBAL_BackgroundTriggerConversion:00000000 XMC_VADC_GLOBAL_BackgroundTriggerConversion
    {standard input}:372    .text.XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:00000000 $t
    {standard input}:376    .text.XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:00000000 XMC_VADC_GLOBAL_BackgroundAddChannelToSequence
    {standard input}:426    .text.XMC_VADC_GROUP_ResultInit:00000000 $t
    {standard input}:430    .text.XMC_VADC_GROUP_ResultInit:00000000 XMC_VADC_GROUP_ResultInit
    {standard input}:474    .text.XMC_VADC_GROUP_GetResult:00000000 $t
    {standard input}:478    .text.XMC_VADC_GROUP_GetResult:00000000 XMC_VADC_GROUP_GetResult
    {standard input}:525    .rodata.global_config:00000000 global_config
    {standard input}:522    .rodata.global_config:00000000 $d
    {standard input}:551    .rodata.group_init_handle0:00000000 group_init_handle0
    {standard input}:548    .rodata.group_init_handle0:00000000 $d
    {standard input}:558    .rodata.global_iclass_config:00000000 global_iclass_config
    {standard input}:555    .rodata.global_iclass_config:00000000 $d
    {standard input}:565    .data.Channel_A_ch_config:00000000 Channel_A_ch_config
    {standard input}:562    .data.Channel_A_ch_config:00000000 $d
    {standard input}:580    .bss.Channel_A_res_config:00000000 Channel_A_res_config
    {standard input}:577    .bss.Channel_A_res_config:00000000 $d
    {standard input}:587    .rodata.backgnd_rs_intr_handle:00000000 backgnd_rs_intr_handle
    {standard input}:584    .rodata.backgnd_rs_intr_handle:00000000 $d
    {standard input}:596    .rodata.backgnd_config:00000000 backgnd_config
    {standard input}:593    .rodata.backgnd_config:00000000 $d
    {standard input}:610    .data.ADC_TEMPERATURE:00000000 ADC_TEMPERATURE
    {standard input}:607    .data.ADC_TEMPERATURE:00000000 $d
    {standard input}:623    .data.Temperature_Sensors:00000000 Temperature_Sensors
    {standard input}:620    .data.Temperature_Sensors:00000000 $d
    {standard input}:637    .data.TemperatureLookupTable:00000000 TemperatureLookupTable
    {standard input}:634    .data.TemperatureLookupTable:00000000 $d
                            *COM*:00000001 MeasurementRunning
                            *COM*:00000002 SensorVoltages
    {standard input}:943    .text.Sensor_Temperature_ADC_InitGlobal:00000000 $t
    {standard input}:948    .text.Sensor_Temperature_ADC_InitGlobal:00000000 Sensor_Temperature_ADC_InitGlobal
    {standard input}:987    .text.Sensor_Temperature_ADC_InitGlobal:00000034 $d
    {standard input}:994    .text.Sensor_Temperature_ADC_InitMeasurements:00000000 $t
    {standard input}:999    .text.Sensor_Temperature_ADC_InitMeasurements:00000000 Sensor_Temperature_ADC_InitMeasurements
    {standard input}:1145   .text.Sensor_Temperature_ADC_InitMeasurements:000000ec $d
    {standard input}:1152   .text.Sensor_Temperature_ADC_StartConversion:00000000 $t
    {standard input}:1157   .text.Sensor_Temperature_ADC_StartConversion:00000000 Sensor_Temperature_ADC_StartConversion
    {standard input}:1180   .text.Sensor_Temperature_ADC_GetConversionResult:00000000 $t
    {standard input}:1185   .text.Sensor_Temperature_ADC_GetConversionResult:00000000 Sensor_Temperature_ADC_GetConversionResult
    {standard input}:1231   .text.Sensor_Temperature_ConvertToVoltage:00000000 $t
    {standard input}:1236   .text.Sensor_Temperature_ConvertToVoltage:00000000 Sensor_Temperature_ConvertToVoltage
    {standard input}:1282   .text.Sensor_Temperature_ConvertToVoltage:00000038 $d
    {standard input}:1288   .text.VADC0_C0_2_IRQHandler:00000000 $t
    {standard input}:1293   .text.VADC0_C0_2_IRQHandler:00000000 VADC0_C0_2_IRQHandler
    {standard input}:1323   .text.VADC0_C0_2_IRQHandler:0000001c $d
    {standard input}:1330   .text.Sensor_Temperature_Init:00000000 $t
    {standard input}:1335   .text.Sensor_Temperature_Init:00000000 Sensor_Temperature_Init
    {standard input}:1363   .text.Sensor_Temperature_Calculate:00000000 $t
    {standard input}:1368   .text.Sensor_Temperature_Calculate:00000000 Sensor_Temperature_Calculate
    {standard input}:1486   .text.Sensor_Temperature_Calculate:000000c8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_VADC_GLOBAL_Init
XMC_VADC_GROUP_Init
XMC_VADC_GROUP_SetPowerMode
XMC_VADC_GLOBAL_StartupCalibration
XMC_VADC_GLOBAL_InputClassInit
XMC_VADC_GLOBAL_BackgroundInit
XMC_VADC_GROUP_ChannelInit
XMC_VADC_GROUP_ChannelSetInputReference
XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
__aeabi_i2d
__aeabi_dmul
__aeabi_dsub
__aeabi_ddiv
__aeabi_ui2d
__aeabi_dcmpgt
