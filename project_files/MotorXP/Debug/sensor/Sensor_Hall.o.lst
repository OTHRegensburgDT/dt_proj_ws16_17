   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "Sensor_Hall.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm SensorHallCallback,4,4
  20              	 .comm ActiveHallPattern,3,4
  21              	 .section .text.NVIC_EnableIRQ,"ax",%progbits
  22              	 .align 2
  23              	 .thumb
  24              	 .thumb_func
  26              	NVIC_EnableIRQ:
  27              	.LFB108:
  28              	 .file 1 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Include/core_cm4.h"
   1:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**************************************************************************//**
   2:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @file     core_cm4.h
   3:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @version  V4.30
   5:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  * @date     20. October 2015
   6:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
   7:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
   9:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    All rights reserved.
  10:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      to endorse or promote products derived from this software without
  19:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      specific prior written permission.
  20:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    *
  21:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  34:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  35:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __ICCARM__ )
  36:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
  40:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  41:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  44:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include <stdint.h>
  45:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  46:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
  47:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
  48:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
  49:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  50:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
  51:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  54:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  57:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Unions are used for effective representation of core registers.
  59:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  60:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
  63:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  64:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  65:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
  66:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                 CMSIS definitions
  67:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
  68:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
  69:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup Cortex_M4
  70:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
  71:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
  72:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  73:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*  CMSIS CM4 definitions */
  74:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  79:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  81:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  82:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if   defined ( __CC_ARM )
  83:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  87:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  92:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
  93:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
  97:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
  98:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 102:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TMS470__ )
 103:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 106:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 107:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 111:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 112:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __packed
 113:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 117:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #else
 118:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #error Unknown compiler
 119:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 120:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 121:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 124:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if defined ( __CC_ARM )
 125:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 128:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 129:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 131:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 132:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 133:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 134:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 135:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 136:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 140:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 141:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 143:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 144:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 145:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 146:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 147:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 148:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __GNUC__ )
 149:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 152:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 153:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 155:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 156:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 157:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 158:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 159:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 160:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __ICCARM__ )
 161:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __ARMVFP__
 162:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 164:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 165:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 167:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 168:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 169:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 170:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 171:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 172:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TMS470__ )
 173:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 176:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 177:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 179:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 180:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 181:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 182:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 183:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 184:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __TASKING__ )
 185:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if defined __FPU_VFP__
 186:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 188:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 189:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 191:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 192:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 193:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 194:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 195:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 196:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #elif defined ( __CSMC__ )
 197:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       1U
 200:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #else
 201:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****       #define __FPU_USED       0U
 203:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #endif
 204:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #else
 205:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_USED         0U
 206:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 207:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 208:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 209:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 210:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 214:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 215:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 216:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 217:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 218:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 220:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 222:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 225:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 226:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  extern "C" {
 227:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 228:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 229:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* check device defines and use defaults */
 230:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __CM4_REV
 232:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __CM4_REV               0x0000U
 233:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 235:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 236:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __FPU_PRESENT
 237:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __FPU_PRESENT             0U
 238:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 240:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 241:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __MPU_PRESENT
 242:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __MPU_PRESENT             0U
 243:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 245:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 246:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 250:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 251:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #endif
 255:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 256:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 257:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 259:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \li to specify the access to peripheral variables.
 263:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 265:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #ifdef __cplusplus
 266:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #else
 268:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
 270:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 273:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* following defines should be used for structure members */
 274:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 278:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group Cortex_M4 */
 279:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 280:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 281:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 282:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
 283:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                 Register Abstraction
 284:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   Core Register contain:
 285:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register
 286:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Register
 287:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SCB Register
 288:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Register
 289:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Register
 290:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core MPU Register
 291:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core FPU Register
 292:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
 293:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 294:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
 297:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 298:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 299:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 300:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Core Register type definitions.
 302:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 303:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 304:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 305:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 306:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 308:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 309:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 310:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 311:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 312:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } APSR_Type;
 323:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 324:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* APSR Register Definitions */
 325:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 328:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 331:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 334:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 337:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 340:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 343:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 344:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 345:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 347:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 348:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 349:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 350:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 351:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } IPSR_Type;
 356:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 357:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* IPSR Register Definitions */
 358:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 361:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 362:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 363:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 365:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 366:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 367:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 368:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 369:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } xPSR_Type;
 383:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 384:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* xPSR Register Definitions */
 385:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 388:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 391:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 394:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 397:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 400:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 403:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 406:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 409:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 412:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 413:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 414:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 416:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef union
 417:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 418:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   struct
 419:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 420:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } CONTROL_Type;
 427:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 428:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* CONTROL Register Definitions */
 429:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 432:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 435:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 438:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 440:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 441:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 442:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
 443:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 446:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 447:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 448:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 449:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 451:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 452:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 453:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[24U];
 455:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RSERVED1[24U];
 457:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[24U];
 459:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[24U];
 461:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[56U];
 463:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[644U];
 465:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }  NVIC_Type;
 467:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 468:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 472:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 474:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 475:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 476:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 477:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 480:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 481:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 482:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 483:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 485:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 486:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 487:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[5U];
 507:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SCB_Type;
 509:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 510:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB CPUID Register Definitions */
 511:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 514:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 517:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 520:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 523:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 526:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 530:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 533:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 536:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 539:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 542:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 545:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 548:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 551:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 554:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 557:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 561:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 565:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 568:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 571:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 574:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 577:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 580:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 583:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Control Register Definitions */
 584:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 587:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 590:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 593:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 597:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 600:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 603:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 606:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 609:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 612:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 616:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 619:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 622:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 625:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 628:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 631:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 634:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 637:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 640:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 643:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 646:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 649:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 652:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 655:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 659:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 662:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 665:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 669:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 672:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 675:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 679:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 682:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 685:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 688:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 691:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 693:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 694:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 695:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 696:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 699:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 700:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 701:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 702:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 704:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 705:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 706:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 707:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SCnSCB_Type;
 710:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 711:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 715:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 719:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 722:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 725:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 728:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 731:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 733:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 734:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 735:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 736:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 739:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 740:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 741:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 742:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 744:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 745:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 746:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } SysTick_Type;
 751:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 752:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 756:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 759:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 762:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 765:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Reload Register Definitions */
 766:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 769:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Current Register Definitions */
 770:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 773:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 777:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 780:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 783:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 785:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 786:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 787:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 788:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 791:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 792:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 793:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 794:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 796:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 797:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 798:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  union
 799:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
 800:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[864U];
 805:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[15U];
 807:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[15U];
 809:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[29U];
 811:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[43U];
 815:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[6U];
 818:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } ITM_Type;
 831:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 832:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 836:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 840:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 843:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 846:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 849:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 852:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 855:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 858:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 861:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 864:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 868:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 872:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 876:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 880:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 883:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 886:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 888:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 889:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 890:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
 891:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
 894:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 895:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 896:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
 897:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
 899:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
 900:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
 901:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
 913:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[1U];
 917:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[1U];
 921:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } DWT_Type;
 925:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 926:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Control Register Definitions */
 927:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 930:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 933:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 936:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 939:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 942:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 945:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 948:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 951:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 954:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 957:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 960:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 963:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 966:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 969:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 972:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 975:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 978:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 981:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 985:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 989:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 993:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
 997:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1001:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1005:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1009:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1012:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1015:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1018:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1021:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1024:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1027:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1030:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1033:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1035:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1036:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1037:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1038:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1041:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1042:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1043:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1044:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1046:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1047:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1048:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[2U];
1051:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED1[55U];
1053:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED2[131U];
1055:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED3[759U];
1059:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED4[1U];
1063:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED5[39U];
1067:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED7[8U];
1070:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } TPI_Type;
1073:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1074:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1078:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1082:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1086:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1089:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1092:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1095:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1099:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1102:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1106:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1110:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1113:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1116:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1119:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1122:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1125:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1128:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1132:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1136:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1139:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1142:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1145:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1148:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1151:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1154:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1158:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1162:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVID Register Definitions */
1163:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1166:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1169:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1172:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1175:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1178:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1181:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1185:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1188:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1190:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1191:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1193:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1194:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1197:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1198:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1199:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1200:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1202:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1203:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1204:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } MPU_Type;
1216:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1217:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Type Register Definitions */
1218:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1221:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1224:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1227:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Control Register Definitions */
1228:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1231:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1234:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1237:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Number Register Definitions */
1238:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1241:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1245:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1248:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1251:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1255:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1258:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1261:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1264:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1267:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1270:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1273:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1276:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1279:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1282:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1284:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1285:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1286:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1288:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1289:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1292:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1293:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1294:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1295:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1297:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1298:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1299:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****         uint32_t RESERVED0[1U];
1300:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } FPU_Type;
1306:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1307:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1311:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1314:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1317:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1320:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1323:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1326:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1329:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1332:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1335:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1339:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1343:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1346:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1349:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1352:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1356:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1359:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1362:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1365:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1368:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1371:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1374:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1377:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1381:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1384:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1387:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1390:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1392:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1393:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1394:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1395:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_core_register
1396:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1399:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1400:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1401:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1402:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1404:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** typedef struct
1405:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1406:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** } CoreDebug_Type;
1411:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1412:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1416:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1419:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1422:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1425:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1428:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1431:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1434:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1437:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1440:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1443:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1446:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1449:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1453:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1456:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1460:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1463:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1466:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1469:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1472:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1475:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1478:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1481:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1484:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1487:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1490:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1493:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1496:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1498:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1499:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1500:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1501:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1504:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1505:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1506:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1507:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of the bit field.
1510:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted value.
1511:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1512:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1514:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1515:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param[in] value  Value of register.
1518:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return           Masked and shifted bit field value.
1519:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1520:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1522:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1524:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1525:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1526:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup    CMSIS_core_register
1527:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1530:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1531:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1532:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1542:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1551:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1555:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1556:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** #endif
1560:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1561:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*@} */
1562:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1563:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1564:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1565:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /*******************************************************************************
1566:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  *                Hardware Abstraction Layer
1567:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   Core Function Interface contains:
1568:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core NVIC Functions
1569:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core SysTick Functions
1570:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Debug Functions
1571:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   - Core Register Access Functions
1572:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  ******************************************************************************/
1573:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1574:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** */
1576:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1577:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1578:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1579:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1581:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   @{
1585:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1586:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1587:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1588:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Priority Grouping
1589:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            Only values from 0..7 are used.
1592:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            In case of a conflict between priority grouping and available
1593:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1596:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1598:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t reg_value;
1599:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1601:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1608:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1609:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1610:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1611:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Priority Grouping
1612:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1615:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1617:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1618:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1619:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1620:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1621:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1622:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Enable External Interrupt
1623:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1626:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
  29              	 .loc 1 1627 0
  30              	 .cfi_startproc
  31              	 
  32              	 
  33              	 
  34 0000 80B4     	 push {r7}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 4
  37              	 .cfi_offset 7,-4
  38 0002 83B0     	 sub sp,sp,#12
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 16
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 0346     	 mov r3,r0
  45 0008 FB71     	 strb r3,[r7,#7]
1628:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  46              	 .loc 1 1628 0
  47 000a 0849     	 ldr r1,.L2
  48 000c 97F90730 	 ldrsb r3,[r7,#7]
  49 0010 5B09     	 lsrs r3,r3,#5
  50 0012 FA79     	 ldrb r2,[r7,#7]
  51 0014 02F01F02 	 and r2,r2,#31
  52 0018 0120     	 movs r0,#1
  53 001a 00FA02F2 	 lsl r2,r0,r2
  54 001e 41F82320 	 str r2,[r1,r3,lsl#2]
1629:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
  55              	 .loc 1 1629 0
  56 0022 0C37     	 adds r7,r7,#12
  57              	.LCFI3:
  58              	 .cfi_def_cfa_offset 4
  59 0024 BD46     	 mov sp,r7
  60              	.LCFI4:
  61              	 .cfi_def_cfa_register 13
  62              	 
  63 0026 5DF8047B 	 ldr r7,[sp],#4
  64              	.LCFI5:
  65              	 .cfi_restore 7
  66              	 .cfi_def_cfa_offset 0
  67 002a 7047     	 bx lr
  68              	.L3:
  69              	 .align 2
  70              	.L2:
  71 002c 00E100E0 	 .word -536813312
  72              	 .cfi_endproc
  73              	.LFE108:
  75              	 .section .text.NVIC_SetPriority,"ax",%progbits
  76              	 .align 2
  77              	 .thumb
  78              	 .thumb_func
  80              	NVIC_SetPriority:
  81              	.LFB114:
1630:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1631:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1632:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1633:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Disable External Interrupt
1634:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
1635:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1636:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1637:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1638:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1639:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1640:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1641:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1642:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1643:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1644:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Pending Interrupt
1645:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
1646:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1647:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not pending.
1648:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is pending.
1649:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1650:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1651:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1652:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return((uint32_t)(((NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1653:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1654:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1655:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1656:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1657:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Pending Interrupt
1658:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the pending bit of an external interrupt.
1659:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
1660:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1661:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1662:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1663:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1664:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1665:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1666:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1667:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1668:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Clear Pending Interrupt
1669:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Clears the pending bit of an external interrupt.
1670:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1671:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1672:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1673:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1674:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
1675:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1676:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1677:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1678:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1679:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Get Active Interrupt
1680:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Reads the active register in NVIC and returns the active bit.
1681:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1682:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             0  Interrupt status is not active.
1683:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \return             1  Interrupt status is active.
1684:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1685:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1686:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
1687:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   return((uint32_t)(((NVIC->IABR[(((uint32_t)(int32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)(int32_t
1688:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
1689:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1690:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** 
1691:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** /**
1692:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \brief   Set Interrupt Priority
1693:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \details Sets the priority of an interrupt.
1694:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \note    The priority cannot be set for every core interrupt.
1695:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]      IRQn  Interrupt number.
1696:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   \param [in]  priority  Priority to set.
1697:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****  */
1698:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1699:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** {
  82              	 .loc 1 1699 0
  83              	 .cfi_startproc
  84              	 
  85              	 
  86              	 
  87 0000 80B4     	 push {r7}
  88              	.LCFI6:
  89              	 .cfi_def_cfa_offset 4
  90              	 .cfi_offset 7,-4
  91 0002 83B0     	 sub sp,sp,#12
  92              	.LCFI7:
  93              	 .cfi_def_cfa_offset 16
  94 0004 00AF     	 add r7,sp,#0
  95              	.LCFI8:
  96              	 .cfi_def_cfa_register 7
  97 0006 0346     	 mov r3,r0
  98 0008 3960     	 str r1,[r7]
  99 000a FB71     	 strb r3,[r7,#7]
1700:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   if ((int32_t)(IRQn) < 0)
 100              	 .loc 1 1700 0
 101 000c 97F90730 	 ldrsb r3,[r7,#7]
 102 0010 002B     	 cmp r3,#0
 103 0012 0BDA     	 bge .L5
1701:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1702:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 104              	 .loc 1 1702 0
 105 0014 0D49     	 ldr r1,.L7
 106 0016 FB79     	 ldrb r3,[r7,#7]
 107 0018 03F00F03 	 and r3,r3,#15
 108 001c 043B     	 subs r3,r3,#4
 109 001e 3A68     	 ldr r2,[r7]
 110 0020 D2B2     	 uxtb r2,r2
 111 0022 9200     	 lsls r2,r2,#2
 112 0024 D2B2     	 uxtb r2,r2
 113 0026 0B44     	 add r3,r3,r1
 114 0028 1A76     	 strb r2,[r3,#24]
 115 002a 09E0     	 b .L4
 116              	.L5:
1703:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1704:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   else
1705:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   {
1706:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****     NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BI
 117              	 .loc 1 1706 0
 118 002c 0849     	 ldr r1,.L7+4
 119 002e 97F90730 	 ldrsb r3,[r7,#7]
 120 0032 3A68     	 ldr r2,[r7]
 121 0034 D2B2     	 uxtb r2,r2
 122 0036 9200     	 lsls r2,r2,#2
 123 0038 D2B2     	 uxtb r2,r2
 124 003a 0B44     	 add r3,r3,r1
 125 003c 83F80023 	 strb r2,[r3,#768]
 126              	.L4:
1707:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h ****   }
1708:E:/DT/workspace/MotorXP/Libraries/CMSIS/Include\core_cm4.h **** }
 127              	 .loc 1 1708 0
 128 0040 0C37     	 adds r7,r7,#12
 129              	.LCFI9:
 130              	 .cfi_def_cfa_offset 4
 131 0042 BD46     	 mov sp,r7
 132              	.LCFI10:
 133              	 .cfi_def_cfa_register 13
 134              	 
 135 0044 5DF8047B 	 ldr r7,[sp],#4
 136              	.LCFI11:
 137              	 .cfi_restore 7
 138              	 .cfi_def_cfa_offset 0
 139 0048 7047     	 bx lr
 140              	.L8:
 141 004a 00BF     	 .align 2
 142              	.L7:
 143 004c 00ED00E0 	 .word -536810240
 144 0050 00E100E0 	 .word -536813312
 145              	 .cfi_endproc
 146              	.LFE114:
 148              	 .section .text.XMC_CCU4_StartPrescaler,"ax",%progbits
 149              	 .align 2
 150              	 .thumb
 151              	 .thumb_func
 153              	XMC_CCU4_StartPrescaler:
 154              	.LFB130:
 155              	 .file 2 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_ccu4.h"
   1:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
   2:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @date 2016-05-20
   4:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   5:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
   9:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  18:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
  21:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  36:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  39:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  43:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  46:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  49:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  54:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  58:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  64:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  67:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  68:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
  71:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  72:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  73:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  74:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  75:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  76:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  77:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  78:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  79:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  80:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  81:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  82:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  83:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  84:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  85:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  86:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  87:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  88:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  89:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
  90:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
  91:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  92:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  93:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
  94:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
  95:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  
  96:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
  97:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
  98:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
  99:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @{
 149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  
 151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */ 
 665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   union
 668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   {
 669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     struct
 670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     {
 671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     };
 682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   };
 684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
 772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif 
 773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** } 
 776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 156              	 .loc 2 858 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI12:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI13:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI14:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 172              	 .loc 2 860 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a DB68     	 ldr r3,[r3,#12]
 175 000c 43F48072 	 orr r2,r3,#256
 176 0010 7B68     	 ldr r3,[r7,#4]
 177 0012 DA60     	 str r2,[r3,#12]
 861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 178              	 .loc 2 861 0
 179 0014 0C37     	 adds r7,r7,#12
 180              	.LCFI15:
 181              	 .cfi_def_cfa_offset 4
 182 0016 BD46     	 mov sp,r7
 183              	.LCFI16:
 184              	 .cfi_def_cfa_register 13
 185              	 
 186 0018 5DF8047B 	 ldr r7,[sp],#4
 187              	.LCFI17:
 188              	 .cfi_restore 7
 189              	 .cfi_def_cfa_offset 0
 190 001c 7047     	 bx lr
 191              	 .cfi_endproc
 192              	.LFE130:
 194 001e 00BF     	 .section .text.XMC_CCU4_EnableClock,"ax",%progbits
 195              	 .align 2
 196              	 .thumb
 197              	 .thumb_func
 199              	XMC_CCU4_EnableClock:
 200              	.LFB134:
 862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   
 924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 201              	 .loc 2 944 0
 202              	 .cfi_startproc
 203              	 
 204              	 
 205              	 
 206 0000 80B4     	 push {r7}
 207              	.LCFI18:
 208              	 .cfi_def_cfa_offset 4
 209              	 .cfi_offset 7,-4
 210 0002 83B0     	 sub sp,sp,#12
 211              	.LCFI19:
 212              	 .cfi_def_cfa_offset 16
 213 0004 00AF     	 add r7,sp,#0
 214              	.LCFI20:
 215              	 .cfi_def_cfa_register 7
 216 0006 7860     	 str r0,[r7,#4]
 217 0008 0B46     	 mov r3,r1
 218 000a FB70     	 strb r3,[r7,#3]
 945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
 219              	 .loc 2 948 0
 220 000c 7B68     	 ldr r3,[r7,#4]
 221 000e DA68     	 ldr r2,[r3,#12]
 222 0010 FB78     	 ldrb r3,[r7,#3]
 223 0012 0121     	 movs r1,#1
 224 0014 01FA03F3 	 lsl r3,r1,r3
 225 0018 1A43     	 orrs r2,r2,r3
 226 001a 7B68     	 ldr r3,[r7,#4]
 227 001c DA60     	 str r2,[r3,#12]
 949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 228              	 .loc 2 949 0
 229 001e 0C37     	 adds r7,r7,#12
 230              	.LCFI21:
 231              	 .cfi_def_cfa_offset 4
 232 0020 BD46     	 mov sp,r7
 233              	.LCFI22:
 234              	 .cfi_def_cfa_register 13
 235              	 
 236 0022 5DF8047B 	 ldr r7,[sp],#4
 237              	.LCFI23:
 238              	 .cfi_restore 7
 239              	 .cfi_def_cfa_offset 0
 240 0026 7047     	 bx lr
 241              	 .cfi_endproc
 242              	.LFE134:
 244              	 .section .text.XMC_CCU4_SLICE_StartTimer,"ax",%progbits
 245              	 .align 2
 246              	 .thumb
 247              	 .thumb_func
 249              	XMC_CCU4_SLICE_StartTimer:
 250              	.LFB141:
 950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
 958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
 989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * None.
 991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
 992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
 994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
 995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
 996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
 998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1002:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1003:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1004:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1005:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1006:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1007:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1008:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1009:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1010:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1011:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1012:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1013:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1014:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1015:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1016:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1017:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1018:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1019:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1020:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1021:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1022:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1023:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1024:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1025:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1026:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1027:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1028:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1029:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1030:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1031:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1032:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1033:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1034:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1035:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1036:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1037:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1038:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1039:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1040:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1041:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1042:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1043:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1044:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1045:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1046:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1047:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1048:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1049:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1050:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1051:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1052:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1053:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1054:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1055:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1056:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1057:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1058:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1059:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1060:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1061:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1062:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1063:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1064:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1065:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1066:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1067:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1068:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1069:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1070:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1071:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1072:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1073:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1074:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1075:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1076:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1077:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1078:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1079:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1080:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1081:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1082:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1083:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1084:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1085:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1086:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1087:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1088:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1089:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1090:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1091:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1092:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1093:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1094:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1095:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1096:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1097:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1098:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1099:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #else
1200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** #endif
1221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * 
1327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 251              	 .loc 2 1433 0
 252              	 .cfi_startproc
 253              	 
 254              	 
 255              	 
 256 0000 80B4     	 push {r7}
 257              	.LCFI24:
 258              	 .cfi_def_cfa_offset 4
 259              	 .cfi_offset 7,-4
 260 0002 83B0     	 sub sp,sp,#12
 261              	.LCFI25:
 262              	 .cfi_def_cfa_offset 16
 263 0004 00AF     	 add r7,sp,#0
 264              	.LCFI26:
 265              	 .cfi_def_cfa_register 7
 266 0006 7860     	 str r0,[r7,#4]
1434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 267              	 .loc 2 1435 0
 268 0008 7B68     	 ldr r3,[r7,#4]
 269 000a 0122     	 movs r2,#1
 270 000c DA60     	 str r2,[r3,#12]
1436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 271              	 .loc 2 1436 0
 272 000e 0C37     	 adds r7,r7,#12
 273              	.LCFI27:
 274              	 .cfi_def_cfa_offset 4
 275 0010 BD46     	 mov sp,r7
 276              	.LCFI28:
 277              	 .cfi_def_cfa_register 13
 278              	 
 279 0012 5DF8047B 	 ldr r7,[sp],#4
 280              	.LCFI29:
 281              	 .cfi_restore 7
 282              	 .cfi_def_cfa_offset 0
 283 0016 7047     	 bx lr
 284              	 .cfi_endproc
 285              	.LFE141:
 287              	 .section .text.XMC_CCU4_SLICE_StopTimer,"ax",%progbits
 288              	 .align 2
 289              	 .thumb
 290              	 .thumb_func
 292              	XMC_CCU4_SLICE_StopTimer:
 293              	.LFB142:
1437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 294              	 .loc 2 1451 0
 295              	 .cfi_startproc
 296              	 
 297              	 
 298              	 
 299 0000 80B4     	 push {r7}
 300              	.LCFI30:
 301              	 .cfi_def_cfa_offset 4
 302              	 .cfi_offset 7,-4
 303 0002 83B0     	 sub sp,sp,#12
 304              	.LCFI31:
 305              	 .cfi_def_cfa_offset 16
 306 0004 00AF     	 add r7,sp,#0
 307              	.LCFI32:
 308              	 .cfi_def_cfa_register 7
 309 0006 7860     	 str r0,[r7,#4]
1452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 310              	 .loc 2 1453 0
 311 0008 7B68     	 ldr r3,[r7,#4]
 312 000a 0122     	 movs r2,#1
 313 000c 1A61     	 str r2,[r3,#16]
1454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 314              	 .loc 2 1454 0
 315 000e 0C37     	 adds r7,r7,#12
 316              	.LCFI33:
 317              	 .cfi_def_cfa_offset 4
 318 0010 BD46     	 mov sp,r7
 319              	.LCFI34:
 320              	 .cfi_def_cfa_register 13
 321              	 
 322 0012 5DF8047B 	 ldr r7,[sp],#4
 323              	.LCFI35:
 324              	 .cfi_restore 7
 325              	 .cfi_def_cfa_offset 0
 326 0016 7047     	 bx lr
 327              	 .cfi_endproc
 328              	.LFE142:
 330              	 .section .text.XMC_CCU4_SLICE_SetTimerPeriodMatch,"ax",%progbits
 331              	 .align 2
 332              	 .thumb
 333              	 .thumb_func
 335              	XMC_CCU4_SLICE_SetTimerPeriodMatch:
 336              	.LFB148:
1455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 337              	 .loc 2 1605 0
 338              	 .cfi_startproc
 339              	 
 340              	 
 341              	 
 342 0000 80B4     	 push {r7}
 343              	.LCFI36:
 344              	 .cfi_def_cfa_offset 4
 345              	 .cfi_offset 7,-4
 346 0002 83B0     	 sub sp,sp,#12
 347              	.LCFI37:
 348              	 .cfi_def_cfa_offset 16
 349 0004 00AF     	 add r7,sp,#0
 350              	.LCFI38:
 351              	 .cfi_def_cfa_register 7
 352 0006 7860     	 str r0,[r7,#4]
 353 0008 0B46     	 mov r3,r1
 354 000a 7B80     	 strh r3,[r7,#2]
1606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
 355              	 .loc 2 1607 0
 356 000c 7A88     	 ldrh r2,[r7,#2]
 357 000e 7B68     	 ldr r3,[r7,#4]
 358 0010 5A63     	 str r2,[r3,#52]
1608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 359              	 .loc 2 1608 0
 360 0012 0C37     	 adds r7,r7,#12
 361              	.LCFI39:
 362              	 .cfi_def_cfa_offset 4
 363 0014 BD46     	 mov sp,r7
 364              	.LCFI40:
 365              	 .cfi_def_cfa_register 13
 366              	 
 367 0016 5DF8047B 	 ldr r7,[sp],#4
 368              	.LCFI41:
 369              	 .cfi_restore 7
 370              	 .cfi_def_cfa_offset 0
 371 001a 7047     	 bx lr
 372              	 .cfi_endproc
 373              	.LFE148:
 375              	 .section .text.XMC_CCU4_SLICE_SetTimerCompareMatch,"ax",%progbits
 376              	 .align 2
 377              	 .thumb
 378              	 .thumb_func
 380              	XMC_CCU4_SLICE_SetTimerCompareMatch:
 381              	.LFB150:
1609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 382              	 .loc 2 1653 0
 383              	 .cfi_startproc
 384              	 
 385              	 
 386              	 
 387 0000 80B4     	 push {r7}
 388              	.LCFI42:
 389              	 .cfi_def_cfa_offset 4
 390              	 .cfi_offset 7,-4
 391 0002 83B0     	 sub sp,sp,#12
 392              	.LCFI43:
 393              	 .cfi_def_cfa_offset 16
 394 0004 00AF     	 add r7,sp,#0
 395              	.LCFI44:
 396              	 .cfi_def_cfa_register 7
 397 0006 7860     	 str r0,[r7,#4]
 398 0008 0B46     	 mov r3,r1
 399 000a 7B80     	 strh r3,[r7,#2]
1654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
 400              	 .loc 2 1655 0
 401 000c 7A88     	 ldrh r2,[r7,#2]
 402 000e 7B68     	 ldr r3,[r7,#4]
 403 0010 DA63     	 str r2,[r3,#60]
1656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 404              	 .loc 2 1656 0
 405 0012 0C37     	 adds r7,r7,#12
 406              	.LCFI45:
 407              	 .cfi_def_cfa_offset 4
 408 0014 BD46     	 mov sp,r7
 409              	.LCFI46:
 410              	 .cfi_def_cfa_register 13
 411              	 
 412 0016 5DF8047B 	 ldr r7,[sp],#4
 413              	.LCFI47:
 414              	 .cfi_restore 7
 415              	 .cfi_def_cfa_offset 0
 416 001a 7047     	 bx lr
 417              	 .cfi_endproc
 418              	.LFE150:
 420              	 .section .text.XMC_CCU4_EnableShadowTransfer,"ax",%progbits
 421              	 .align 2
 422              	 .thumb
 423              	 .thumb_func
 425              	XMC_CCU4_EnableShadowTransfer:
 426              	.LFB152:
1657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
1680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
1683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** 
1684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** /**
1685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *
1703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  *  None.
1705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****  */
1706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** {
 427              	 .loc 2 1707 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431              	 
 432 0000 80B4     	 push {r7}
 433              	.LCFI48:
 434              	 .cfi_def_cfa_offset 4
 435              	 .cfi_offset 7,-4
 436 0002 83B0     	 sub sp,sp,#12
 437              	.LCFI49:
 438              	 .cfi_def_cfa_offset 16
 439 0004 00AF     	 add r7,sp,#0
 440              	.LCFI50:
 441              	 .cfi_def_cfa_register 7
 442 0006 7860     	 str r0,[r7,#4]
 443 0008 3960     	 str r1,[r7]
1708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
 444              	 .loc 2 1709 0
 445 000a 7B68     	 ldr r3,[r7,#4]
 446 000c 3A68     	 ldr r2,[r7]
 447 000e 1A61     	 str r2,[r3,#16]
1710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_ccu4.h **** }
 448              	 .loc 2 1710 0
 449 0010 0C37     	 adds r7,r7,#12
 450              	.LCFI51:
 451              	 .cfi_def_cfa_offset 4
 452 0012 BD46     	 mov sp,r7
 453              	.LCFI52:
 454              	 .cfi_def_cfa_register 13
 455              	 
 456 0014 5DF8047B 	 ldr r7,[sp],#4
 457              	.LCFI53:
 458              	 .cfi_restore 7
 459              	 .cfi_def_cfa_offset 0
 460 0018 7047     	 bx lr
 461              	 .cfi_endproc
 462              	.LFE152:
 464 001a 00BF     	 .section .text.XMC_POSIF_Start,"ax",%progbits
 465              	 .align 2
 466              	 .thumb
 467              	 .thumb_func
 469              	XMC_POSIF_Start:
 470              	.LFB254:
 471              	 .file 3 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_posif.h"
   1:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
   2:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @file xmc_posif.h
   3:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @date 2016-03-09
   4:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
   5:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @cond
   6:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **********************************************************************************
   7:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
   9:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * All rights reserved.                        
  11:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                             
  12:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Redistribution and use in source and binary forms, with or without           
  13:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * modification,are permitted provided that the following conditions are met:   
  14:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                                                              
  15:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   Redistributions of source code must retain the above copyright notice,      
  16:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   this list of conditions and the following disclaimer.                        
  17:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 
  18:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  19:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   this list of conditions and the following disclaimer in the documentation    
  20:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   and/or other materials provided with the distribution.                       
  21:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 
  22:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   Neither the name of the copyright holders nor the names of its contributors 
  23:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   may be used to endorse or promote products derived from this software without
  24:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *   specific prior written permission.                                           
  25:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                                                              
  26:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  27:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  28:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  29:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  30:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  31:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  32:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  33:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  34:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  35:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  36:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  37:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                                                                              
  38:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * To improve the quality of the software, users are encouraged to share        
  39:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  40:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * dave@infineon.com).                                                          
  41:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **********************************************************************************
  42:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  43:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Change History
  44:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * --------------
  45:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  46:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-02-18:
  47:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Initial version
  48:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *      
  49:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-02-20:
  50:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Driver description added <BR>
  51:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  52:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-06-19:
  53:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Removed version macros and declaration of GetDriverVersion API <BR> 
  54:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  55:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2015-07-02:
  56:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Updated XMC_POSIF_QD_GetDirection API
  57:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  58:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 2016-03-09:
  59:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *     - Optimization of write only registers
  60:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  61:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @endcond 
  62:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  63:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
  64:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  65:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  66:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #ifndef XMC_POSIF_H
  67:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_H
  68:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  69:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
  70:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * HEADER FILES
  71:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
  72:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #include <xmc_common.h>
  73:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  74:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if defined(POSIF0)
  75:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #include <xmc_scu.h>
  76:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  77:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
  78:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @addtogroup XMClib
  79:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @{
  80:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
  81:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
  82:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
  83:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @addtogroup POSIF
  84:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @{
  85:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @brief Position Interface Unit (POSIF) driver for the XMC microcontroller family <br>
  86:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  87:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The POSIF unit is a flexible and powerful component for motor control systems that use
  88:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * rotary encoders or hall sensors as feedback loop. It provides interface for motor position and v
  89:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSIF unit works with CCU4 and CCU8 to enable position and velocity measurement and to control P
  90:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  91:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Driver is divided in three POSIF functional blocks - Hall Sensor Control (POSIF_HSC), Quadrature
  92:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * MultiChannel Mode (POSIF_MCM). <br>
  93:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
  94:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSIF driver features:
  95:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  Configuration structure XMC_POSIF_CONFIG_t and initialization function XMC_POSIF_Init() to c
  96:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# Allows to change the operating mode using XMC_POSIF_SetMode()
  97:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# Allows the selection of one of the four inputs (A, B, C or D) using XMC_POSIF_SelectInputSour
  98:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * hall0, hall1 and hall2 signals. For quadrature decoder mode, inputs are phase A, phase B and ind
  99:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  Hall Sensor Control (APIs prefixed with XMC_POSIF_HSC_) <br>
 100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Configuration structure XMC_POSIF_HSC_CONFIG_t and initialization function XMC_POSIF_HSC_Ini
 101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Update current and expected hall pattern in shadow register using XMC_POSIF_HSC_SetHallPatte
 102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	- Allows immediate shadow transfer using XMC_POSIF_HSC_UpdateHallPattern()
 103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  Quadrature Decoder (APIs prefixed with XMC_POSIF_QD_) <br>
 104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Configuration structure XMC_POSIF_QD_CONFIG_t and initialization function XMC_POSIF_QD_Init(
 105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * 	-  Get direction of rotation using XMC_POSIF_QD_GetDirection()
 106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -#  MultiChannel Mode (APIs prefixed with XMC_POSIF_MCM_) <br>
 107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *	-  Configuration structure XMC_POSIF_MCM_CONFIG_t and initialization function XMC_POSIF_MCM_Init
 108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *	-  Update multichannel pattern in shadow register using XMC_POSIF_MCM_SetMultiChannelPattern()
 109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *	-  Allows immediate shadow transfer using XMC_POSIF_MCM_UpdateMultiChannelPattern()
 110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# User need to call respective init functions to configure POSIF operating mode. e.g to configu
 111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * call both XMC_POSIF_HSC_Init() and XMC_POSIF_MCM_Init().
 112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * -# Allows to enable and disable interrupt sources and assign to service request node using XMC_P
 113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /* POSIF is not available on XMC11 and XMC12 devices */
 116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * MACROS
 119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_PCONF_INSEL_Msk        (0x3fUL << POSIF_PCONF_INSEL0_Pos) /*< Mask for input pins
 121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_INSEL_MAX              (4U) /*< Maximum possible input selector */
 122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_HALPS_HALLPAT_Msk      (0x3FUL)
 123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if ((UC_SERIES == XMC45) || (UC_SERIES == XMC44) || (UC_SERIES == XMC47) || (UC_SERIES == XMC48) |
 125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_CHECK_MODULE_PTR(PTR)  ( ((PTR)== POSIF0) || ((PTR)== POSIF1) ) /*< Check for val
 126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #else
 127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #define XMC_POSIF_CHECK_MODULE_PTR(PTR)  ( ((PTR)== POSIF0))  /*< Check for valid module pointer */
 128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * ENUMS
 132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines the return status, to verify the POSIF related API calls. Use type @ref XMC_POSIF_STATU
 135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_STATUS
 137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_STATUS_OK = 0U,     /**< API fulfills request */
 139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_STATUS_ERROR        /**< API cannot fulfill request */
 140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_STATUS_t;
 141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF configurable modes.Use type @ref XMC_POSIF_MODE_t for this enum.
 144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The members defines the function selector(FSEL) bitfields of \a PCONF register.
 145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_MODE
 147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_HALL_SENSOR = 0U, /**< Hall sensor mode */
 149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_QD              , /**< Quadrature Decoder mode */
 150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_MCM             , /**< Standalone Multichannel mode */
 151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_MODE_MCM_QD           /**< Quadrature Decoder + Standalone Multichannel mode */
 152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_MODE_t;
 153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF configurable input ports.Use type @ref XMC_POSIF_INPUT_PORT_t for this enum.
 156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines the respective input selector(INSELX) bitfields of \a PCONF register.
 157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It selects, which input is used for the phase or Hall input function (depending on the module is
 158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Quadrature Decoder or Hall Sensor Mode). Same enum can be used to configure pattern update signa
 159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \a PCONF register's \a MSETS bit field.
 160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_INPUT_PORT
 162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_A = 0U, /**< INPUT-A */
 164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_B     , /**< INPUT-B */
 165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_C     , /**< INPUT-C */
 166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_D     , /**< INPUT-D */
 167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_E     , /**< INPUT-E */
 168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_F     , /**< INPUT-F */
 169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_G     , /**< INPUT-G */
 170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_PORT_H       /**< INPUT-H */
 171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_INPUT_PORT_t;
 172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines active level of an input signal.Use type @ref XMC_POSIF_INPUT_ACTIVE_LEVEL_t for this e
 175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_INPUT_ACTIVE_LEVEL
 177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_ACTIVE_LEVEL_HIGH  = 0U, /**< Input - Active High */
 179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_INPUT_ACTIVE_LEVEL_LOW         /**< Input - Active Low */
 180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_INPUT_ACTIVE_LEVEL_t;
 181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF input debounce filter configuration.POSIF inputs are connected to low pass filter 
 184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * this enum is used to configure low pass filters cut off frequency.
 185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Use type @ref XMC_POSIF_FILTER_t for this enum.
 186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines the low pass filter configuration(LPC) bitfield of \a PCONF register.
 187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_FILTER
 189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_DISABLED     = 0U, /**< No filtering */
 191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_1_CLOCK_CYCLE    , /**< Filter of 1 Clock Cycle */
 192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_2_CLOCK_CYCLE    , /**< Filter of 2 Clock Cycles */
 193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_4_CLOCK_CYCLE    , /**< Filter of 4 Clock Cycles */
 194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_8_CLOCK_CYCLE    , /**< Filter of 8 Clock Cycles */
 195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_16_CLOCK_CYCLE   , /**< Filter of 16 Clock Cycles */
 196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_32_CLOCK_CYCLE   , /**< Filter of 32 Clock Cycles */
 197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_FILTER_64_CLOCK_CYCLE     /**< Filter of 64 Clock Cycles */
 198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_FILTER_t;
 199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF events.Use type @ref XMC_POSIF_IRQ_EVENT_t for this enum.
 202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines available event sources.It is used to configure which event to be used for
 203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * interrupt generation using \a PFLGE register. [ PFLG,SPFLG,RPFLG]
 204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_IRQ_EVENT
 206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_CHE                  = 0U, /**< Hall Mode : Correct Hall Event */
 208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_WHE                  = 1U, /**< Hall Mode : Wrong Hall Event */
 209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_HALL_INPUT           = 2U, /**< Hall Mode : Hall Input update */
 210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_MCP_SHADOW_TRANSFER  = 4U, /**< Hall Mode + MCM Mode : MC Pattern shadow tran
 211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_INDX                 = 8U, /**< Quadrature Mode : Index event detection */
 212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_ERR                  = 9U, /**< Quadrature Mode : Quadrature Phase Error */
 213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_CNT                  = 10U, /**< Quadrature Mode : Quadrature Clock event */
 214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_DIR                  = 11U, /**< Quadrature Mode : Quadrature Direction chang
 215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_IRQ_EVENT_PCLK                 = 12U  /**< Quadrature Mode : Quadrature period clock ge
 216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_IRQ_EVENT_t;
 217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF service request lines.Use type @ref XMC_POSIF_SR_ID_t for this enum.
 220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to connect POSIF event to required service request line.
 221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * in \a PFLGE register for interrupt generation.
 222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_SR_ID
 224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_SR_ID_0 = 0U, /**< SR-0 */
 226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_SR_ID_1      /**< SR-1 */
 227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_SR_ID_t;
 228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines position decoder mode selection.Use type @ref XMC_POSIF_QD_MODE_t for this enum.
 231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines configuration for the operation of the quadrature decoder mode.
 232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to configure \a QDC register.
 233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_QD_MODE
 235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_MODE_QUADRATURE       = 0U, /**< Standard Quadrature Mode */
 237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_MODE_DIRECTION_COUNT       /**< Direction Count Mode */
 238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_MODE_t;
 239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines motor rotation direction.Use type @ref XMC_POSIF_QD_DIR_t for this enum.
 242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The member defines the direction in quadrature mode.
 243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_QD_DIR
 245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_DIR_COUNTERCLOCKWISE  = 0U, /**< Counter Clockwise */
 247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_DIR_CLOCKWISE              /**< Clockwise */
 248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_DIR_t;
 249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines frequency of index signal generation.Use type @ref XMC_POSIF_QD_INDEX_GENERATION_t for t
 252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Member represents available configuration for index marker generation using \a ICM  bit field in
 253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_QD_INDEX_GENERATION
 255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_INDEX_GENERATION_NEVER  = 0U, /**< Never generate the index marker signal */
 257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_INDEX_GENERATION_ONCE      , /**< Generate only once after the first revolution */
 258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_INDEX_GENERATION_ALWAYS      /**< Index marker generated upon every revolution */
 259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_INDEX_GENERATION_t;
 260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines trigger edge in hall sensor mode.Use type @ref XMC_POSIF_HSC_TRIGGER_EDGE_t for this en
 263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  It can be used to configure \a PCONF register's \a SPES and \a MSES bit fields.
 264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef enum XMC_POSIF_HSC_TRIGGER_EDGE
 266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_HSC_TRIGGER_EDGE_RISING  = 0U, /**< Rising edge */
 268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_HSC_TRIGGER_EDGE_FALLING      /**< Falling edge */
 269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_HSC_TRIGGER_EDGE_t;
 270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * DATA STRUCTURES
 273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /*Anonymous structure/union guard start*/
 276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if defined(__CC_ARM)
 277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma push
 278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma anon_unions
 279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #elif defined(__TASKING__)
 280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma warning 586
 281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF peripheral register structure.Use type @ref XMC_POSIF_t for this data structure.
 286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef POSIF_GLOBAL_TypeDef XMC_POSIF_t;
 288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines POSIF quadrature decoder initialization data structure.
 291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Use type @ref XMC_POSIF_QD_CONFIG_t for this data structure.
 292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  It used to configure Quadrature mode using \a QDC register.
 293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_QD_CONFIG
 295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   XMC_POSIF_QD_MODE_t mode;      /**< Operational Mode of the quadrature encoder and decoder */
 297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t phase_a: 1;       /**< Phase-A active level configuration */
 302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t phase_b: 1;       /**< Phase-B active level configuration */
 303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t phase_leader: 1;  /**< Which of the two phase signals[Phase A or Phase B] leads the 
 304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 1;
 305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t index: 2;        /**< Index signal generation control. Use @ref XMC_POSIF_QD_INDEX_G
 306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 26;
 307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t qdc;
 309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_QD_CONFIG_t;
 311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF hall sensor control initialization data structure.
 314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Use type @ref XMC_POSIF_HSC_CONFIG_t for this data structure.
 315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to initialize hall sensor mode configuration using \a PCONF register.
 316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_HSC_CONFIG
 318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 4;
 324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t disable_idle_signal: 1;   /**< Should idle signal be disabled upon wrong hall event?
 325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 11;
 326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t sampling_trigger: 1;      /**< Of HSDA and HSDB, which one is to be used to trigger 
 327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t sampling_trigger_edge: 1; /**< Which edge of the sampling trigger signal is to be co
 328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 	  uint32_t : 6;
 329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t external_error_port: 2;    /**< Of the 4 external error ports, which one is to be co
 330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t external_error_enable: 1;  /**< Should external errors lead to Wrong Hall event? */
 331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t external_error_level: 1;   /**< What should be the active level of external error si
 332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t: 4;
 333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t hall_config;
 335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_HSC_CONFIG_t;
 337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 339:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Defines POSIF multi-channel mode initialization data structure.
 340:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Use type @ref XMC_POSIF_MCM_CONFIG_t for this data structure.
 341:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It used to initialize multi channel mode configuration using \a PCONF register.
 342:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 343:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_MCM_CONFIG
 344:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 345:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 346:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 347:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 348:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 349:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 5;
 350:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t pattern_sw_update: 1; /**< should multi channel pattern updated by SW ? */
 351:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 12;
 352:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 	  uint32_t pattern_update_trigger: 3; /**< Of the 8 update triggers, which one is to be considered
 353:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t pattern_trigger_edge: 1;  /**< Which edge of the pattern update trigger is to be con
 354:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t pwm_sync: 2;         /**< Of the 4 pwm sync inputs, which one is to be considered? *
 355:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t : 8;
 356:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 357:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t mcm_config;
 358:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 359:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }XMC_POSIF_MCM_CONFIG_t;
 360:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 361:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 362:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Defines POSIF module initialization data structure.
 363:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Use type @ref XMC_POSIF_CONFIG_t for this data structure.
 364:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  It is used to initialize POSIF module using \a PCONF register.
 365:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 366:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** typedef struct XMC_POSIF_CONFIG
 367:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 368:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   union
 369:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   {
 370:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     struct
 371:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     {
 372:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t mode: 2;    /**< POSIF Operational mode. Use @ref XMC_POSIF_MODE_t to configure */
 373:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t :6;
 374:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t input0: 2; /**< Choice of input for Input-1 */
 375:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t input1: 2; /**< Choice of input for Input-2 */
 376:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t input2: 2; /**< Choice of input for Input-3 */
 377:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t :14;
 378:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t filter: 3; /**< Input filter configuration */
 379:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****       uint32_t: 1;
 380:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     };
 381:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     uint32_t pconf;
 382:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   };
 383:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** } XMC_POSIF_CONFIG_t;
 384:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 385:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /*Anonymous structure/union guard end*/
 386:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #if defined(__CC_ARM)
 387:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma pop
 388:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #elif defined(__TASKING__)
 389:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   #pragma warning restore
 390:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 391:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 392:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**************************************************************************************************
 393:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * API Prototypes
 394:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  **************************************************************************************************
 395:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #ifdef __cplusplus
 396:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** extern "C" {
 397:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** #endif
 398:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 399:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 400:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module of type @ref XMC_POSIF_t
 401:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 402:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 403:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 404:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * De-asserts the POSIF module from reset and enables the clock.\n
 405:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PRCLR0 register's \a POSIF0RS or \a POSIF1RS bit field depends upon \a peripheral.
 406:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * If running on other than XMC45 device then it will ungate the peripheral clock.
 407:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 408:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 409:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is the first API which application must invoke to configure POSIF.
 410:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is internally called by XMC_POSIF_Init().
 411:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 412:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 413:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Disable(),XMC_POSIF_Init() \n\n\n
 414:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 415:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_Enable(XMC_POSIF_t *const peripheral);
 416:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 417:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 418:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module of type @ref XMC_POSIF_t
 419:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 420:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 421:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 422:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Asserts the POSIF module into reset and disables the clock.\n
 423:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * If running on other than XMC45 device then in addition it will gate the peripheral clock.
 424:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PRCLR0 register's \a POSIF0RS or \a POSIF1RS bitfield depends upon \a peripheral.
 425:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 426:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 427:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Enable()\n\n\n
 428:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 429:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_Disable(XMC_POSIF_t *const peripheral);
 430:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 431:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 432:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module of type @ref XMC_POSIF_t
 433:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to POSIF configuration data(operation mode,input selection and filter conf
 434:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 435:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 436:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 437:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initialize POSIF module with \a config.\n
 438:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures POSIF global registers.This is the first API which application must invoke to configu
 439:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It sets up parameters common to all the POSIF modes - hall sensor,quadrature decoder and multi-c
 440:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with mode of operation,input selection and filter configuration.
 441:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 442:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 443:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_Init(),XMC_POSIF_QD_Init(),XMC_POSIF_MCM_Init() \n\n\n
 444:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** */
 445:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_CONFIG_t * const config);
 446:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 447:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 448:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 449:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to hall sensor control initialization data of type @ref XMC_POSIF_HSC_CONF
 450:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_STATUS_t  Returns @ref XMC_POSIF_STATUS_OK if configured in Hall Sensor Mode
 451:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *                             else return @ref XMC_POSIF_STATUS_ERROR.
 452:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 453:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 454:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes hall sensor control mode.\n
 455:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with which POSIF input trigger to be used for
 456:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * sampling hall pattern.Configures \a PCONF register for idle signal generation for wrong hall eve
 457:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 458:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 459:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is necessary to have called XMC_POSIF_Init first with Hall sensor mode before invocation of t
 460:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 461:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 462:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init() \n\n\n
 463:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 464:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** XMC_POSIF_STATUS_t XMC_POSIF_HSC_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_HSC_CONFIG_t *
 465:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 466:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 467:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 468:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to quadrature decoder initialization data
 469:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_STATUS_t Returns quadrature mode initialization status of type @ref XMC_POSIF_
 470:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 471:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 472:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes quadrature decoder control mode.\n
 473:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with quadrature mode using @ref XMC_POSIF_QD_MODE_t data structure.
 474:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes \a QDC register with quadrature mode configuration using @ref XMC_POSIF_QD_CONFIG_t 
 475:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 476:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 477:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is necessary to have called XMC_POSIF_Init first with Quadrature decoder mode before invocati
 478:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 479:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 480:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init() \n\n\n
 481:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 482:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** XMC_POSIF_STATUS_t XMC_POSIF_QD_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_QD_CONFIG_t * c
 483:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 484:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 485:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 486:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param config Pointer to quadrature decoder initialization data
 487:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_STATUS_t Returns multi channel pattern initialization status of type @ref XMC_
 488:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 489:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 490:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Initializes multi channel mode in Hall mode, standalone multi-channel mode and quadrature with m
 491:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register with multi channel mode using @ref XMC_POSIF_MCM_CONFIG_t data stru
 492:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 493:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 494:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It is necessary to call XMC_POSIF_Init first before invocation of this API.
 495:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * For XMC_POSIF_MODE_HALL_SENSOR, it is necessary to have called XMC_POSIF_HSC_Init before invocat
 496:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * For XMC_POSIF_MODE_MCM_QD, it is necessary to have called XMC_POSIF_QD_Init before invocation of
 497:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 498:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 499:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init(),XMC_POSIF_HSC_Init(),XMC_POSIF_QD_Init() \n\n\n
 500:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 501:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** XMC_POSIF_STATUS_t XMC_POSIF_MCM_Init(XMC_POSIF_t *const peripheral, const XMC_POSIF_MCM_CONFIG_t *
 502:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 503:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 504:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 505:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param mode POSIF operating mode of type @ref XMC_POSIF_MODE_t
 506:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 507:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 508:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 509:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures POSIF module for \a mode.\n
 510:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register's a\ FSEL bitfield with \a mode.
 511:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Refer @ref XMC_POSIF_MODE_t for available options.
 512:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 513:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 514:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * POSIF module should be in stopped state while changing the operating mode.
 515:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 516:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 517:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Stop() \n\n\n
 518:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 519:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_SetMode(XMC_POSIF_t *const peripheral, const XMC_POSIF_MODE_t mode)
 520:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 521:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PCONF = ((peripheral->PCONF & ~(uint32_t)(POSIF_PCONF_FSEL_Msk)) |
 522:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****                      (((uint32_t)mode << POSIF_PCONF_FSEL_Pos) & (uint32_t)POSIF_PCONF_FSEL_Msk));
 523:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 524:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 525:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 526:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 527:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param input0 Choice of input for input 0 [0-3]
 528:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param input1 Choice of input for input 1 [0-3]
 529:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param input2 Choice of input for input 2 [0-3]
 530:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 531:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 532:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 533:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures which input to be connected to POSIF module. \n
 534:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PCONF register's INSEL0,INSEL1,INSEL2 bit fields with source for the input connect
 535:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \a input1, \a input2 respectively.
 536:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 537:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 538:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures which input is used for the Phase X or Hall input X function depending upon the modul
 539:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * set for Quadrature Decoder or Hall Sensor Mode.
 540:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 541:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 542:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Init() \n\n\n
 543:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 544:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** void XMC_POSIF_SelectInputSource(XMC_POSIF_t *const peripheral, const XMC_POSIF_INPUT_PORT_t input0
 545:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****     const XMC_POSIF_INPUT_PORT_t input1, const XMC_POSIF_INPUT_PORT_t input2);
 546:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 547:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 548:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 549:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 550:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 551:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 552:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 553:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Starts POSIF \a peripheral functional state machine.\n
 554:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Starts POSIF state machine for \a peripheral.Configures \a PRUNS register's \a SRB bit field wit
 555:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 556:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 557:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Global properties of POSIF along with mode specific properties should have been initialized befo
 558:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * FSM.
 559:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 560:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 561:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Stop(),XMC_POSIF_IsRunning() \n\n\n
 562:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 563:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_Start(XMC_POSIF_t *const peripheral)
 564:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 472              	 .loc 3 564 0
 473              	 .cfi_startproc
 474              	 
 475              	 
 476              	 
 477 0000 80B4     	 push {r7}
 478              	.LCFI54:
 479              	 .cfi_def_cfa_offset 4
 480              	 .cfi_offset 7,-4
 481 0002 83B0     	 sub sp,sp,#12
 482              	.LCFI55:
 483              	 .cfi_def_cfa_offset 16
 484 0004 00AF     	 add r7,sp,#0
 485              	.LCFI56:
 486              	 .cfi_def_cfa_register 7
 487 0006 7860     	 str r0,[r7,#4]
 565:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PRUNS = (uint32_t)POSIF_PRUNS_SRB_Msk;
 488              	 .loc 3 565 0
 489 0008 7B68     	 ldr r3,[r7,#4]
 490 000a 0122     	 movs r2,#1
 491 000c 9A60     	 str r2,[r3,#8]
 566:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 492              	 .loc 3 566 0
 493 000e 0C37     	 adds r7,r7,#12
 494              	.LCFI57:
 495              	 .cfi_def_cfa_offset 4
 496 0010 BD46     	 mov sp,r7
 497              	.LCFI58:
 498              	 .cfi_def_cfa_register 13
 499              	 
 500 0012 5DF8047B 	 ldr r7,[sp],#4
 501              	.LCFI59:
 502              	 .cfi_restore 7
 503              	 .cfi_def_cfa_offset 0
 504 0016 7047     	 bx lr
 505              	 .cfi_endproc
 506              	.LFE254:
 508              	 .section .text.XMC_POSIF_Stop,"ax",%progbits
 509              	 .align 2
 510              	 .thumb
 511              	 .thumb_func
 513              	XMC_POSIF_Stop:
 514              	.LFB255:
 567:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 568:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 569:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 570:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 571:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 572:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 573:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Stops POSIF \a peripheral functional state machine.\n
 574:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Stop POSIF functional state machine and clears current internal status of the \a peripheral.
 575:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a PRUNC register's \a CRB bit field with 1.
 576:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 577:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 578:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Start(),XMC_POSIF_IsRunning() \n\n\n
 579:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 580:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_Stop(XMC_POSIF_t *const peripheral)
 581:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 515              	 .loc 3 581 0
 516              	 .cfi_startproc
 517              	 
 518              	 
 519              	 
 520 0000 80B4     	 push {r7}
 521              	.LCFI60:
 522              	 .cfi_def_cfa_offset 4
 523              	 .cfi_offset 7,-4
 524 0002 83B0     	 sub sp,sp,#12
 525              	.LCFI61:
 526              	 .cfi_def_cfa_offset 16
 527 0004 00AF     	 add r7,sp,#0
 528              	.LCFI62:
 529              	 .cfi_def_cfa_register 7
 530 0006 7860     	 str r0,[r7,#4]
 582:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PRUNC = (uint32_t)(POSIF_PRUNC_CRB_Msk | POSIF_PRUNC_CSM_Msk);
 531              	 .loc 3 582 0
 532 0008 7B68     	 ldr r3,[r7,#4]
 533 000a 0322     	 movs r2,#3
 534 000c DA60     	 str r2,[r3,#12]
 583:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 535              	 .loc 3 583 0
 536 000e 0C37     	 adds r7,r7,#12
 537              	.LCFI63:
 538              	 .cfi_def_cfa_offset 4
 539 0010 BD46     	 mov sp,r7
 540              	.LCFI64:
 541              	 .cfi_def_cfa_register 13
 542              	 
 543 0012 5DF8047B 	 ldr r7,[sp],#4
 544              	.LCFI65:
 545              	 .cfi_restore 7
 546              	 .cfi_def_cfa_offset 0
 547 0016 7047     	 bx lr
 548              	 .cfi_endproc
 549              	.LFE255:
 551              	 .section .text.XMC_POSIF_HSC_GetExpectedPattern,"ax",%progbits
 552              	 .align 2
 553              	 .thumb
 554              	 .thumb_func
 556              	XMC_POSIF_HSC_GetExpectedPattern:
 557              	.LFB259:
 584:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 585:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 586:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 587:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval bool Returns false: IDLE, true:RUNNING
 588:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 589:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 590:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns the status of POSIF module - Running or IDLE.\n
 591:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves the status from \a PRUN register's \a SRB bit.
 592:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 593:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 594:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_Start(),XMC_POSIF_Stop() \n\n\n
 595:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 596:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE bool XMC_POSIF_IsRunning(XMC_POSIF_t *const peripheral)
 597:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 598:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((bool)peripheral->PRUN);
 599:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 600:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 601:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 602:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 603:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint8_t Returns last sampled hall sensor pattern. Range : [0-7]
 604:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 605:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 606:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns last sampled hall sensor pattern of \a peripheral.\n
 607:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves the last sampled hall sensor pattern from \a PDBG register's \a HSP bit field of \a pe
 608:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the last sampled hall sensor pattern by invoking 
 609:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 610:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 611:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the hall sensor mode of operation.
 612:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 613:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 614:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_GetCurrentPattern(),XMC_POSIF_HSC_GetExpectedPattern() \n\n\n
 615:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 616:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint8_t XMC_POSIF_HSC_GetLastSampledPattern(XMC_POSIF_t *const peripheral)
 617:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 618:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint8_t)((peripheral->PDBG) & POSIF_PDBG_HSP_Msk) >> POSIF_PDBG_HSP_Pos);
 619:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 620:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 621:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 622:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 623:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint8_t Returns current hall sensor pattern. Range : [0-7]
 624:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 625:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 626:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns current sampled hall sensor pattern of \a peripheral.\n
 627:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves the current hall sensor pattern from \a HALP register's \a HCP bit field of \a periphe
 628:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the current hall sensor pattern by invoking this 
 629:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 630:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 631:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the hall sensor mode of operation.
 632:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 633:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 634:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_GetLastSampledPattern(),XMC_POSIF_HSC_GetExpectedPattern() \n\n\n
 635:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 636:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint8_t XMC_POSIF_HSC_GetCurrentPattern(XMC_POSIF_t *const peripheral)
 637:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 638:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint8_t)((peripheral->HALP & POSIF_HALP_HCP_Msk) >> POSIF_HALP_HCP_Pos));
 639:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 640:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 641:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 642:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 643:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint8_t Returns expected hall sensor pattern. Range : [0-7]
 644:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 645:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 646:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns expected hall sensor pattern of \a peripheral.\n
 647:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves the expected hall sensor pattern from \a HALP register's \a HEP bit field of \a periph
 648:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the expected hall sensor pattern by invoking this
 649:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 650:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 651:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the hall sensor mode of operation.
 652:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 653:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 654:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_GetLastSampledPattern(),XMC_POSIF_HSC_GetCurrentPattern() \n\n\n
 655:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 656:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint8_t XMC_POSIF_HSC_GetExpectedPattern(XMC_POSIF_t *const peripheral)
 657:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 558              	 .loc 3 657 0
 559              	 .cfi_startproc
 560              	 
 561              	 
 562              	 
 563 0000 80B4     	 push {r7}
 564              	.LCFI66:
 565              	 .cfi_def_cfa_offset 4
 566              	 .cfi_offset 7,-4
 567 0002 83B0     	 sub sp,sp,#12
 568              	.LCFI67:
 569              	 .cfi_def_cfa_offset 16
 570 0004 00AF     	 add r7,sp,#0
 571              	.LCFI68:
 572              	 .cfi_def_cfa_register 7
 573 0006 7860     	 str r0,[r7,#4]
 658:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint8_t)((peripheral->HALP & POSIF_HALP_HEP_Msk) >> POSIF_HALP_HEP_Pos));
 574              	 .loc 3 658 0
 575 0008 7B68     	 ldr r3,[r7,#4]
 576 000a 1B6B     	 ldr r3,[r3,#48]
 577 000c 03F03803 	 and r3,r3,#56
 578 0010 DB08     	 lsrs r3,r3,#3
 579 0012 DBB2     	 uxtb r3,r3
 659:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 580              	 .loc 3 659 0
 581 0014 1846     	 mov r0,r3
 582 0016 0C37     	 adds r7,r7,#12
 583              	.LCFI69:
 584              	 .cfi_def_cfa_offset 4
 585 0018 BD46     	 mov sp,r7
 586              	.LCFI70:
 587              	 .cfi_def_cfa_register 13
 588              	 
 589 001a 5DF8047B 	 ldr r7,[sp],#4
 590              	.LCFI71:
 591              	 .cfi_restore 7
 592              	 .cfi_def_cfa_offset 0
 593 001e 7047     	 bx lr
 594              	 .cfi_endproc
 595              	.LFE259:
 597              	 .section .text.XMC_POSIF_HSC_SetHallPatterns,"ax",%progbits
 598              	 .align 2
 599              	 .thumb
 600              	 .thumb_func
 602              	XMC_POSIF_HSC_SetHallPatterns:
 603              	.LFB262:
 660:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 661:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 662:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 663:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param pattern The hall sensor pattern to be programmed into current pattern [0-7]
 664:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 665:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 666:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 667:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures current Hall sensor \a pattern of \a peripheral.\n
 668:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures the Current hall sensor pattern on \a HALPS shadow register's \a HCPS bit field of \a
 669:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can set at any point in time program the current hall sensor pattern by invoking th
 670:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 671:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 672:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the hall sensor mode of operation. It may be noted that the pattern i
 673:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * written to the shadow register. Transfer from the shadow register is based on a hardware transfe
 674:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * or software trigger through API @ref XMC_POSIF_HSC_UpdateHallPattern().
 675:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 676:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 677:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_GetCurrentPattern(),XMC_POSIF_HSC_SetExpectedPattern() \n\n\n
 678:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 679:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_HSC_SetCurrentPattern(XMC_POSIF_t *const peripheral, const uint8_t p
 680:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 681:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->HALPS = ((peripheral->HALPS & ~(uint32_t)(POSIF_HALPS_HCPS_Msk)) |
 682:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****                  (((uint32_t)pattern << POSIF_HALPS_HCPS_Pos) & (uint32_t)POSIF_HALPS_HCPS_Msk));
 683:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 684:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 685:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 686:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 687:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param pattern The hall sensor pattern to be programmed into expected pattern [0-7]
 688:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 689:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 690:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 691:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures the expected hall sensor \a pattern of \a peripheral.\n
 692:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can set at any point in time program the hall sensor expected patterns by invoking 
 693:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures the expected hall sensor pattern on \a HALPS shadow register's \a HEPS bit field of \
 694:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 695:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 696:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the hall sensor mode of operation.It may be noted that the pattern is
 697:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * written to the shadow register. Transfer from the shadow register is based on a hardware transfe
 698:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * or software trigger through API @ref XMC_POSIF_HSC_UpdateHallPattern().
 699:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 700:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 701:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_GetExpectedPattern() \n\n\n
 702:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 703:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_HSC_SetExpectedPattern(XMC_POSIF_t *const peripheral, const uint8_t 
 704:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 705:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->HALPS = ((peripheral->HALPS & ~(uint32_t)(POSIF_HALPS_HEPS_Msk)) |
 706:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****                  (((uint32_t)pattern << POSIF_HALPS_HEPS_Pos) & (uint32_t)POSIF_HALPS_HEPS_Msk));
 707:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 708:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 709:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 710:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 711:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param pattern_mask The hall sensor pattern mask [0-63] Format of mask: (expected_pattern << 3) 
 712:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 713:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 714:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 715:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures current and expected hall pattern of \a peripheral. \n
 716:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a HALPS register with the Current and Expected hall sensor patterns in one operation
 717:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time program the current and expected hall sensor pattern by in
 718:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 719:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 720:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the hall sensor mode of operation.  It may be noted that the pattern 
 721:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * written to the shadow register. Transfer from the shadow register is based on a hardware transfe
 722:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * or software trigger through API @ref XMC_POSIF_HSC_UpdateHallPattern().
 723:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 724:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 725:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_SetExpectedPattern(),XMC_POSIF_HSC_SetCurrentPattern() \n\n\n
 726:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 727:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_HSC_SetHallPatterns(XMC_POSIF_t *const peripheral, const uint8_t pat
 728:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 604              	 .loc 3 728 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608              	 
 609 0000 80B4     	 push {r7}
 610              	.LCFI72:
 611              	 .cfi_def_cfa_offset 4
 612              	 .cfi_offset 7,-4
 613 0002 83B0     	 sub sp,sp,#12
 614              	.LCFI73:
 615              	 .cfi_def_cfa_offset 16
 616 0004 00AF     	 add r7,sp,#0
 617              	.LCFI74:
 618              	 .cfi_def_cfa_register 7
 619 0006 7860     	 str r0,[r7,#4]
 620 0008 0B46     	 mov r3,r1
 621 000a FB70     	 strb r3,[r7,#3]
 729:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->HALPS = (uint32_t)(pattern_mask & (POSIF_HALPS_HCPS_Msk | POSIF_HALPS_HEPS_Msk));
 622              	 .loc 3 729 0
 623 000c FB78     	 ldrb r3,[r7,#3]
 624 000e 03F03F02 	 and r2,r3,#63
 625 0012 7B68     	 ldr r3,[r7,#4]
 626 0014 5A63     	 str r2,[r3,#52]
 730:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 627              	 .loc 3 730 0
 628 0016 0C37     	 adds r7,r7,#12
 629              	.LCFI75:
 630              	 .cfi_def_cfa_offset 4
 631 0018 BD46     	 mov sp,r7
 632              	.LCFI76:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 001a 5DF8047B 	 ldr r7,[sp],#4
 636              	.LCFI77:
 637              	 .cfi_restore 7
 638              	 .cfi_def_cfa_offset 0
 639 001e 7047     	 bx lr
 640              	 .cfi_endproc
 641              	.LFE262:
 643              	 .section .text.XMC_POSIF_HSC_UpdateHallPattern,"ax",%progbits
 644              	 .align 2
 645              	 .thumb
 646              	 .thumb_func
 648              	XMC_POSIF_HSC_UpdateHallPattern:
 649              	.LFB263:
 731:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 732:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 733:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 734:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 735:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 736:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 737:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Manually performs shadow transfer of hall sensor patterns.\n
 738:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a MCMS register's \a STHR bit field with 1.
 739:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Setting this bit to 1 leads to an immediate update of the fields \a HALP.HCP(Current pattern) an
 740:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 741:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 742:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The transfer of hall sensor pattern shadow registers content to the sensor pattern register happ
 743:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * conditions. A hardware trigger starts the shadow transfer. Alternatively, the shadow transfer ca
 744:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * by application software by means of invocation of this API.
 745:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 746:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 747:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_HSC_SetHallPatterns() \n\n\n
 748:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 749:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_HSC_UpdateHallPattern(XMC_POSIF_t *const peripheral)
 750:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 650              	 .loc 3 750 0
 651              	 .cfi_startproc
 652              	 
 653              	 
 654              	 
 655 0000 80B4     	 push {r7}
 656              	.LCFI78:
 657              	 .cfi_def_cfa_offset 4
 658              	 .cfi_offset 7,-4
 659 0002 83B0     	 sub sp,sp,#12
 660              	.LCFI79:
 661              	 .cfi_def_cfa_offset 16
 662 0004 00AF     	 add r7,sp,#0
 663              	.LCFI80:
 664              	 .cfi_def_cfa_register 7
 665 0006 7860     	 str r0,[r7,#4]
 751:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->MCMS = (uint32_t)POSIF_MCMS_STHR_Msk;
 666              	 .loc 3 751 0
 667 0008 7B68     	 ldr r3,[r7,#4]
 668 000a 0222     	 movs r2,#2
 669 000c 9A64     	 str r2,[r3,#72]
 752:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 670              	 .loc 3 752 0
 671 000e 0C37     	 adds r7,r7,#12
 672              	.LCFI81:
 673              	 .cfi_def_cfa_offset 4
 674 0010 BD46     	 mov sp,r7
 675              	.LCFI82:
 676              	 .cfi_def_cfa_register 13
 677              	 
 678 0012 5DF8047B 	 ldr r7,[sp],#4
 679              	.LCFI83:
 680              	 .cfi_restore 7
 681              	 .cfi_def_cfa_offset 0
 682 0016 7047     	 bx lr
 683              	 .cfi_endproc
 684              	.LFE263:
 686              	 .section .text.XMC_POSIF_EnableEvent,"ax",%progbits
 687              	 .align 2
 688              	 .thumb
 689              	 .thumb_func
 691              	XMC_POSIF_EnableEvent:
 692              	.LFB273:
 753:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 754:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 755:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 756:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param pattern The 16b multi-channel pattern [0-65535]
 757:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 758:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 759:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 760:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Configures \a MCSM register with Multi-Channel Pattern.\n
 761:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This 16b multi-channel pattern which controls the 16 outputs of all slices of a CCU8 module.
 762:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Transfer from the shadow register is based on a hardware transfer trigger
 763:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * or software trigger through API @ref XMC_POSIF_MCM_UpdateMultiChannelPattern().
 764:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Every time that a Multi-Channel pattern transfer is triggered, this value is passed into the fie
 765:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 766:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 767:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It may be noted that the pattern is merely written to the shadow register.
 768:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 769:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 770:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_MCM_GetMultiChannelPattern() \n\n\n
 771:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 772:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_MCM_SetMultiChannelPattern(XMC_POSIF_t *const peripheral, const uint
 773:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 774:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->MCSM = pattern;
 775:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 776:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 777:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 778:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 779:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint16_t Returns configured multi channel pattern
 780:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 781:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 782:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns configured multi channel pattern of \a peripheral. \n
 783:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves the Multi-Channel Pattern from \a MCM register's MCMP bit field of \a peripheral
 784:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the multi-channel pattern by invoking this API.
 785:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 786:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 787:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_MCM_SetMultiChannelPattern() \n\n\n
 788:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 789:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint16_t XMC_POSIF_MCM_GetMultiChannelPattern(XMC_POSIF_t *const peripheral)
 790:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 791:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint16_t)(peripheral->MCM & (uint32_t)POSIF_MCM_MCMP_Msk));
 792:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 793:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 794:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 795:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 796:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint16_t Returns configured multi channel pattern present in shadow transfer register
 797:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 798:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 799:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns configured multi channel pattern in shadow register of \a peripheral. \n
 800:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves the Multi-Channel Pattern from \a MCSM shadow register's \a MCMPS bit field.
 801:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the multi-channel pattern by invoking this API.
 802:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 803:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * It can be used when MCM is enabled.
 804:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 805:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 806:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_MCM_SetMultiChannelPattern() \n\n\n
 807:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 808:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint16_t XMC_POSIF_MCM_GetShadowMultiChannelPattern(XMC_POSIF_t *const peripheral)
 809:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 810:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint16_t)(peripheral->MCSM & (uint32_t)POSIF_MCSM_MCMPS_Msk));
 811:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 812:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 813:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 814:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 815:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 816:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 817:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 818:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Performs shadow transfer of the Multi-Channel Pattern register by configuring \a MCMS register's
 819:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 820:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 821:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Transfer multi-channel pattern shadow registers content to the actual pattern register of \a per
 822:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The transfer of multi-channel pattern shadow registers content to the actual pattern register ha
 823:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * conditions. A hardware trigger starts the shadow transfer. Alternatively, the shadow transfer ca
 824:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * by application software by means of invocation of this API.
 825:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 826:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 827:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_MCM_SetMultiChannelPattern() \n\n\n
 828:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 829:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_MCM_UpdateMultiChannelPattern(XMC_POSIF_t *const peripheral)
 830:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 831:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->MCMS |= (uint32_t)POSIF_MCMS_STMR_Msk;
 832:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 833:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 834:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 835:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 836:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 837:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 838:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 839:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Enables update of the Multi-Channel Pattern by software in standalone multi-channel mode.\n
 840:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Enabling update of multi-channel pattern happens under two conditions. A hardware trigger enable
 841:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Alternatively, this can be enabled by software by means of invocation of this API.
 842:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 843:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 844:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * The update is not done immediately due to the fact that the trigger that synchronizes the update
 845:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * still needed.
 846:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 847:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 848:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_MCM_UpdateMultiChannelPattern() \n\n\n
 849:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 850:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_MCM_EnableMultiChannelPatternUpdate(XMC_POSIF_t *const peripheral)
 851:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 852:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->MCMS |= (uint32_t)POSIF_MCMS_MNPS_Msk;
 853:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 854:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 855:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 856:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 857:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval XMC_POSIF_QD_DIR_t Return direction of revolution of the motor of type @ref XMC_POSIF_QD
 858:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 859:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 860:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns the direction of revolution of the motor.\n
 861:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves direction from \a QDC register's \a DVAL bit field in quadrature mode.
 862:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the direction of rotation by invoking this API.
 863:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 864:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 865:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the quadrature decoder mode of operation.
 866:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 867:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 868:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE XMC_POSIF_QD_DIR_t XMC_POSIF_QD_GetDirection(XMC_POSIF_t *const peripheral)
 869:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 870:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((XMC_POSIF_QD_DIR_t)((peripheral->QDC & POSIF_QDC_DVAL_Msk) >> POSIF_QDC_DVAL_Pos));
 871:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 872:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 873:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 874:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 875:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint8_t Returns current state of quadrature decoder[Phase B,Phase A]
 876:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 877:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 878:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns the current state of phase signals in quadrature decoder mode of \a peripheral. \n
 879:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves current state of the quadrature decoder from \a PDBG register's \a QCSV bit fields.
 880:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the current state of Phase A and Phase B signals
 881:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * by invoking this API.
 882:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 883:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 884:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the quadrature decoder mode of operation.
 885:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 886:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 887:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  XMC_POSIF_QD_GetPreviousState() \n\n\n
 888:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 889:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint8_t XMC_POSIF_QD_GetCurrentState(XMC_POSIF_t *const peripheral)
 890:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 891:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint8_t)((peripheral->PDBG & POSIF_PDBG_QCSV_Msk) >> POSIF_PDBG_QCSV_Pos));
 892:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 893:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 894:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 895:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 896:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint8_t Returns previous state of quadrature decoder[Phase B,Phase A]
 897:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 898:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 899:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns the previous state of phase signals in quadrature decoder mode of \a peripheral. \n
 900:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves previous state of the quadrature decoder from \a PDBG register's \a QPSV bit fields.
 901:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the previous state of Phase A and Phase B signals
 902:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * by invoking this API.
 903:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 904:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 905:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the quadrature decoder mode of operation.
 906:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 907:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 908:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_QD_GetCurrentState() \n\n\n
 909:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 910:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint8_t XMC_POSIF_QD_GetPreviousState(XMC_POSIF_t *const peripheral)
 911:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 912:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint8_t)((peripheral->PDBG & POSIF_PDBG_QPSV_Msk) >> POSIF_PDBG_QPSV_Pos));
 913:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 914:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 915:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 916:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 917:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval uint8_t Returns the index value.[1 - New rotation started, 0 - In-between]
 918:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 919:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 920:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Returns the current index value in quadrature decoder mode of \a peripheral. \n
 921:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Retrieves current index signal value of the quadrature decoder from \a PDBG register's \a IVAL b
 922:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Applications can at any point in time retrieve the current index signal value of the quadrature 
 923:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * invoking this API.
 924:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 925:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Note</b><br>
 926:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * This is applicable only to the quadrature decoder mode of operation.
 927:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 928:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 929:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE uint8_t XMC_POSIF_QD_GetCurrentIndexValue(XMC_POSIF_t *const peripheral)
 930:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 931:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   return ((uint8_t)((peripheral->PDBG & POSIF_PDBG_IVAL_Msk) >> POSIF_PDBG_IVAL_Pos));
 932:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 933:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 934:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 935:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 936:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param event Event to be enabled
 937:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 938:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 939:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 940:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Enables \a event generation of \a peripheral. \n
 941:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Enables an IRQ generation capable \a event by configuring 1 to \a PFLGE register's \a event bit 
 942:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 943:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 944:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_DisableEvent() \n\n\n
 945:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 946:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_EnableEvent(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT
 947:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 693              	 .loc 3 947 0
 694              	 .cfi_startproc
 695              	 
 696              	 
 697              	 
 698 0000 80B4     	 push {r7}
 699              	.LCFI84:
 700              	 .cfi_def_cfa_offset 4
 701              	 .cfi_offset 7,-4
 702 0002 83B0     	 sub sp,sp,#12
 703              	.LCFI85:
 704              	 .cfi_def_cfa_offset 16
 705 0004 00AF     	 add r7,sp,#0
 706              	.LCFI86:
 707              	 .cfi_def_cfa_register 7
 708 0006 7860     	 str r0,[r7,#4]
 709 0008 0B46     	 mov r3,r1
 710 000a FB70     	 strb r3,[r7,#3]
 948:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PFLGE |= (uint32_t)1 << (uint8_t)event;
 711              	 .loc 3 948 0
 712 000c 7B68     	 ldr r3,[r7,#4]
 713 000e 5A6F     	 ldr r2,[r3,#116]
 714 0010 FB78     	 ldrb r3,[r7,#3]
 715 0012 0121     	 movs r1,#1
 716 0014 01FA03F3 	 lsl r3,r1,r3
 717 0018 1A43     	 orrs r2,r2,r3
 718 001a 7B68     	 ldr r3,[r7,#4]
 719 001c 5A67     	 str r2,[r3,#116]
 949:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 720              	 .loc 3 949 0
 721 001e 0C37     	 adds r7,r7,#12
 722              	.LCFI87:
 723              	 .cfi_def_cfa_offset 4
 724 0020 BD46     	 mov sp,r7
 725              	.LCFI88:
 726              	 .cfi_def_cfa_register 13
 727              	 
 728 0022 5DF8047B 	 ldr r7,[sp],#4
 729              	.LCFI89:
 730              	 .cfi_restore 7
 731              	 .cfi_def_cfa_offset 0
 732 0026 7047     	 bx lr
 733              	 .cfi_endproc
 734              	.LFE273:
 736              	 .section .text.XMC_POSIF_ClearEvent,"ax",%progbits
 737              	 .align 2
 738              	 .thumb
 739              	 .thumb_func
 741              	XMC_POSIF_ClearEvent:
 742              	.LFB276:
 950:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 951:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 952:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @brief Disables an IRQ generation capable event
 953:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 954:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param event Event to be disabled
 955:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 956:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 957:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 958:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Disables \a event generation of \a peripheral.\n
 959:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Disables an IRQ generation capable \a event by configuring 0 to \a PFLGE register's \a event bit
 960:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 961:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  \par<b>Related APIs:</b><BR>
 962:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  XMC_POSIF_EnableEvent() \n\n\n
 963:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 964:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_DisableEvent(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVEN
 965:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 966:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->PFLGE &= ~((uint32_t)1 << (uint8_t)event);
 967:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 968:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 969:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 970:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 971:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param event Event to be manually asserted
 972:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 973:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 974:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 975:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Manually generates \a event of \a peripheral. \n
 976:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  Manually asserts an IRQ generation capable event by configuring 1 to \a SPFLG register's \a eve
 977:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 978:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  \par<b>Related APIs:</b><BR>
 979:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *  XMC_POSIF_ClearEvent() \n\n\n
 980:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 981:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_SetEvent(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_t 
 982:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 983:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->SPFLG = (uint32_t)1 << (uint8_t)event;
 984:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 985:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** 
 986:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** /**
 987:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param peripheral Pointer to an instance of POSIF module
 988:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @param event Event to be acknowledged
 989:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * @retval None
 990:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 991:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Description</b><br>
 992:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Clears \a event by acknowledgment of \a peripheral. \n
 993:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * Acknowledges an IRQ event by configuring 1 to \a RPFLG register's \a event bit field.
 994:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  *
 995:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * \par<b>Related APIs:</b><BR>
 996:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  * XMC_POSIF_SetEvent() \n\n\n
 997:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****  */
 998:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** __STATIC_INLINE void XMC_POSIF_ClearEvent(XMC_POSIF_t *const peripheral, const XMC_POSIF_IRQ_EVENT_
 999:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** {
 743              	 .loc 3 999 0
 744              	 .cfi_startproc
 745              	 
 746              	 
 747              	 
 748 0000 80B4     	 push {r7}
 749              	.LCFI90:
 750              	 .cfi_def_cfa_offset 4
 751              	 .cfi_offset 7,-4
 752 0002 83B0     	 sub sp,sp,#12
 753              	.LCFI91:
 754              	 .cfi_def_cfa_offset 16
 755 0004 00AF     	 add r7,sp,#0
 756              	.LCFI92:
 757              	 .cfi_def_cfa_register 7
 758 0006 7860     	 str r0,[r7,#4]
 759 0008 0B46     	 mov r3,r1
 760 000a FB70     	 strb r3,[r7,#3]
1000:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h ****   peripheral->RPFLG = (uint32_t)1 << (uint8_t)event;
 761              	 .loc 3 1000 0
 762 000c FB78     	 ldrb r3,[r7,#3]
 763 000e 0122     	 movs r2,#1
 764 0010 9A40     	 lsls r2,r2,r3
 765 0012 7B68     	 ldr r3,[r7,#4]
 766 0014 DA67     	 str r2,[r3,#124]
1001:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_posif.h **** }
 767              	 .loc 3 1001 0
 768 0016 0C37     	 adds r7,r7,#12
 769              	.LCFI93:
 770              	 .cfi_def_cfa_offset 4
 771 0018 BD46     	 mov sp,r7
 772              	.LCFI94:
 773              	 .cfi_def_cfa_register 13
 774              	 
 775 001a 5DF8047B 	 ldr r7,[sp],#4
 776              	.LCFI95:
 777              	 .cfi_restore 7
 778              	 .cfi_def_cfa_offset 0
 779 001e 7047     	 bx lr
 780              	 .cfi_endproc
 781              	.LFE276:
 783              	 .section .text.XMC_GPIO_ToggleOutput,"ax",%progbits
 784              	 .align 2
 785              	 .thumb
 786              	 .thumb_func
 788              	XMC_GPIO_ToggleOutput:
 789              	.LFB282:
 790              	 .file 4 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc_gpio.h"
   1:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   *************************************************************************************************
   7:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.1.8 - XMC Peripheral Driver Library 
   8:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.                        
  11:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                             
  12:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * following conditions are met:   
  14:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  15:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer.                        
  17:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  18:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  21:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * products derived from this software without specific prior written permission.                  
  23:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  24:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *                                                                              
  32:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  35:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  37:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  38:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  39:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  40:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  41:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  42:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *      
  43:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  44:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  45:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  46:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  47:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  49:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
  50:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  51:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  52:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
  53:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  54:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  55:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  56:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
  57:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  58:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
  59:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  60:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  61:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  62:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  63:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  66:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  67:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  68:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  69:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  70:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics. 
  71:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  72:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  73:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  74:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  75:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  76:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  77:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  78:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  79:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  80:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  81:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * 
  82:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  83:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  84:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  85:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  86:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  87:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  88:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  89:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  90:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  91:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  92:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  
  93:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  94:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
  95:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  96:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
  97:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
  98:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
  99:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 100:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 101:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 											
 102:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 103:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 104:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 105:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 106:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 107:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 108:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))                    
 109:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****                                             
 110:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 111:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 112:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 113:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 114:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 116:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 117:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 118:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 119:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 120:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 121:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 122:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 123:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 124:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 125:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 126:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 127:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 128:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 129:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 130:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 131:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 132:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 133:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 134:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 135:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 136:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 137:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 138:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  #if UC_FAMILY == XMC1
 139:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 140:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 141:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 142:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 143:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 144:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 145:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 146:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 147:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 148:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 149:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 150:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 151:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 152:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 153:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 154:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 156:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 157:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 158:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 159:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 160:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 161:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 162:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 163:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 164:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 165:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 166:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 167:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 168:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 169:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 170:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 171:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 172:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 174:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 175:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 176:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 177:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 178:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 179:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 180:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 181:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 183:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 184:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  
 185:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 186:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  
 187:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 188:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 189:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 190:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 191:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 192:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 193:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 194:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 195:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 196:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 197:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 198:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 199:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 201:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 202:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 203:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 204:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 205:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 206:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 207:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 208:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 209:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 210:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 211:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 212:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 213:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 214:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 215:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 216:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 217:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 218:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 219:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 220:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 221:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 222:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 223:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 224:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 225:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 226:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 227:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 228:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 229:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 230:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 231:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 232:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 233:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   
 234:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 235:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** }
 236:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 237:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 238:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 239:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 240:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 241:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 242:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 243:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 244:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 245:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 246:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 248:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 249:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 250:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 251:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 252:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 253:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 254:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 255:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 256:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 257:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 258:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 259:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 260:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
 261:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** }
 262:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 263:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 264:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 265:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 266:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 267:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 268:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 269:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 271:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 272:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 274:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 275:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 276:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 277:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 278:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 279:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 280:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 281:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 282:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 283:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 284:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 285:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 286:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
 287:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** }
 288:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 289:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 290:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 291:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 292:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  port pin number.
 293:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 294:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 295:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 296:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 297:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Configures port pin output to Toggle. It configures hardware registers Pn_OMR.
 298:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 299:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 300:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 301:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 302:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 303:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode(). Regis
 304:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * and does not contain any flip-flop. A read action delivers the value of 0.
 305:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 306:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 307:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 308:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 309:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 791              	 .loc 4 309 0
 792              	 .cfi_startproc
 793              	 
 794              	 
 795              	 
 796 0000 80B4     	 push {r7}
 797              	.LCFI96:
 798              	 .cfi_def_cfa_offset 4
 799              	 .cfi_offset 7,-4
 800 0002 83B0     	 sub sp,sp,#12
 801              	.LCFI97:
 802              	 .cfi_def_cfa_offset 16
 803 0004 00AF     	 add r7,sp,#0
 804              	.LCFI98:
 805              	 .cfi_def_cfa_register 7
 806 0006 7860     	 str r0,[r7,#4]
 807 0008 0B46     	 mov r3,r1
 808 000a FB70     	 strb r3,[r7,#3]
 310:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 311:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 312:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10001U << pin;
 809              	 .loc 4 312 0
 810 000c FB78     	 ldrb r3,[r7,#3]
 811 000e 4FF00112 	 mov r2,#65537
 812 0012 9A40     	 lsls r2,r2,r3
 813 0014 7B68     	 ldr r3,[r7,#4]
 814 0016 5A60     	 str r2,[r3,#4]
 313:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** }
 815              	 .loc 4 313 0
 816 0018 0C37     	 adds r7,r7,#12
 817              	.LCFI99:
 818              	 .cfi_def_cfa_offset 4
 819 001a BD46     	 mov sp,r7
 820              	.LCFI100:
 821              	 .cfi_def_cfa_register 13
 822              	 
 823 001c 5DF8047B 	 ldr r7,[sp],#4
 824              	.LCFI101:
 825              	 .cfi_restore 7
 826              	 .cfi_def_cfa_offset 0
 827 0020 7047     	 bx lr
 828              	 .cfi_endproc
 829              	.LFE282:
 831 0022 00BF     	 .section .text.XMC_GPIO_GetInput,"ax",%progbits
 832              	 .align 2
 833              	 .thumb
 834              	 .thumb_func
 836              	XMC_GPIO_GetInput:
 837              	.LFB283:
 314:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 315:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 316:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 317:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param port constant pointer pointing to GPIO port, to access hardware register Pn_IN.
 318:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param pin  Port pin number.
 319:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 320:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return uint32_t pin logic level status.
 321:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 322:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 323:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Reads the Pn_IN register and returns the current logical value at the GPIO pin.
 324:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 325:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 326:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * None
 327:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 328:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 329:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 330:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 331:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 332:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 333:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 334:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** {
 838              	 .loc 4 334 0
 839              	 .cfi_startproc
 840              	 
 841              	 
 842              	 
 843 0000 80B4     	 push {r7}
 844              	.LCFI102:
 845              	 .cfi_def_cfa_offset 4
 846              	 .cfi_offset 7,-4
 847 0002 83B0     	 sub sp,sp,#12
 848              	.LCFI103:
 849              	 .cfi_def_cfa_offset 16
 850 0004 00AF     	 add r7,sp,#0
 851              	.LCFI104:
 852              	 .cfi_def_cfa_register 7
 853 0006 7860     	 str r0,[r7,#4]
 854 0008 0B46     	 mov r3,r1
 855 000a FB70     	 strb r3,[r7,#3]
 335:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));
 336:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** 
 337:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h ****   return (((port->IN) >> pin) & 0x1U);
 856              	 .loc 4 337 0
 857 000c 7B68     	 ldr r3,[r7,#4]
 858 000e 5A6A     	 ldr r2,[r3,#36]
 859 0010 FB78     	 ldrb r3,[r7,#3]
 860 0012 22FA03F3 	 lsr r3,r2,r3
 861 0016 03F00103 	 and r3,r3,#1
 338:E:/DT/workspace/MotorXP/Libraries/XMCLib/inc\xmc_gpio.h **** }
 862              	 .loc 4 338 0
 863 001a 1846     	 mov r0,r3
 864 001c 0C37     	 adds r7,r7,#12
 865              	.LCFI105:
 866              	 .cfi_def_cfa_offset 4
 867 001e BD46     	 mov sp,r7
 868              	.LCFI106:
 869              	 .cfi_def_cfa_register 13
 870              	 
 871 0020 5DF8047B 	 ldr r7,[sp],#4
 872              	.LCFI107:
 873              	 .cfi_restore 7
 874              	 .cfi_def_cfa_offset 0
 875 0024 7047     	 bx lr
 876              	 .cfi_endproc
 877              	.LFE283:
 879              	 .global hall
 880 0026 00BF     	 .section .bss.hall,"aw",%nobits
 881              	 .align 2
 884              	hall:
 885 0000 00000000 	 .space 12
 885      00000000 
 885      00000000 
 886              	 .section .bss.motorDirection,"aw",%nobits
 889              	motorDirection:
 890 0000 00       	 .space 1
 891              	 .global hall_pattern_ccw
 892              	 .section .data.hall_pattern_ccw,"aw",%progbits
 893              	 .align 2
 896              	hall_pattern_ccw:
 897 0000 00       	 .byte 0
 898 0001 19       	 .byte 25
 899 0002 32       	 .byte 50
 900 0003 13       	 .byte 19
 901 0004 2C       	 .byte 44
 902 0005 0D       	 .byte 13
 903 0006 26       	 .byte 38
 904              	 .global hall_pattern_cw
 905 0007 00       	 .section .data.hall_pattern_cw,"aw",%progbits
 906              	 .align 2
 909              	hall_pattern_cw:
 910 0000 00       	 .byte 0
 911 0001 29       	 .byte 41
 912 0002 1A       	 .byte 26
 913 0003 0B       	 .byte 11
 914 0004 34       	 .byte 52
 915 0005 25       	 .byte 37
 916 0006 16       	 .byte 22
 917              	 .global hall_delay_config
 918 0007 00       	 .section .data.hall_delay_config,"aw",%progbits
 919              	 .align 2
 922              	hall_delay_config:
 923 0000 02       	 .byte 2
 924 0001 00       	 .byte 0
 925 0002 00       	 .byte 0
 926 0003 00       	 .byte 0
 927 0004 00       	 .byte 0
 928 0005 00       	 .byte 0
 929 0006 0000     	 .space 2
 930              	 .global hall_capture_config
 931              	 .section .data.hall_capture_config,"aw",%progbits
 932              	 .align 2
 935              	hall_capture_config:
 936 0000 60       	 .byte 96
 937 0001 10       	 .byte 16
 938 0002 00       	 .byte 0
 939 0003 00       	 .space 1
 940 0004 05       	 .byte 5
 941 0005 00       	 .byte 0
 942 0006 0000     	 .space 2
 943              	 .global hall_start_event0_config
 944              	 .section .data.hall_start_event0_config,"aw",%progbits
 945              	 .align 2
 948              	hall_start_event0_config:
 949 0000 04       	 .byte 4
 950 0001 01       	 .byte 1
 951 0002 00       	 .byte 0
 952 0003 00       	 .byte 0
 953              	 .global hall_capture_event0_config
 954              	 .section .data.hall_capture_event0_config,"aw",%progbits
 955              	 .align 2
 958              	hall_capture_event0_config:
 959 0000 05       	 .byte 5
 960 0001 01       	 .byte 1
 961 0002 00       	 .byte 0
 962 0003 00       	 .byte 0
 963              	 .global POSIF_HALL_config
 964              	 .section .data.POSIF_HALL_config,"aw",%progbits
 965              	 .align 2
 968              	POSIF_HALL_config:
 969 0000 00       	 .byte 0
 970 0001 15       	 .byte 21
 971 0002 00       	 .space 1
 972 0003 00       	 .byte 0
 973              	 .global POSIF_HSC_config
 974              	 .section .data.POSIF_HSC_config,"aw",%progbits
 975              	 .align 2
 978              	POSIF_HSC_config:
 979 0000 10       	 .byte 16
 980 0001 00       	 .space 1
 981 0002 00       	 .byte 0
 982 0003 00       	 .space 1
 983              	 .global HALL_POSIF_0_Hall_PadConfig
 984              	 .section .data.HALL_POSIF_0_Hall_PadConfig,"aw",%progbits
 985              	 .align 2
 988              	HALL_POSIF_0_Hall_PadConfig:
 989 0000 08       	 .byte 8
 990 0001 000000   	 .space 3
 991 0004 00000100 	 .word 65536
 992 0008 00000000 	 .space 4
 993              	 .section .text.Sensor_Hall_InitPattern,"ax",%progbits
 994              	 .align 2
 995              	 .global Sensor_Hall_InitPattern
 996              	 .thumb
 997              	 .thumb_func
 999              	Sensor_Hall_InitPattern:
 1000              	.LFB288:
 1001              	 .file 5 "../sensor/Sensor_Hall.c"
   1:../sensor/Sensor_Hall.c **** /*
   2:../sensor/Sensor_Hall.c ****  * Sensor_Hall.c
   3:../sensor/Sensor_Hall.c ****  *
   4:../sensor/Sensor_Hall.c ****  *  Created on: Nov 9, 2016
   5:../sensor/Sensor_Hall.c ****  *      Author: Andreas Lackner
   6:../sensor/Sensor_Hall.c ****  */
   7:../sensor/Sensor_Hall.c **** 
   8:../sensor/Sensor_Hall.c **** /*********************************************************************************
   9:../sensor/Sensor_Hall.c ****  * Includes
  10:../sensor/Sensor_Hall.c ****  *********************************************************************************/
  11:../sensor/Sensor_Hall.c **** 
  12:../sensor/Sensor_Hall.c **** #include "Sensor_Hall.h"
  13:../sensor/Sensor_Hall.c **** 
  14:../sensor/Sensor_Hall.c **** #include <xmc_ccu4.h>
  15:../sensor/Sensor_Hall.c **** #include <xmc_ccu8.h>
  16:../sensor/Sensor_Hall.c **** #include <xmc_scu.h>
  17:../sensor/Sensor_Hall.c **** #include <xmc4_scu.h>
  18:../sensor/Sensor_Hall.c **** #include <xmc_posif.h>
  19:../sensor/Sensor_Hall.c **** #include <xmc_gpio.h>
  20:../sensor/Sensor_Hall.c **** 
  21:../sensor/Sensor_Hall.c **** /*********************************************************************************
  22:../sensor/Sensor_Hall.c ****  * Local macros
  23:../sensor/Sensor_Hall.c ****  *********************************************************************************/
  24:../sensor/Sensor_Hall.c **** 
  25:../sensor/Sensor_Hall.c **** #define POSIF_PTR		POSIF0
  26:../sensor/Sensor_Hall.c **** #define HALL_CCU		CCU40
  27:../sensor/Sensor_Hall.c **** #define HALL_CCU_NUM	(0U)
  28:../sensor/Sensor_Hall.c **** 
  29:../sensor/Sensor_Hall.c **** #define DELAY_SLICE_PTR 		CCU40_CC40
  30:../sensor/Sensor_Hall.c **** #define DELAY_SLICE_NUMBER 		(0U)
  31:../sensor/Sensor_Hall.c **** #define CAPTURE_SLICE_PTR 		CCU40_CC41
  32:../sensor/Sensor_Hall.c **** #define CAPTURE_SLICE_NUMBER	(1U)
  33:../sensor/Sensor_Hall.c **** 
  34:../sensor/Sensor_Hall.c **** #define HALL_PORT_A	P14_7
  35:../sensor/Sensor_Hall.c **** #define HALL_PORT_B	P14_6
  36:../sensor/Sensor_Hall.c **** #define HALL_PORT_C	P14_5
  37:../sensor/Sensor_Hall.c **** 
  38:../sensor/Sensor_Hall.c **** #define HALL_EVENT_IO P5_9
  39:../sensor/Sensor_Hall.c **** 
  40:../sensor/Sensor_Hall.c **** #define GEN_HALL_PATTERN(EHP, CHP) (((uint32_t)EHP << 3) | (uint32_t)CHP)
  41:../sensor/Sensor_Hall.c **** #define HALL_EMPTY 0
  42:../sensor/Sensor_Hall.c **** 
  43:../sensor/Sensor_Hall.c **** /*********************************************************************************
  44:../sensor/Sensor_Hall.c ****  * Local data
  45:../sensor/Sensor_Hall.c ****  *********************************************************************************/
  46:../sensor/Sensor_Hall.c **** 
  47:../sensor/Sensor_Hall.c **** uint32_t hall[3] = { 0,0,0 };
  48:../sensor/Sensor_Hall.c **** static MotorDirection_t motorDirection = ClockWise;
  49:../sensor/Sensor_Hall.c **** extern uint8_t *currentPattern;
  50:../sensor/Sensor_Hall.c **** 
  51:../sensor/Sensor_Hall.c **** /* Hall pattern of the motor. This depends on the type and make of the motor selected */
  52:../sensor/Sensor_Hall.c **** uint8_t hall_pattern_ccw[] =
  53:../sensor/Sensor_Hall.c **** {
  54:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(HALL_EMPTY,HALL_EMPTY),
  55:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(3,1),
  56:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(6,2),
  57:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(2,3),
  58:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(5,4),
  59:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(1,5),
  60:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(4,6)
  61:../sensor/Sensor_Hall.c **** };
  62:../sensor/Sensor_Hall.c **** 
  63:../sensor/Sensor_Hall.c **** uint8_t hall_pattern_cw[] =
  64:../sensor/Sensor_Hall.c **** {
  65:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(HALL_EMPTY,HALL_EMPTY),
  66:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(5,1),
  67:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(3,2),
  68:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(1,3),
  69:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(6,4),
  70:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(4,5),
  71:../sensor/Sensor_Hall.c **** 	(uint8_t)GEN_HALL_PATTERN(2,6)
  72:../sensor/Sensor_Hall.c **** };
  73:../sensor/Sensor_Hall.c **** 
  74:../sensor/Sensor_Hall.c **** //XMC Capture/Compare Unit 4 (CCU4) Configuration for Capture:
  75:../sensor/Sensor_Hall.c **** XMC_CCU4_SLICE_COMPARE_CONFIG_t hall_delay_config =
  76:../sensor/Sensor_Hall.c **** {
  77:../sensor/Sensor_Hall.c **** 	.timer_mode = (uint32_t)XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA,
  78:../sensor/Sensor_Hall.c **** 	.monoshot = (uint32_t)true,
  79:../sensor/Sensor_Hall.c **** 	.shadow_xfer_clear = (uint32_t)0,
  80:../sensor/Sensor_Hall.c **** 	.dither_timer_period = (uint32_t)0,
  81:../sensor/Sensor_Hall.c **** 	.dither_duty_cycle = (uint32_t)0,
  82:../sensor/Sensor_Hall.c **** 	.prescaler_mode = (uint32_t)XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL,
  83:../sensor/Sensor_Hall.c **** 	.mcm_enable = (uint32_t)0,
  84:../sensor/Sensor_Hall.c **** 	.prescaler_initval = (uint32_t)0, /* in this case, prescaler = 2^10 */
  85:../sensor/Sensor_Hall.c **** 	.float_limit = (uint32_t)0,
  86:../sensor/Sensor_Hall.c **** 	.dither_limit = (uint32_t)0,
  87:../sensor/Sensor_Hall.c **** 	.passive_level = (uint32_t)XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW,
  88:../sensor/Sensor_Hall.c **** 	.timer_concatenation = (uint32_t)0
  89:../sensor/Sensor_Hall.c **** };
  90:../sensor/Sensor_Hall.c **** 
  91:../sensor/Sensor_Hall.c **** /* Capture Slice configuration */
  92:../sensor/Sensor_Hall.c **** XMC_CCU4_SLICE_CAPTURE_CONFIG_t hall_capture_config =
  93:../sensor/Sensor_Hall.c **** {
  94:../sensor/Sensor_Hall.c **** 	.fifo_enable = false,
  95:../sensor/Sensor_Hall.c **** 	.timer_clear_mode = XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS,
  96:../sensor/Sensor_Hall.c **** 	.same_event = false,
  97:../sensor/Sensor_Hall.c **** 	.ignore_full_flag = true,
  98:../sensor/Sensor_Hall.c **** 	.prescaler_mode = XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL,
  99:../sensor/Sensor_Hall.c **** 	.prescaler_initval = (uint32_t)5, /* in this case, prescaler = 2^5 */
 100:../sensor/Sensor_Hall.c **** 	.float_limit = (uint32_t)0,
 101:../sensor/Sensor_Hall.c **** 	.timer_concatenation = (uint32_t)0
 102:../sensor/Sensor_Hall.c **** };
 103:../sensor/Sensor_Hall.c **** 
 104:../sensor/Sensor_Hall.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t hall_start_event0_config = //off time capture
 105:../sensor/Sensor_Hall.c **** {
 106:../sensor/Sensor_Hall.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_E, //CAPTURE on POSIF0.OUT0
 107:../sensor/Sensor_Hall.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 108:../sensor/Sensor_Hall.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 109:../sensor/Sensor_Hall.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 110:../sensor/Sensor_Hall.c **** };
 111:../sensor/Sensor_Hall.c **** 
 112:../sensor/Sensor_Hall.c **** XMC_CCU4_SLICE_EVENT_CONFIG_t hall_capture_event0_config = //off time capture
 113:../sensor/Sensor_Hall.c **** {
 114:../sensor/Sensor_Hall.c **** 	.mapped_input = XMC_CCU4_SLICE_INPUT_F, //CAPTURE on POSIF0.OUT1
 115:../sensor/Sensor_Hall.c **** 	.edge = XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE,
 116:../sensor/Sensor_Hall.c **** 	.level = XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH,
 117:../sensor/Sensor_Hall.c **** 	.duration = XMC_CCU4_SLICE_EVENT_FILTER_DISABLED
 118:../sensor/Sensor_Hall.c **** };
 119:../sensor/Sensor_Hall.c **** 
 120:../sensor/Sensor_Hall.c **** XMC_POSIF_CONFIG_t POSIF_HALL_config =
 121:../sensor/Sensor_Hall.c **** {
 122:../sensor/Sensor_Hall.c **** 	.mode = XMC_POSIF_MODE_HALL_SENSOR, /**< POSIF Operational mode */
 123:../sensor/Sensor_Hall.c **** 	.input0 = XMC_POSIF_INPUT_PORT_B, /**< Choice of input for Input-1 */
 124:../sensor/Sensor_Hall.c **** 	.input1 = XMC_POSIF_INPUT_PORT_B, /**< Choice of input for Input-2 */
 125:../sensor/Sensor_Hall.c **** 	.input2 = XMC_POSIF_INPUT_PORT_B, /**< Choice of input for Input-3 */
 126:../sensor/Sensor_Hall.c **** 	.filter = XMC_POSIF_FILTER_DISABLED /**< Input filter configuration */
 127:../sensor/Sensor_Hall.c **** };
 128:../sensor/Sensor_Hall.c **** 
 129:../sensor/Sensor_Hall.c **** XMC_POSIF_HSC_CONFIG_t POSIF_HSC_config =
 130:../sensor/Sensor_Hall.c **** {
 131:../sensor/Sensor_Hall.c **** 	.disable_idle_signal = 1,
 132:../sensor/Sensor_Hall.c **** 	.sampling_trigger = 0, //HSDA
 133:../sensor/Sensor_Hall.c **** 	.sampling_trigger_edge = 0 //Rising edge
 134:../sensor/Sensor_Hall.c **** };
 135:../sensor/Sensor_Hall.c **** 
 136:../sensor/Sensor_Hall.c **** XMC_GPIO_CONFIG_t HALL_POSIF_0_Hall_PadConfig =
 137:../sensor/Sensor_Hall.c **** {
 138:../sensor/Sensor_Hall.c **** 	.mode = (XMC_GPIO_MODE_t)XMC_GPIO_MODE_INPUT_PULL_DOWN,
 139:../sensor/Sensor_Hall.c **** 	.output_level = (XMC_GPIO_OUTPUT_LEVEL_t)XMC_GPIO_OUTPUT_LEVEL_LOW,
 140:../sensor/Sensor_Hall.c **** };
 141:../sensor/Sensor_Hall.c **** 
 142:../sensor/Sensor_Hall.c **** /*********************************************************************************
 143:../sensor/Sensor_Hall.c ****  * Local function prototypes
 144:../sensor/Sensor_Hall.c ****  *********************************************************************************/
 145:../sensor/Sensor_Hall.c **** MotorDirection_t Sensor_Get_Direction(void);
 146:../sensor/Sensor_Hall.c **** 
 147:../sensor/Sensor_Hall.c **** void Sensor_Hall_InitPattern(void);
 148:../sensor/Sensor_Hall.c **** 
 149:../sensor/Sensor_Hall.c **** void Sensor_Hall_SetActivePattern(uint8_t hallposition);
 150:../sensor/Sensor_Hall.c **** 
 151:../sensor/Sensor_Hall.c **** uint8_t Sensor_Hall_GetPattern(uint8_t currentPattern);
 152:../sensor/Sensor_Hall.c **** 
 153:../sensor/Sensor_Hall.c **** /*********************************************************************************
 154:../sensor/Sensor_Hall.c ****  * Local function definitions
 155:../sensor/Sensor_Hall.c ****  *********************************************************************************/
 156:../sensor/Sensor_Hall.c **** 
 157:../sensor/Sensor_Hall.c **** void Sensor_Hall_InitPattern()
 158:../sensor/Sensor_Hall.c **** {
 1002              	 .loc 5 158 0
 1003              	 .cfi_startproc
 1004              	 
 1005              	 
 1006 0000 80B5     	 push {r7,lr}
 1007              	.LCFI108:
 1008              	 .cfi_def_cfa_offset 8
 1009              	 .cfi_offset 7,-8
 1010              	 .cfi_offset 14,-4
 1011 0002 82B0     	 sub sp,sp,#8
 1012              	.LCFI109:
 1013              	 .cfi_def_cfa_offset 16
 1014 0004 00AF     	 add r7,sp,#0
 1015              	.LCFI110:
 1016              	 .cfi_def_cfa_register 7
 159:../sensor/Sensor_Hall.c **** 	uint8_t hallposition;
 160:../sensor/Sensor_Hall.c **** 
 161:../sensor/Sensor_Hall.c **** 	hall[0] = XMC_GPIO_GetInput(HALL_PORT_A);
 1017              	 .loc 5 161 0
 1018 0006 1C48     	 ldr r0,.L28
 1019 0008 0721     	 movs r1,#7
 1020 000a FFF7FEFF 	 bl XMC_GPIO_GetInput
 1021 000e 0246     	 mov r2,r0
 1022 0010 1A4B     	 ldr r3,.L28+4
 1023 0012 1A60     	 str r2,[r3]
 162:../sensor/Sensor_Hall.c **** 	hall[1] = XMC_GPIO_GetInput(HALL_PORT_B);
 1024              	 .loc 5 162 0
 1025 0014 1848     	 ldr r0,.L28
 1026 0016 0621     	 movs r1,#6
 1027 0018 FFF7FEFF 	 bl XMC_GPIO_GetInput
 1028 001c 0246     	 mov r2,r0
 1029 001e 174B     	 ldr r3,.L28+4
 1030 0020 5A60     	 str r2,[r3,#4]
 163:../sensor/Sensor_Hall.c **** 	hall[2] = XMC_GPIO_GetInput(HALL_PORT_C);
 1031              	 .loc 5 163 0
 1032 0022 1548     	 ldr r0,.L28
 1033 0024 0521     	 movs r1,#5
 1034 0026 FFF7FEFF 	 bl XMC_GPIO_GetInput
 1035 002a 0246     	 mov r2,r0
 1036 002c 134B     	 ldr r3,.L28+4
 1037 002e 9A60     	 str r2,[r3,#8]
 164:../sensor/Sensor_Hall.c **** 
 165:../sensor/Sensor_Hall.c **** 	hallposition = (uint32_t)((hall[0] | (hall[1] << 1) | (hall[2] << 2)));
 1038              	 .loc 5 165 0
 1039 0030 124B     	 ldr r3,.L28+4
 1040 0032 1B68     	 ldr r3,[r3]
 1041 0034 DAB2     	 uxtb r2,r3
 1042 0036 114B     	 ldr r3,.L28+4
 1043 0038 5B68     	 ldr r3,[r3,#4]
 1044 003a DBB2     	 uxtb r3,r3
 1045 003c 5B00     	 lsls r3,r3,#1
 1046 003e DBB2     	 uxtb r3,r3
 1047 0040 1343     	 orrs r3,r3,r2
 1048 0042 DAB2     	 uxtb r2,r3
 1049 0044 0D4B     	 ldr r3,.L28+4
 1050 0046 9B68     	 ldr r3,[r3,#8]
 1051 0048 DBB2     	 uxtb r3,r3
 1052 004a 9B00     	 lsls r3,r3,#2
 1053 004c DBB2     	 uxtb r3,r3
 1054 004e 1343     	 orrs r3,r3,r2
 1055 0050 FB71     	 strb r3,[r7,#7]
 166:../sensor/Sensor_Hall.c **** 
 167:../sensor/Sensor_Hall.c **** 	//Get the current hall pattern and push it to the registers
 168:../sensor/Sensor_Hall.c **** 	XMC_POSIF_HSC_SetHallPatterns(POSIF_PTR, Sensor_Hall_GetPattern(hallposition));
 1056              	 .loc 5 168 0
 1057 0052 FB79     	 ldrb r3,[r7,#7]
 1058 0054 1846     	 mov r0,r3
 1059 0056 FFF7FEFF 	 bl Sensor_Hall_GetPattern
 1060 005a 0346     	 mov r3,r0
 1061 005c 0848     	 ldr r0,.L28+8
 1062 005e 1946     	 mov r1,r3
 1063 0060 FFF7FEFF 	 bl XMC_POSIF_HSC_SetHallPatterns
 169:../sensor/Sensor_Hall.c **** 	XMC_POSIF_HSC_UpdateHallPattern(POSIF_PTR);
 1064              	 .loc 5 169 0
 1065 0064 0648     	 ldr r0,.L28+8
 1066 0066 FFF7FEFF 	 bl XMC_POSIF_HSC_UpdateHallPattern
 170:../sensor/Sensor_Hall.c **** 
 171:../sensor/Sensor_Hall.c **** 	//Save the active hall position for queries
 172:../sensor/Sensor_Hall.c **** 	Sensor_Hall_SetActivePattern(hallposition);
 1067              	 .loc 5 172 0
 1068 006a FB79     	 ldrb r3,[r7,#7]
 1069 006c 1846     	 mov r0,r3
 1070 006e FFF7FEFF 	 bl Sensor_Hall_SetActivePattern
 173:../sensor/Sensor_Hall.c **** }
 1071              	 .loc 5 173 0
 1072 0072 0837     	 adds r7,r7,#8
 1073              	.LCFI111:
 1074              	 .cfi_def_cfa_offset 8
 1075 0074 BD46     	 mov sp,r7
 1076              	.LCFI112:
 1077              	 .cfi_def_cfa_register 13
 1078              	 
 1079 0076 80BD     	 pop {r7,pc}
 1080              	.L29:
 1081              	 .align 2
 1082              	.L28:
 1083 0078 008E0248 	 .word 1208126976
 1084 007c 00000000 	 .word hall
 1085 0080 00800240 	 .word 1073905664
 1086              	 .cfi_endproc
 1087              	.LFE288:
 1089              	 .section .text.Sensor_Hall_SetActivePattern,"ax",%progbits
 1090              	 .align 2
 1091              	 .global Sensor_Hall_SetActivePattern
 1092              	 .thumb
 1093              	 .thumb_func
 1095              	Sensor_Hall_SetActivePattern:
 1096              	.LFB289:
 174:../sensor/Sensor_Hall.c **** 
 175:../sensor/Sensor_Hall.c **** void Sensor_Hall_SetActivePattern(uint8_t hallposition)
 176:../sensor/Sensor_Hall.c **** {
 1097              	 .loc 5 176 0
 1098              	 .cfi_startproc
 1099              	 
 1100              	 
 1101              	 
 1102 0000 80B4     	 push {r7}
 1103              	.LCFI113:
 1104              	 .cfi_def_cfa_offset 4
 1105              	 .cfi_offset 7,-4
 1106 0002 83B0     	 sub sp,sp,#12
 1107              	.LCFI114:
 1108              	 .cfi_def_cfa_offset 16
 1109 0004 00AF     	 add r7,sp,#0
 1110              	.LCFI115:
 1111              	 .cfi_def_cfa_register 7
 1112 0006 0346     	 mov r3,r0
 1113 0008 FB71     	 strb r3,[r7,#7]
 177:../sensor/Sensor_Hall.c **** 	ActiveHallPattern.h1 = hallposition & 0x1;
 1114              	 .loc 5 177 0
 1115 000a FB79     	 ldrb r3,[r7,#7]
 1116 000c 03F00103 	 and r3,r3,#1
 1117 0010 DAB2     	 uxtb r2,r3
 1118 0012 0A4B     	 ldr r3,.L31
 1119 0014 1A70     	 strb r2,[r3]
 178:../sensor/Sensor_Hall.c **** 	ActiveHallPattern.h2 = (hallposition & 0x2) >> 1;
 1120              	 .loc 5 178 0
 1121 0016 FB79     	 ldrb r3,[r7,#7]
 1122 0018 03F00203 	 and r3,r3,#2
 1123 001c 5B10     	 asrs r3,r3,#1
 1124 001e DAB2     	 uxtb r2,r3
 1125 0020 064B     	 ldr r3,.L31
 1126 0022 5A70     	 strb r2,[r3,#1]
 179:../sensor/Sensor_Hall.c **** 	ActiveHallPattern.h3 = (hallposition & 0x4) >> 2;
 1127              	 .loc 5 179 0
 1128 0024 FB79     	 ldrb r3,[r7,#7]
 1129 0026 03F00403 	 and r3,r3,#4
 1130 002a 9B10     	 asrs r3,r3,#2
 1131 002c DAB2     	 uxtb r2,r3
 1132 002e 034B     	 ldr r3,.L31
 1133 0030 9A70     	 strb r2,[r3,#2]
 180:../sensor/Sensor_Hall.c **** }
 1134              	 .loc 5 180 0
 1135 0032 0C37     	 adds r7,r7,#12
 1136              	.LCFI116:
 1137              	 .cfi_def_cfa_offset 4
 1138 0034 BD46     	 mov sp,r7
 1139              	.LCFI117:
 1140              	 .cfi_def_cfa_register 13
 1141              	 
 1142 0036 5DF8047B 	 ldr r7,[sp],#4
 1143              	.LCFI118:
 1144              	 .cfi_restore 7
 1145              	 .cfi_def_cfa_offset 0
 1146 003a 7047     	 bx lr
 1147              	.L32:
 1148              	 .align 2
 1149              	.L31:
 1150 003c 00000000 	 .word ActiveHallPattern
 1151              	 .cfi_endproc
 1152              	.LFE289:
 1154              	 .section .text.Sensor_Hall_GetPattern,"ax",%progbits
 1155              	 .align 2
 1156              	 .global Sensor_Hall_GetPattern
 1157              	 .thumb
 1158              	 .thumb_func
 1160              	Sensor_Hall_GetPattern:
 1161              	.LFB290:
 181:../sensor/Sensor_Hall.c **** 
 182:../sensor/Sensor_Hall.c **** uint8_t Sensor_Hall_GetPattern(uint8_t currentPattern)
 183:../sensor/Sensor_Hall.c **** {
 1162              	 .loc 5 183 0
 1163              	 .cfi_startproc
 1164              	 
 1165              	 
 1166              	 
 1167 0000 80B4     	 push {r7}
 1168              	.LCFI119:
 1169              	 .cfi_def_cfa_offset 4
 1170              	 .cfi_offset 7,-4
 1171 0002 83B0     	 sub sp,sp,#12
 1172              	.LCFI120:
 1173              	 .cfi_def_cfa_offset 16
 1174 0004 00AF     	 add r7,sp,#0
 1175              	.LCFI121:
 1176              	 .cfi_def_cfa_register 7
 1177 0006 0346     	 mov r3,r0
 1178 0008 FB71     	 strb r3,[r7,#7]
 184:../sensor/Sensor_Hall.c **** 	switch(motorDirection)
 1179              	 .loc 5 184 0
 1180 000a 0B4B     	 ldr r3,.L39
 1181 000c 1B78     	 ldrb r3,[r3]
 1182 000e 002B     	 cmp r3,#0
 1183 0010 02D0     	 beq .L35
 1184 0012 012B     	 cmp r3,#1
 1185 0014 04D0     	 beq .L36
 1186 0016 07E0     	 b .L38
 1187              	.L35:
 185:../sensor/Sensor_Hall.c **** 	{
 186:../sensor/Sensor_Hall.c **** 	case ClockWise:
 187:../sensor/Sensor_Hall.c **** 		return hall_pattern_cw[currentPattern];
 1188              	 .loc 5 187 0
 1189 0018 FB79     	 ldrb r3,[r7,#7]
 1190 001a 084A     	 ldr r2,.L39+4
 1191 001c D35C     	 ldrb r3,[r2,r3]
 1192 001e 04E0     	 b .L37
 1193              	.L36:
 188:../sensor/Sensor_Hall.c **** 	case CounterClockWise:
 189:../sensor/Sensor_Hall.c **** 		return hall_pattern_ccw[currentPattern];
 1194              	 .loc 5 189 0
 1195 0020 FB79     	 ldrb r3,[r7,#7]
 1196 0022 074A     	 ldr r2,.L39+8
 1197 0024 D35C     	 ldrb r3,[r2,r3]
 1198 0026 00E0     	 b .L37
 1199              	.L38:
 190:../sensor/Sensor_Hall.c **** 	}
 191:../sensor/Sensor_Hall.c **** 
 192:../sensor/Sensor_Hall.c **** 	return 0;
 1200              	 .loc 5 192 0
 1201 0028 0023     	 movs r3,#0
 1202              	.L37:
 193:../sensor/Sensor_Hall.c **** }
 1203              	 .loc 5 193 0
 1204 002a 1846     	 mov r0,r3
 1205 002c 0C37     	 adds r7,r7,#12
 1206              	.LCFI122:
 1207              	 .cfi_def_cfa_offset 4
 1208 002e BD46     	 mov sp,r7
 1209              	.LCFI123:
 1210              	 .cfi_def_cfa_register 13
 1211              	 
 1212 0030 5DF8047B 	 ldr r7,[sp],#4
 1213              	.LCFI124:
 1214              	 .cfi_restore 7
 1215              	 .cfi_def_cfa_offset 0
 1216 0034 7047     	 bx lr
 1217              	.L40:
 1218 0036 00BF     	 .align 2
 1219              	.L39:
 1220 0038 00000000 	 .word motorDirection
 1221 003c 00000000 	 .word hall_pattern_cw
 1222 0040 00000000 	 .word hall_pattern_ccw
 1223              	 .cfi_endproc
 1224              	.LFE290:
 1226              	 .section .text.Sensor_GetDirection,"ax",%progbits
 1227              	 .align 2
 1228              	 .global Sensor_GetDirection
 1229              	 .thumb
 1230              	 .thumb_func
 1232              	Sensor_GetDirection:
 1233              	.LFB291:
 194:../sensor/Sensor_Hall.c **** 
 195:../sensor/Sensor_Hall.c **** /*********************************************************************************
 196:../sensor/Sensor_Hall.c ****  * Global function definitions
 197:../sensor/Sensor_Hall.c ****  *********************************************************************************/
 198:../sensor/Sensor_Hall.c **** 
 199:../sensor/Sensor_Hall.c **** MotorDirection_t Sensor_GetDirection(void)
 200:../sensor/Sensor_Hall.c **** {
 1234              	 .loc 5 200 0
 1235              	 .cfi_startproc
 1236              	 
 1237              	 
 1238              	 
 1239 0000 80B4     	 push {r7}
 1240              	.LCFI125:
 1241              	 .cfi_def_cfa_offset 4
 1242              	 .cfi_offset 7,-4
 1243 0002 00AF     	 add r7,sp,#0
 1244              	.LCFI126:
 1245              	 .cfi_def_cfa_register 7
 201:../sensor/Sensor_Hall.c **** 	return motorDirection;
 1246              	 .loc 5 201 0
 1247 0004 034B     	 ldr r3,.L43
 1248 0006 1B78     	 ldrb r3,[r3]
 202:../sensor/Sensor_Hall.c **** }
 1249              	 .loc 5 202 0
 1250 0008 1846     	 mov r0,r3
 1251 000a BD46     	 mov sp,r7
 1252              	.LCFI127:
 1253              	 .cfi_def_cfa_register 13
 1254              	 
 1255 000c 5DF8047B 	 ldr r7,[sp],#4
 1256              	.LCFI128:
 1257              	 .cfi_restore 7
 1258              	 .cfi_def_cfa_offset 0
 1259 0010 7047     	 bx lr
 1260              	.L44:
 1261 0012 00BF     	 .align 2
 1262              	.L43:
 1263 0014 00000000 	 .word motorDirection
 1264              	 .cfi_endproc
 1265              	.LFE291:
 1267              	 .section .text.POSIF0_0_IRQHandler,"ax",%progbits
 1268              	 .align 2
 1269              	 .global POSIF0_0_IRQHandler
 1270              	 .thumb
 1271              	 .thumb_func
 1273              	POSIF0_0_IRQHandler:
 1274              	.LFB292:
 203:../sensor/Sensor_Hall.c **** 
 204:../sensor/Sensor_Hall.c **** void POSIF0_0_IRQHandler(void)
 205:../sensor/Sensor_Hall.c **** {
 1275              	 .loc 5 205 0
 1276              	 .cfi_startproc
 1277              	 
 1278              	 
 1279 0000 80B5     	 push {r7,lr}
 1280              	.LCFI129:
 1281              	 .cfi_def_cfa_offset 8
 1282              	 .cfi_offset 7,-8
 1283              	 .cfi_offset 14,-4
 1284 0002 82B0     	 sub sp,sp,#8
 1285              	.LCFI130:
 1286              	 .cfi_def_cfa_offset 16
 1287 0004 00AF     	 add r7,sp,#0
 1288              	.LCFI131:
 1289              	 .cfi_def_cfa_register 7
 206:../sensor/Sensor_Hall.c **** 	uint8_t hallposition;
 207:../sensor/Sensor_Hall.c **** 
 208:../sensor/Sensor_Hall.c **** 	/* Set the new Hall pattern */
 209:../sensor/Sensor_Hall.c **** 	hallposition = XMC_POSIF_HSC_GetExpectedPattern(POSIF_PTR);
 1290              	 .loc 5 209 0
 1291 0006 1648     	 ldr r0,.L47
 1292 0008 FFF7FEFF 	 bl XMC_POSIF_HSC_GetExpectedPattern
 1293 000c 0346     	 mov r3,r0
 1294 000e FB71     	 strb r3,[r7,#7]
 210:../sensor/Sensor_Hall.c **** 	XMC_POSIF_HSC_SetHallPatterns(POSIF_PTR, Sensor_Hall_GetPattern(hallposition));
 1295              	 .loc 5 210 0
 1296 0010 FB79     	 ldrb r3,[r7,#7]
 1297 0012 1846     	 mov r0,r3
 1298 0014 FFF7FEFF 	 bl Sensor_Hall_GetPattern
 1299 0018 0346     	 mov r3,r0
 1300 001a 1148     	 ldr r0,.L47
 1301 001c 1946     	 mov r1,r3
 1302 001e FFF7FEFF 	 bl XMC_POSIF_HSC_SetHallPatterns
 211:../sensor/Sensor_Hall.c **** 	XMC_POSIF_HSC_UpdateHallPattern(POSIF_PTR);
 1303              	 .loc 5 211 0
 1304 0022 0F48     	 ldr r0,.L47
 1305 0024 FFF7FEFF 	 bl XMC_POSIF_HSC_UpdateHallPattern
 212:../sensor/Sensor_Hall.c **** 
 213:../sensor/Sensor_Hall.c **** 	//Save the active hall position for queries
 214:../sensor/Sensor_Hall.c **** 	Sensor_Hall_SetActivePattern(hallposition);
 1306              	 .loc 5 214 0
 1307 0028 FB79     	 ldrb r3,[r7,#7]
 1308 002a 1846     	 mov r0,r3
 1309 002c FFF7FEFF 	 bl Sensor_Hall_SetActivePattern
 215:../sensor/Sensor_Hall.c **** 	/* Update motor pattern */
 216:../sensor/Sensor_Hall.c **** 	if (currentPattern != NULL && *currentPattern != -1) {
 1310              	 .loc 5 216 0
 1311 0030 0C4B     	 ldr r3,.L47+4
 1312 0032 1B68     	 ldr r3,[r3]
 1313 0034 002B     	 cmp r3,#0
 1314 0036 04D0     	 beq .L46
 217:../sensor/Sensor_Hall.c **** 		++currentPattern;
 1315              	 .loc 5 217 0
 1316 0038 0A4B     	 ldr r3,.L47+4
 1317 003a 1B68     	 ldr r3,[r3]
 1318 003c 0133     	 adds r3,r3,#1
 1319 003e 094A     	 ldr r2,.L47+4
 1320 0040 1360     	 str r3,[r2]
 1321              	.L46:
 218:../sensor/Sensor_Hall.c **** 	} else if (*currentPattern == -1) {
 219:../sensor/Sensor_Hall.c **** 		currentPattern -= 6;
 220:../sensor/Sensor_Hall.c **** 	}
 221:../sensor/Sensor_Hall.c **** 	else {
 222:../sensor/Sensor_Hall.c **** 		/* Externally driven - nothing to do */
 223:../sensor/Sensor_Hall.c **** 	}
 224:../sensor/Sensor_Hall.c **** 	//XMC_POSIF_MCM_SetMultiChannelPattern(POSIF_PTR, 1 << pattern*currentPattern);
 225:../sensor/Sensor_Hall.c **** 
 226:../sensor/Sensor_Hall.c **** 	XMC_POSIF_ClearEvent(POSIF_PTR, XMC_POSIF_IRQ_EVENT_CHE);
 1322              	 .loc 5 226 0
 1323 0042 0748     	 ldr r0,.L47
 1324 0044 0021     	 movs r1,#0
 1325 0046 FFF7FEFF 	 bl XMC_POSIF_ClearEvent
 227:../sensor/Sensor_Hall.c **** 	/* Peak */
 228:../sensor/Sensor_Hall.c **** 	XMC_GPIO_ToggleOutput(HALL_EVENT_IO);
 1326              	 .loc 5 228 0
 1327 004a 0748     	 ldr r0,.L47+8
 1328 004c 0921     	 movs r1,#9
 1329 004e FFF7FEFF 	 bl XMC_GPIO_ToggleOutput
 229:../sensor/Sensor_Hall.c **** 
 230:../sensor/Sensor_Hall.c **** 	SensorHallCallback();
 1330              	 .loc 5 230 0
 1331 0052 064B     	 ldr r3,.L47+12
 1332 0054 1B68     	 ldr r3,[r3]
 1333 0056 9847     	 blx r3
 231:../sensor/Sensor_Hall.c **** }
 1334              	 .loc 5 231 0
 1335 0058 0837     	 adds r7,r7,#8
 1336              	.LCFI132:
 1337              	 .cfi_def_cfa_offset 8
 1338 005a BD46     	 mov sp,r7
 1339              	.LCFI133:
 1340              	 .cfi_def_cfa_register 13
 1341              	 
 1342 005c 80BD     	 pop {r7,pc}
 1343              	.L48:
 1344 005e 00BF     	 .align 2
 1345              	.L47:
 1346 0060 00800240 	 .word 1073905664
 1347 0064 00000000 	 .word currentPattern
 1348 0068 00850248 	 .word 1208124672
 1349 006c 00000000 	 .word SensorHallCallback
 1350              	 .cfi_endproc
 1351              	.LFE292:
 1353              	 .section .text.Sensor_Hall_Init,"ax",%progbits
 1354              	 .align 2
 1355              	 .global Sensor_Hall_Init
 1356              	 .thumb
 1357              	 .thumb_func
 1359              	Sensor_Hall_Init:
 1360              	.LFB293:
 232:../sensor/Sensor_Hall.c **** 
 233:../sensor/Sensor_Hall.c **** void Sensor_Hall_Init()
 234:../sensor/Sensor_Hall.c **** {
 1361              	 .loc 5 234 0
 1362              	 .cfi_startproc
 1363              	 
 1364              	 
 1365 0000 80B5     	 push {r7,lr}
 1366              	.LCFI134:
 1367              	 .cfi_def_cfa_offset 8
 1368              	 .cfi_offset 7,-8
 1369              	 .cfi_offset 14,-4
 1370 0002 00AF     	 add r7,sp,#0
 1371              	.LCFI135:
 1372              	 .cfi_def_cfa_register 7
 235:../sensor/Sensor_Hall.c **** 	XMC_GPIO_Init(HALL_PORT_A, &HALL_POSIF_0_Hall_PadConfig);
 1373              	 .loc 5 235 0
 1374 0004 3648     	 ldr r0,.L50
 1375 0006 0721     	 movs r1,#7
 1376 0008 364A     	 ldr r2,.L50+4
 1377 000a FFF7FEFF 	 bl XMC_GPIO_Init
 236:../sensor/Sensor_Hall.c **** 	XMC_GPIO_Init(HALL_PORT_B, &HALL_POSIF_0_Hall_PadConfig);
 1378              	 .loc 5 236 0
 1379 000e 3448     	 ldr r0,.L50
 1380 0010 0621     	 movs r1,#6
 1381 0012 344A     	 ldr r2,.L50+4
 1382 0014 FFF7FEFF 	 bl XMC_GPIO_Init
 237:../sensor/Sensor_Hall.c **** 	XMC_GPIO_Init(HALL_PORT_C, &HALL_POSIF_0_Hall_PadConfig);
 1383              	 .loc 5 237 0
 1384 0018 3148     	 ldr r0,.L50
 1385 001a 0521     	 movs r1,#5
 1386 001c 314A     	 ldr r2,.L50+4
 1387 001e FFF7FEFF 	 bl XMC_GPIO_Init
 238:../sensor/Sensor_Hall.c **** 
 239:../sensor/Sensor_Hall.c **** 	XMC_GPIO_SetMode(HALL_EVENT_IO, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 1388              	 .loc 5 239 0
 1389 0022 3148     	 ldr r0,.L50+8
 1390 0024 0921     	 movs r1,#9
 1391 0026 8022     	 movs r2,#128
 1392 0028 FFF7FEFF 	 bl XMC_GPIO_SetMode
 240:../sensor/Sensor_Hall.c **** 
 241:../sensor/Sensor_Hall.c **** 	/* Enable clock, enable prescaler block and configure global control */
 242:../sensor/Sensor_Hall.c **** 	XMC_CCU4_Init(HALL_CCU, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 1393              	 .loc 5 242 0
 1394 002c 2F48     	 ldr r0,.L50+12
 1395 002e 0021     	 movs r1,#0
 1396 0030 FFF7FEFF 	 bl XMC_CCU4_Init
 243:../sensor/Sensor_Hall.c **** 
 244:../sensor/Sensor_Hall.c **** 	/* Start the prescaler and restore clocks to slices */
 245:../sensor/Sensor_Hall.c **** 	XMC_CCU4_StartPrescaler(HALL_CCU);
 1397              	 .loc 5 245 0
 1398 0034 2D48     	 ldr r0,.L50+12
 1399 0036 FFF7FEFF 	 bl XMC_CCU4_StartPrescaler
 246:../sensor/Sensor_Hall.c **** 
 247:../sensor/Sensor_Hall.c **** 	/* Ensure fCCU reaches CCU40, CCU80 */
 248:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SetModuleClock(HALL_CCU, XMC_CCU4_CLOCK_SCU);
 1400              	 .loc 5 248 0
 1401 003a 2C48     	 ldr r0,.L50+12
 1402 003c 0021     	 movs r1,#0
 1403 003e FFF7FEFF 	 bl XMC_CCU4_SetModuleClock
 249:../sensor/Sensor_Hall.c **** 
 250:../sensor/Sensor_Hall.c **** 	/* Configure CCU4 slices as monoshot and capture slice */
 251:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_CompareInit(DELAY_SLICE_PTR, &hall_delay_config);
 1404              	 .loc 5 251 0
 1405 0042 2B48     	 ldr r0,.L50+16
 1406 0044 2B49     	 ldr r1,.L50+20
 1407 0046 FFF7FEFF 	 bl XMC_CCU4_SLICE_CompareInit
 252:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_CaptureInit(CAPTURE_SLICE_PTR, &hall_capture_config);
 1408              	 .loc 5 252 0
 1409 004a 2B48     	 ldr r0,.L50+24
 1410 004c 2B49     	 ldr r1,.L50+28
 1411 004e FFF7FEFF 	 bl XMC_CCU4_SLICE_CaptureInit
 253:../sensor/Sensor_Hall.c **** 
 254:../sensor/Sensor_Hall.c **** 	/* Configure CCU4 delay as 1us - CCU40.ST0 is connected to POSIF.HSDA*/
 255:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_SetTimerPeriodMatch(DELAY_SLICE_PTR, 127U);
 1412              	 .loc 5 255 0
 1413 0052 2748     	 ldr r0,.L50+16
 1414 0054 7F21     	 movs r1,#127
 1415 0056 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 256:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_SetTimerCompareMatch(DELAY_SLICE_PTR, 64U);
 1416              	 .loc 5 256 0
 1417 005a 2548     	 ldr r0,.L50+16
 1418 005c 4021     	 movs r1,#64
 1419 005e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
 257:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_SetTimerPeriodMatch(CAPTURE_SLICE_PTR, 65535U);
 1420              	 .loc 5 257 0
 1421 0062 2548     	 ldr r0,.L50+24
 1422 0064 4FF6FF71 	 movw r1,#65535
 1423 0068 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerPeriodMatch
 258:../sensor/Sensor_Hall.c **** 
 259:../sensor/Sensor_Hall.c **** 	/* Transfer value from shadow timer registers to actual timer registers */
 260:../sensor/Sensor_Hall.c **** 	XMC_CCU4_EnableShadowTransfer(HALL_CCU, (uint32_t)(XMC_CCU4_SHADOW_TRANSFER_SLICE_0 | XMC_CCU4_SHA
 1424              	 .loc 5 260 0
 1425 006c 1F48     	 ldr r0,.L50+12
 1426 006e 1121     	 movs r1,#17
 1427 0070 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 261:../sensor/Sensor_Hall.c **** 
 262:../sensor/Sensor_Hall.c **** 	/* Configure and enable events */
 263:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_StartConfig(DELAY_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, XMC_CCU4_SLICE_START_MODE_TIME
 1428              	 .loc 5 263 0
 1429 0074 1E48     	 ldr r0,.L50+16
 1430 0076 0121     	 movs r1,#1
 1431 0078 0122     	 movs r2,#1
 1432 007a FFF7FEFF 	 bl XMC_CCU4_SLICE_StartConfig
 264:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_Capture0Config(CAPTURE_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0);
 1433              	 .loc 5 264 0
 1434 007e 1E48     	 ldr r0,.L50+24
 1435 0080 0121     	 movs r1,#1
 1436 0082 FFF7FEFF 	 bl XMC_CCU4_SLICE_Capture0Config
 265:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_ConfigureEvent(CAPTURE_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &hall_capture_event0_conf
 1437              	 .loc 5 265 0
 1438 0086 1C48     	 ldr r0,.L50+24
 1439 0088 0121     	 movs r1,#1
 1440 008a 1D4A     	 ldr r2,.L50+32
 1441 008c FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 266:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_ConfigureEvent(DELAY_SLICE_PTR, XMC_CCU4_SLICE_EVENT_0, &hall_start_event0_config);
 1442              	 .loc 5 266 0
 1443 0090 1748     	 ldr r0,.L50+16
 1444 0092 0121     	 movs r1,#1
 1445 0094 1B4A     	 ldr r2,.L50+36
 1446 0096 FFF7FEFF 	 bl XMC_CCU4_SLICE_ConfigureEvent
 267:../sensor/Sensor_Hall.c **** 
 268:../sensor/Sensor_Hall.c **** 	/* Get the slice out of idle mode */
 269:../sensor/Sensor_Hall.c **** 	XMC_CCU4_EnableClock(HALL_CCU, DELAY_SLICE_NUMBER);
 1447              	 .loc 5 269 0
 1448 009a 1448     	 ldr r0,.L50+12
 1449 009c 0021     	 movs r1,#0
 1450 009e FFF7FEFF 	 bl XMC_CCU4_EnableClock
 270:../sensor/Sensor_Hall.c **** 	XMC_CCU4_EnableClock(HALL_CCU, CAPTURE_SLICE_NUMBER);
 1451              	 .loc 5 270 0
 1452 00a2 1248     	 ldr r0,.L50+12
 1453 00a4 0121     	 movs r1,#1
 1454 00a6 FFF7FEFF 	 bl XMC_CCU4_EnableClock
 271:../sensor/Sensor_Hall.c **** 
 272:../sensor/Sensor_Hall.c **** 	/* POSIF Configuration */
 273:../sensor/Sensor_Hall.c **** 	XMC_POSIF_Init(POSIF_PTR, &POSIF_HALL_config);
 1455              	 .loc 5 273 0
 1456 00aa 1748     	 ldr r0,.L50+40
 1457 00ac 1749     	 ldr r1,.L50+44
 1458 00ae FFF7FEFF 	 bl XMC_POSIF_Init
 274:../sensor/Sensor_Hall.c **** 	XMC_POSIF_HSC_Init(POSIF_PTR, &POSIF_HSC_config);
 1459              	 .loc 5 274 0
 1460 00b2 1548     	 ldr r0,.L50+40
 1461 00b4 1649     	 ldr r1,.L50+48
 1462 00b6 FFF7FEFF 	 bl XMC_POSIF_HSC_Init
 275:../sensor/Sensor_Hall.c **** 	XMC_POSIF_EnableEvent(POSIF_PTR, XMC_POSIF_IRQ_EVENT_CHE);
 1463              	 .loc 5 275 0
 1464 00ba 1348     	 ldr r0,.L50+40
 1465 00bc 0021     	 movs r1,#0
 1466 00be FFF7FEFF 	 bl XMC_POSIF_EnableEvent
 276:../sensor/Sensor_Hall.c **** 
 277:../sensor/Sensor_Hall.c **** 	/* Connect correct hall event to SR0 */
 278:../sensor/Sensor_Hall.c **** 	XMC_POSIF_SetInterruptNode(POSIF_PTR, XMC_POSIF_IRQ_EVENT_CHE, XMC_POSIF_SR_ID_0);
 1467              	 .loc 5 278 0
 1468 00c2 1148     	 ldr r0,.L50+40
 1469 00c4 0021     	 movs r1,#0
 1470 00c6 0022     	 movs r2,#0
 1471 00c8 FFF7FEFF 	 bl XMC_POSIF_SetInterruptNode
 279:../sensor/Sensor_Hall.c **** 
 280:../sensor/Sensor_Hall.c **** 	/* Configure NVIC */
 281:../sensor/Sensor_Hall.c **** 	/* Set priority */
 282:../sensor/Sensor_Hall.c **** 	NVIC_SetPriority(POSIF0_0_IRQn, 0U);
 1472              	 .loc 5 282 0
 1473 00cc 4420     	 movs r0,#68
 1474 00ce 0021     	 movs r1,#0
 1475 00d0 FFF7FEFF 	 bl NVIC_SetPriority
 283:../sensor/Sensor_Hall.c **** 	/* Enable IRQ */
 284:../sensor/Sensor_Hall.c **** 	NVIC_EnableIRQ(POSIF0_0_IRQn);
 1476              	 .loc 5 284 0
 1477 00d4 4420     	 movs r0,#68
 1478 00d6 FFF7FEFF 	 bl NVIC_EnableIRQ
 285:../sensor/Sensor_Hall.c **** 
 286:../sensor/Sensor_Hall.c **** 	//Initialize the hall pattern
 287:../sensor/Sensor_Hall.c **** 	Sensor_Hall_InitPattern();
 1479              	 .loc 5 287 0
 1480 00da FFF7FEFF 	 bl Sensor_Hall_InitPattern
 288:../sensor/Sensor_Hall.c **** }
 1481              	 .loc 5 288 0
 1482 00de 80BD     	 pop {r7,pc}
 1483              	.L51:
 1484              	 .align 2
 1485              	.L50:
 1486 00e0 008E0248 	 .word 1208126976
 1487 00e4 00000000 	 .word HALL_POSIF_0_Hall_PadConfig
 1488 00e8 00850248 	 .word 1208124672
 1489 00ec 00C00040 	 .word 1073790976
 1490 00f0 00C10040 	 .word 1073791232
 1491 00f4 00000000 	 .word hall_delay_config
 1492 00f8 00C20040 	 .word 1073791488
 1493 00fc 00000000 	 .word hall_capture_config
 1494 0100 00000000 	 .word hall_capture_event0_config
 1495 0104 00000000 	 .word hall_start_event0_config
 1496 0108 00800240 	 .word 1073905664
 1497 010c 00000000 	 .word POSIF_HALL_config
 1498 0110 00000000 	 .word POSIF_HSC_config
 1499              	 .cfi_endproc
 1500              	.LFE293:
 1502              	 .section .text.Sensor_Hall_Start,"ax",%progbits
 1503              	 .align 2
 1504              	 .global Sensor_Hall_Start
 1505              	 .thumb
 1506              	 .thumb_func
 1508              	Sensor_Hall_Start:
 1509              	.LFB294:
 289:../sensor/Sensor_Hall.c **** 
 290:../sensor/Sensor_Hall.c **** void Sensor_Hall_Start()
 291:../sensor/Sensor_Hall.c **** {
 1510              	 .loc 5 291 0
 1511              	 .cfi_startproc
 1512              	 
 1513              	 
 1514 0000 80B5     	 push {r7,lr}
 1515              	.LCFI136:
 1516              	 .cfi_def_cfa_offset 8
 1517              	 .cfi_offset 7,-8
 1518              	 .cfi_offset 14,-4
 1519 0002 00AF     	 add r7,sp,#0
 1520              	.LCFI137:
 1521              	 .cfi_def_cfa_register 7
 292:../sensor/Sensor_Hall.c **** 	/* Start Timer Running */
 293:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_StartTimer(CAPTURE_SLICE_PTR);
 1522              	 .loc 5 293 0
 1523 0004 0348     	 ldr r0,.L53
 1524 0006 FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 294:../sensor/Sensor_Hall.c **** 
 295:../sensor/Sensor_Hall.c **** 	/* Start the POSIF module*/
 296:../sensor/Sensor_Hall.c **** 	XMC_POSIF_Start(POSIF_PTR);
 1525              	 .loc 5 296 0
 1526 000a 0348     	 ldr r0,.L53+4
 1527 000c FFF7FEFF 	 bl XMC_POSIF_Start
 297:../sensor/Sensor_Hall.c **** }
 1528              	 .loc 5 297 0
 1529 0010 80BD     	 pop {r7,pc}
 1530              	.L54:
 1531 0012 00BF     	 .align 2
 1532              	.L53:
 1533 0014 00C20040 	 .word 1073791488
 1534 0018 00800240 	 .word 1073905664
 1535              	 .cfi_endproc
 1536              	.LFE294:
 1538              	 .section .text.Sensor_Hall_Stop,"ax",%progbits
 1539              	 .align 2
 1540              	 .global Sensor_Hall_Stop
 1541              	 .thumb
 1542              	 .thumb_func
 1544              	Sensor_Hall_Stop:
 1545              	.LFB295:
 298:../sensor/Sensor_Hall.c **** 
 299:../sensor/Sensor_Hall.c **** void Sensor_Hall_Stop()
 300:../sensor/Sensor_Hall.c **** {
 1546              	 .loc 5 300 0
 1547              	 .cfi_startproc
 1548              	 
 1549              	 
 1550 0000 80B5     	 push {r7,lr}
 1551              	.LCFI138:
 1552              	 .cfi_def_cfa_offset 8
 1553              	 .cfi_offset 7,-8
 1554              	 .cfi_offset 14,-4
 1555 0002 00AF     	 add r7,sp,#0
 1556              	.LCFI139:
 1557              	 .cfi_def_cfa_register 7
 301:../sensor/Sensor_Hall.c **** 	/* Start Timer Running */
 302:../sensor/Sensor_Hall.c **** 	XMC_CCU4_SLICE_StopTimer(CAPTURE_SLICE_PTR);
 1558              	 .loc 5 302 0
 1559 0004 0348     	 ldr r0,.L56
 1560 0006 FFF7FEFF 	 bl XMC_CCU4_SLICE_StopTimer
 303:../sensor/Sensor_Hall.c **** 
 304:../sensor/Sensor_Hall.c **** 	/* Start the POSIF module*/
 305:../sensor/Sensor_Hall.c **** 	XMC_POSIF_Stop(POSIF_PTR);
 1561              	 .loc 5 305 0
 1562 000a 0348     	 ldr r0,.L56+4
 1563 000c FFF7FEFF 	 bl XMC_POSIF_Stop
 306:../sensor/Sensor_Hall.c **** }
 1564              	 .loc 5 306 0
 1565 0010 80BD     	 pop {r7,pc}
 1566              	.L57:
 1567 0012 00BF     	 .align 2
 1568              	.L56:
 1569 0014 00C20040 	 .word 1073791488
 1570 0018 00800240 	 .word 1073905664
 1571              	 .cfi_endproc
 1572              	.LFE295:
 1574              	 .section .text.Sensor_Hall_SetDirection,"ax",%progbits
 1575              	 .align 2
 1576              	 .global Sensor_Hall_SetDirection
 1577              	 .thumb
 1578              	 .thumb_func
 1580              	Sensor_Hall_SetDirection:
 1581              	.LFB296:
 307:../sensor/Sensor_Hall.c **** 
 308:../sensor/Sensor_Hall.c **** void Sensor_Hall_SetDirection(MotorDirection_t direction)
 309:../sensor/Sensor_Hall.c **** {
 1582              	 .loc 5 309 0
 1583              	 .cfi_startproc
 1584              	 
 1585              	 
 1586              	 
 1587 0000 80B4     	 push {r7}
 1588              	.LCFI140:
 1589              	 .cfi_def_cfa_offset 4
 1590              	 .cfi_offset 7,-4
 1591 0002 83B0     	 sub sp,sp,#12
 1592              	.LCFI141:
 1593              	 .cfi_def_cfa_offset 16
 1594 0004 00AF     	 add r7,sp,#0
 1595              	.LCFI142:
 1596              	 .cfi_def_cfa_register 7
 1597 0006 0346     	 mov r3,r0
 1598 0008 FB71     	 strb r3,[r7,#7]
 310:../sensor/Sensor_Hall.c **** 	motorDirection = direction;
 1599              	 .loc 5 310 0
 1600 000a 044A     	 ldr r2,.L59
 1601 000c FB79     	 ldrb r3,[r7,#7]
 1602 000e 1370     	 strb r3,[r2]
 311:../sensor/Sensor_Hall.c **** }
 1603              	 .loc 5 311 0
 1604 0010 0C37     	 adds r7,r7,#12
 1605              	.LCFI143:
 1606              	 .cfi_def_cfa_offset 4
 1607 0012 BD46     	 mov sp,r7
 1608              	.LCFI144:
 1609              	 .cfi_def_cfa_register 13
 1610              	 
 1611 0014 5DF8047B 	 ldr r7,[sp],#4
 1612              	.LCFI145:
 1613              	 .cfi_restore 7
 1614              	 .cfi_def_cfa_offset 0
 1615 0018 7047     	 bx lr
 1616              	.L60:
 1617 001a 00BF     	 .align 2
 1618              	.L59:
 1619 001c 00000000 	 .word motorDirection
 1620              	 .cfi_endproc
 1621              	.LFE296:
 1623              	 .text
 1624              	.Letext0:
 1625              	 .file 6 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1626              	 .file 7 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1627              	 .file 8 "E:/DT/workspace/MotorXP/common/Std_Types.h"
 1628              	 .file 9 "../sensor/Sensor_Types.h"
 1629              	 .file 10 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Infineon/XMC4800_series/Include/XMC4800.h"
 1630              	 .file 11 "E:/DT/workspace/MotorXP/Libraries/XMCLib/inc/xmc4_gpio.h"
 1631              	 .file 12 "../sensor/Sensor_Hall.h"
 1632              	 .file 13 "E:/DT/workspace/MotorXP/Libraries/CMSIS/Infineon/XMC4800_series/Include/system_XMC4800.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Sensor_Hall.c
                            *COM*:00000004 SensorHallCallback
                            *COM*:00000003 ActiveHallPattern
    {standard input}:22     .text.NVIC_EnableIRQ:00000000 $t
    {standard input}:26     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
    {standard input}:71     .text.NVIC_EnableIRQ:0000002c $d
    {standard input}:76     .text.NVIC_SetPriority:00000000 $t
    {standard input}:80     .text.NVIC_SetPriority:00000000 NVIC_SetPriority
    {standard input}:143    .text.NVIC_SetPriority:0000004c $d
    {standard input}:149    .text.XMC_CCU4_StartPrescaler:00000000 $t
    {standard input}:153    .text.XMC_CCU4_StartPrescaler:00000000 XMC_CCU4_StartPrescaler
    {standard input}:195    .text.XMC_CCU4_EnableClock:00000000 $t
    {standard input}:199    .text.XMC_CCU4_EnableClock:00000000 XMC_CCU4_EnableClock
    {standard input}:245    .text.XMC_CCU4_SLICE_StartTimer:00000000 $t
    {standard input}:249    .text.XMC_CCU4_SLICE_StartTimer:00000000 XMC_CCU4_SLICE_StartTimer
    {standard input}:288    .text.XMC_CCU4_SLICE_StopTimer:00000000 $t
    {standard input}:292    .text.XMC_CCU4_SLICE_StopTimer:00000000 XMC_CCU4_SLICE_StopTimer
    {standard input}:331    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 $t
    {standard input}:335    .text.XMC_CCU4_SLICE_SetTimerPeriodMatch:00000000 XMC_CCU4_SLICE_SetTimerPeriodMatch
    {standard input}:376    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:380    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 XMC_CCU4_SLICE_SetTimerCompareMatch
    {standard input}:421    .text.XMC_CCU4_EnableShadowTransfer:00000000 $t
    {standard input}:425    .text.XMC_CCU4_EnableShadowTransfer:00000000 XMC_CCU4_EnableShadowTransfer
    {standard input}:465    .text.XMC_POSIF_Start:00000000 $t
    {standard input}:469    .text.XMC_POSIF_Start:00000000 XMC_POSIF_Start
    {standard input}:509    .text.XMC_POSIF_Stop:00000000 $t
    {standard input}:513    .text.XMC_POSIF_Stop:00000000 XMC_POSIF_Stop
    {standard input}:552    .text.XMC_POSIF_HSC_GetExpectedPattern:00000000 $t
    {standard input}:556    .text.XMC_POSIF_HSC_GetExpectedPattern:00000000 XMC_POSIF_HSC_GetExpectedPattern
    {standard input}:598    .text.XMC_POSIF_HSC_SetHallPatterns:00000000 $t
    {standard input}:602    .text.XMC_POSIF_HSC_SetHallPatterns:00000000 XMC_POSIF_HSC_SetHallPatterns
    {standard input}:644    .text.XMC_POSIF_HSC_UpdateHallPattern:00000000 $t
    {standard input}:648    .text.XMC_POSIF_HSC_UpdateHallPattern:00000000 XMC_POSIF_HSC_UpdateHallPattern
    {standard input}:687    .text.XMC_POSIF_EnableEvent:00000000 $t
    {standard input}:691    .text.XMC_POSIF_EnableEvent:00000000 XMC_POSIF_EnableEvent
    {standard input}:737    .text.XMC_POSIF_ClearEvent:00000000 $t
    {standard input}:741    .text.XMC_POSIF_ClearEvent:00000000 XMC_POSIF_ClearEvent
    {standard input}:784    .text.XMC_GPIO_ToggleOutput:00000000 $t
    {standard input}:788    .text.XMC_GPIO_ToggleOutput:00000000 XMC_GPIO_ToggleOutput
    {standard input}:832    .text.XMC_GPIO_GetInput:00000000 $t
    {standard input}:836    .text.XMC_GPIO_GetInput:00000000 XMC_GPIO_GetInput
    {standard input}:884    .bss.hall:00000000 hall
    {standard input}:881    .bss.hall:00000000 $d
    {standard input}:889    .bss.motorDirection:00000000 motorDirection
    {standard input}:890    .bss.motorDirection:00000000 $d
    {standard input}:896    .data.hall_pattern_ccw:00000000 hall_pattern_ccw
    {standard input}:893    .data.hall_pattern_ccw:00000000 $d
    {standard input}:909    .data.hall_pattern_cw:00000000 hall_pattern_cw
    {standard input}:906    .data.hall_pattern_cw:00000000 $d
    {standard input}:922    .data.hall_delay_config:00000000 hall_delay_config
    {standard input}:919    .data.hall_delay_config:00000000 $d
    {standard input}:935    .data.hall_capture_config:00000000 hall_capture_config
    {standard input}:932    .data.hall_capture_config:00000000 $d
    {standard input}:948    .data.hall_start_event0_config:00000000 hall_start_event0_config
    {standard input}:945    .data.hall_start_event0_config:00000000 $d
    {standard input}:958    .data.hall_capture_event0_config:00000000 hall_capture_event0_config
    {standard input}:955    .data.hall_capture_event0_config:00000000 $d
    {standard input}:968    .data.POSIF_HALL_config:00000000 POSIF_HALL_config
    {standard input}:965    .data.POSIF_HALL_config:00000000 $d
    {standard input}:978    .data.POSIF_HSC_config:00000000 POSIF_HSC_config
    {standard input}:975    .data.POSIF_HSC_config:00000000 $d
    {standard input}:988    .data.HALL_POSIF_0_Hall_PadConfig:00000000 HALL_POSIF_0_Hall_PadConfig
    {standard input}:985    .data.HALL_POSIF_0_Hall_PadConfig:00000000 $d
    {standard input}:994    .text.Sensor_Hall_InitPattern:00000000 $t
    {standard input}:999    .text.Sensor_Hall_InitPattern:00000000 Sensor_Hall_InitPattern
    {standard input}:1160   .text.Sensor_Hall_GetPattern:00000000 Sensor_Hall_GetPattern
    {standard input}:1095   .text.Sensor_Hall_SetActivePattern:00000000 Sensor_Hall_SetActivePattern
    {standard input}:1083   .text.Sensor_Hall_InitPattern:00000078 $d
    {standard input}:1090   .text.Sensor_Hall_SetActivePattern:00000000 $t
    {standard input}:1150   .text.Sensor_Hall_SetActivePattern:0000003c $d
    {standard input}:1155   .text.Sensor_Hall_GetPattern:00000000 $t
    {standard input}:1220   .text.Sensor_Hall_GetPattern:00000038 $d
    {standard input}:1227   .text.Sensor_GetDirection:00000000 $t
    {standard input}:1232   .text.Sensor_GetDirection:00000000 Sensor_GetDirection
    {standard input}:1263   .text.Sensor_GetDirection:00000014 $d
    {standard input}:1268   .text.POSIF0_0_IRQHandler:00000000 $t
    {standard input}:1273   .text.POSIF0_0_IRQHandler:00000000 POSIF0_0_IRQHandler
    {standard input}:1346   .text.POSIF0_0_IRQHandler:00000060 $d
    {standard input}:1354   .text.Sensor_Hall_Init:00000000 $t
    {standard input}:1359   .text.Sensor_Hall_Init:00000000 Sensor_Hall_Init
    {standard input}:1486   .text.Sensor_Hall_Init:000000e0 $d
    {standard input}:1503   .text.Sensor_Hall_Start:00000000 $t
    {standard input}:1508   .text.Sensor_Hall_Start:00000000 Sensor_Hall_Start
    {standard input}:1533   .text.Sensor_Hall_Start:00000014 $d
    {standard input}:1539   .text.Sensor_Hall_Stop:00000000 $t
    {standard input}:1544   .text.Sensor_Hall_Stop:00000000 Sensor_Hall_Stop
    {standard input}:1569   .text.Sensor_Hall_Stop:00000014 $d
    {standard input}:1575   .text.Sensor_Hall_SetDirection:00000000 $t
    {standard input}:1580   .text.Sensor_Hall_SetDirection:00000000 Sensor_Hall_SetDirection
    {standard input}:1619   .text.Sensor_Hall_SetDirection:0000001c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
currentPattern
XMC_GPIO_Init
XMC_GPIO_SetMode
XMC_CCU4_Init
XMC_CCU4_SetModuleClock
XMC_CCU4_SLICE_CompareInit
XMC_CCU4_SLICE_CaptureInit
XMC_CCU4_SLICE_StartConfig
XMC_CCU4_SLICE_Capture0Config
XMC_CCU4_SLICE_ConfigureEvent
XMC_POSIF_Init
XMC_POSIF_HSC_Init
XMC_POSIF_SetInterruptNode
