// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SensorMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace MotorXP.Protobuf.SensorMSg
{

    /// <summary>Holder for reflection information generated from SensorMsg.proto</summary>
    public static partial class SensorMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for SensorMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9TZW5zb3JNc2cucHJvdG8SCUtvbU1vZHVsZSIrCglEYXRhRW50cnkSEAoI",
            "U2Vuc29ySWQYASABKA0SDAoERGF0YRgCIAEoASJICglTZW5zb3JNc2cSEgoK",
            "U2VxdWVuY2VOchgBIAEoBBInCglEYXRhVGFibGUYAiADKAsyFC5Lb21Nb2R1",
            "bGUuRGF0YUVudHJ5Qh2qAhpNb3RvclhQLlByb3RvYnVmLlNlbnNvck1TZ2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MotorXP.Protobuf.SensorMSg.DataEntry), global::MotorXP.Protobuf.SensorMSg.DataEntry.Parser, new[]{ "SensorId", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MotorXP.Protobuf.SensorMSg.SensorMsg), global::MotorXP.Protobuf.SensorMSg.SensorMsg.Parser, new[]{ "SequenceNr", "DataTable" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// defining an entry of the data table
  /// </summary>
  public sealed partial class DataEntry : pb::IMessage<DataEntry> {
    private static readonly pb::MessageParser<DataEntry> _parser = new pb::MessageParser<DataEntry>(() => new DataEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MotorXP.Protobuf.SensorMSg.SensorMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataEntry(DataEntry other) : this() {
      sensorId_ = other.sensorId_;
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataEntry Clone() {
      return new DataEntry(this);
    }

    /// <summary>Field number for the "SensorId" field.</summary>
    public const int SensorIdFieldNumber = 1;
    private uint sensorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private double data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SensorId != other.SensorId) return false;
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SensorId != 0) hash ^= SensorId.GetHashCode();
      if (Data != 0D) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SensorId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SensorId);
      }
      if (Data != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SensorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SensorId);
      }
      if (Data != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataEntry other) {
      if (other == null) {
        return;
      }
      if (other.SensorId != 0) {
        SensorId = other.SensorId;
      }
      if (other.Data != 0D) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SensorId = input.ReadUInt32();
            break;
          }
          case 17: {
            Data = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// defining the real message
  /// </summary>
  public sealed partial class SensorMsg : pb::IMessage<SensorMsg> {
    private static readonly pb::MessageParser<SensorMsg> _parser = new pb::MessageParser<SensorMsg>(() => new SensorMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SensorMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MotorXP.Protobuf.SensorMSg.SensorMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMsg(SensorMsg other) : this() {
      sequenceNr_ = other.sequenceNr_;
      dataTable_ = other.dataTable_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SensorMsg Clone() {
      return new SensorMsg(this);
    }

    /// <summary>Field number for the "SequenceNr" field.</summary>
    public const int SequenceNrFieldNumber = 1;
    private ulong sequenceNr_;
    /// <summary>
    /// Upcounting Nr
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SequenceNr {
      get { return sequenceNr_; }
      set {
        sequenceNr_ = value;
      }
    }

    /// <summary>Field number for the "DataTable" field.</summary>
    public const int DataTableFieldNumber = 2;
    private static readonly pb::FieldCodec<global::MotorXP.Protobuf.SensorMSg.DataEntry> _repeated_dataTable_codec
        = pb::FieldCodec.ForMessage(18, global::MotorXP.Protobuf.SensorMSg.DataEntry.Parser);
    private readonly pbc::RepeatedField<global::MotorXP.Protobuf.SensorMSg.DataEntry> dataTable_ = new pbc::RepeatedField<global::MotorXP.Protobuf.SensorMSg.DataEntry>();
    /// <summary>
    /// all Data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MotorXP.Protobuf.SensorMSg.DataEntry> DataTable {
      get { return dataTable_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SensorMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SensorMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SequenceNr != other.SequenceNr) return false;
      if(!dataTable_.Equals(other.dataTable_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SequenceNr != 0UL) hash ^= SequenceNr.GetHashCode();
      hash ^= dataTable_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SequenceNr != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SequenceNr);
      }
      dataTable_.WriteTo(output, _repeated_dataTable_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SequenceNr != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SequenceNr);
      }
      size += dataTable_.CalculateSize(_repeated_dataTable_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SensorMsg other) {
      if (other == null) {
        return;
      }
      if (other.SequenceNr != 0UL) {
        SequenceNr = other.SequenceNr;
      }
      dataTable_.Add(other.dataTable_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SequenceNr = input.ReadUInt64();
            break;
          }
          case 18: {
            dataTable_.AddEntriesFrom(input, _repeated_dataTable_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
